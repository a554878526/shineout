(window.webpackJsonpShineoutDoc=window.webpackJsonpShineoutDoc||[]).push([[46],{1560:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(563),o=t(564),s=t(40),l=t(1561),d=t.n(l),c=t(1562),u=t.n(c),m=Object(s.b)(d.a,u.a),f=[{name:"01-base",isTs:!0,isTest:!1,title:Object(s.b)("基本用法 \n 基础的表格用法。推荐 columns 写为常量，以提升性能。","Base \n Basic table usage."),component:t(1563).default,rawText:t(1565),parseTsText:t(1566)},{name:"02-style",isTs:!0,isTest:!1,title:Object(s.b)("边框和底纹 \n 通过 striped 显示交错底纹；通过 bordered 显示边框。","Style \n Set striped to add zebra-striping; Set bordered to add borders."),component:t(1567).default,rawText:t(1568),parseTsText:t(1569)},{name:"03-small",isTs:!0,isTest:!1,title:Object(s.b)("紧凑表格 \n 设置 size 为 small 显示紧凑表格","Small table \n Set size to small to display the compact form."),component:t(1570).default,rawText:t(1571),parseTsText:t(1572)},{name:"04-column-group",isTs:!0,isTest:!1,title:Object(s.b)("表头分组 \n Table 会自动合并相邻相同 group 的表头","Column group \n Table automatically merges headers with adjacent and identical groups."),component:t(1573).default,rawText:t(1574),parseTsText:t(1575)},{name:"06-fixed-header",isTs:!0,isTest:!1,title:Object(s.b)("固定表头 \n 设置 fixed 属性为 'both' 或 'y'，可以固定表头，表格高度默认填充父元素 \n 设置 fixed 属性为 'auto'，可以自动展示滚动条 \n 注:横向滚动需要指定 Table 的 width 属性, 不建议给所有的 column 设置宽度, 如果出现表头对不齐的问题, 请尝试至少留一列不设宽度以适应弹性布局，或者检查表格内容是否有超长不换行元素破坏布局.","Fixed head \n Set the fixed property to 'both' or 'y' can fix the table header. The table height defaults to full the parent element. \n Set the fixed property to 'auto' can auto show scrollbar. \n Note: Horizontal scrolling requires the width property of Table, it is not recommended to set the width for all columns, if there is a problem with tablehead pairs, try leaving at least one column without a width to fit the elastic layout, or check the table contentford for excessively long unwrapped elements to break the layout."),component:t(1576).default,rawText:t(1577),parseTsText:t(1578)},{name:"07-fixed-column-1",isTs:!0,isTest:!1,title:Object(s.b)("固定列 \n 设置 column 的 fixed 属性，可以固定列。只在设置了表格的 width 属性，并且 width 大于外部容器情况下才会生效","Fixed column \n Set the fixed property of the column can fix the column; Only take effect if the table's width property is set and width is greater than the external container."),component:t(1579).default,rawText:t(1580),parseTsText:t(1581)},{name:"07-fixed-column-2",isTs:!0,isTest:!1,title:Object(s.b)(" \n 示例：只固定右侧列"," \n Example: Only fix the right column."),component:t(1582).default,rawText:t(1583),parseTsText:t(1584)},{name:"08-bigdata",isTs:!0,isTest:!1,title:Object(s.b)("性能 \n Table内部对大量数据的渲染做了lazy render的优化。这个例子加载了10000条，55列数据。可以通过设置rowsInView调整单次最多render的行数，默认为20","Performance \n The rendering of large amounts of data in the Table has been optimized by lazy render. This example loads 10000 pieces and 55 columns of data. \n You can set rowsInView property to change the number of rows in rendering. The default value is 20."),component:t(1585).default,rawText:t(1586),parseTsText:t(1587)},{name:"09-loading",isTs:!0,isTest:!1,title:Object(s.b)("加载中 \n 设置 loading 属性可以将表格状态设置为加载中","Loading \n Set the loading property can set the table state to loading."),component:t(1588).default,rawText:t(1589),parseTsText:t(1590)},{name:"10-sort-default",isTs:!0,isTest:!1,title:Object(s.b)("排序 \n 设置 Table 的 sorter 属性统一指定排序函数 \n 设置 column 的 sorter 标示此列需要排序并指定依据字段，会作为第一个参数传入排序函数 \n defaultOrder 指定该列默认排序规则 \n sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序 \n 后端或自行排序用户自行处理，sorter 函数不要返回结果","Sorter \n Set the sorter property of Table to indicate the method of table sort. \n Set the sorter property of Column to indicate the sort key string, will pass to table sorter method \n Set defaultOrder mark defualt order \n When the sorter returns a function, use this function to sort data internally. \n Server-side or self-sorting is is handled by the user, do not return results."),component:t(1591).default,rawText:t(1592),parseTsText:t(1593)},{name:"10-sort-render",isTs:!0,isTest:!1,title:Object(s.b)("自定义排序图标 \n 设置 Table 的 renderSorter 属性来自定义图标","Sorter \n Set the renderSorter property of the Table to customize the icon."),component:t(1594).default,rawText:t(1595),parseTsText:t(1596)},{name:"10-sort-weight",isTs:!0,isTest:!1,title:Object(s.b)("多列排序 \n 设置 column 的 sorter 为一个对象，对象的rule属性同单列排序的sorter，weight表示排序权重，值越大表示排序优先级越高 \n 支持多列默认排序，为需要默认排序的列设置defaultOrder \n sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序 \n 后端或自行排序用户自行处理，sorter 函数不要返回结果","multiple Sorter \n Set the sorter property of Table to indicate the method of table sort. \n Set the sorter of column to an object, the rule attribute of the object is the same as the sorter of single column sorting, weight indicates the sorting weight, the larger the value, the higher the sorting priority \n Support multi-column default sorting, set defaultOrder for columns that need default sorting \n When the sorter returns a function, use this function to sort data internally. \n Server-side or self-sorting is is handled by the user, do not return results."),component:t(1597).default,rawText:t(1598),parseTsText:t(1599)},{name:"11-pagination",isTs:!0,isTest:!1,title:Object(s.b)("分页 \n 前端分页的情况下, 设置 pagination 显示分页，没有设置 onChange 处理数据的情况下，会自动对数据进行分页 \n pagination 的参数和 Pagination 组件一致","Pagination \n Set the pagination property to show the pagination and if not set onChange property, the data is automatically paged. \n The parameters of pagination are consistent with the Pagination component."),component:t(1600).default,rawText:t(1601),parseTsText:t(1602)},{name:"12-pagination",isTs:!0,isTest:!1,title:Object(s.b)(" \n 后端分页的情况下, 在 pagination 的 onChange 中处理（获取）数据，可以实现服务端分页"," \n Processing (acquiring) data in pagination's onChange realizes the pagination of server-side."),component:t(1603).default,rawText:t(1604),parseTsText:t(1605)},{name:"12-scroll",isTs:!0,isTest:!1,title:Object(s.b)("滚动加载 \n onScroll 事件会返回当前滚动条位置 (float 类型，[0,1])，可以据此实现滚动加载数据","onScroll \n The onScroll event returns the current position(float,[0,1]) of the scroll bar."),component:t(1606).default,rawText:t(1607),parseTsText:t(1608)},{name:"13-merge-cell",isTs:!0,isTest:!1,title:Object(s.b)("合并行/列 \n 设置 column 的 rowSpan 可以合并行，rowSpan 为函数，会传入相邻的两行数据，根据此函数返回结果(bool)判断是否合并行 \n 设置 column 的 colSpan 可以合并列，colSpan 为函数，传入参数为当前行数据，函数返回结果为需要向后合并的列数，不合并返回 1 \n 一个单元格同时指定了rowSpan和colSpan时，如果两行的colSpan计算结果不同，这两行不会合并","rowSpan & colSpan \n - Set column's rowSpan property to merge rows. The rowSpan property is a function that passed in two adjacent rows of data and determine whether to merge or not. \n - Set column's colSpan property to merge columns. The colSpan property is a function that passed in current row of data and the result returned by this function is as the number of columns that need to be merged. \n - When a cell specifies both rowSpan and colSpan, if the colSpan's calculation results of the two rows are different, the two rows will not be merged."),component:t(1609).default,rawText:t(1610),parseTsText:t(1611)},{name:"14-merge-cell",isTs:!0,isTest:!1,title:Object(s.b)(" \n 示例：不带分页的合并行/列"," \n Example: Merged rows/columns without pagination."),component:t(1612).default,rawText:t(1613),parseTsText:t(1614)},{name:"15-select-base",isTs:!0,isTest:!1,title:Object(s.b)("选择行 \n 设置 onRowSelect 属性，会自动添加选择列","Select \n Set the onRowSelect property will automatically add a column with checkbox."),component:t(1615).default,rawText:t(1616),parseTsText:t(1617)},{name:"15-select-format",isTs:!0,isTest:!1,title:Object(s.b)(" \n 使用 format，可以格式化返回的数据"," \n Set format property to format the returned value."),component:t(1618).default,rawText:t(1619),parseTsText:t(1620)},{name:"15-select-radio",isTs:!0,isTest:!1,title:Object(s.b)(" \n 设置 radio 属性实现单选效果"," \n Set the radio attribute to achieve the radio effect"),component:t(1621).default,rawText:t(1622),parseTsText:t(1623)},{name:"15-select-render",isTs:!0,isTest:!1,title:Object(s.b)(" \n 通过 render 自定义渲染","Select \n Custom rendering via render"),component:t(1624).default,rawText:t(1625),parseTsText:t(1626)},{name:"17-select-disabled",isTs:!0,isTest:!1,title:Object(s.b)(" \n 设置 disabled 属性，禁用选项。"," \n Set disabled to disable the selection."),component:t(1627).default,rawText:t(1628),parseTsText:t(1629)},{name:"18-select",isTs:!0,isTest:!1,title:Object(s.b)(" \n 分页中 默认情况下，翻页时会保留当前选中的数据, 如果不需要保留, 则可以分页的时候手动清除"," \n By default, the Datum object retains the currently selected data when the page is changed."),component:t(1630).default,rawText:t(1631),parseTsText:t(1632)},{name:"21-drag-column",isTs:!0,isTest:!1,title:Object(s.b)("可伸缩列 \n 设置 columnResizable，使所有列可伸缩。<br />可在columns中设置某一列 columnResizable: false 来取消伸缩该列。","Fixed head \n Set the columnResizable property to make all columns resizable. set columnResizable: false on columns item to cancel resizable."),component:t(1633).default,rawText:t(1634),parseTsText:t(1635)},{name:"21-expand",isTs:!0,isTest:!1,title:Object(s.b)("可展开 \n 需要展开行时，可以增加一个 type 为 'expand' 的 column，render 函数返回函数时，表示此行可以展开，内容为此函数返回结果","Expand \n Add a column with type 'expand' and the render function returns a function, that means the row can be expanded. The content is the result returned by this function."),component:t(1636).default,rawText:t(1637),parseTsText:t(1638)},{name:"22-expand-control",isTs:!0,isTest:!1,title:Object(s.b)(" \n 受控,当传入一个expandKeys时,展开会变成受控的,需要自行在column里面的onClick去处理"," \n When an expandKeys is provided, the expansion becomes controlled and needs to be processed by the onClick in the column."),component:t(1639).default,rawText:t(1640),parseTsText:t(1641)},{name:"23-scroll-to-index",isTs:!0,isTest:!1,title:Object(s.b)("滚动 \n 固定表头的表格提供了一个 scrollToIndex 方法滚动到指定行，因为非固定行高的原因，滚动到未渲染过的行有一定偏差，请谨慎使用。","scrollToIndex \n The table of the fixed header provides a scrollToIndex method to scroll to the specified line. Because of the row height is not fixed, scrolling to the unrendered line has a little deviation. Please use it with caution."),component:t(1642).default,rawText:t(1643),parseTsText:t(1644)},{name:"24-row-classname",isTs:!0,isTest:!1,title:Object(s.b)("行样式 \n 通过 rowClassName 设置单行样式（使用了 rowClassName 必须给 td 指定背景色）","Row ClassName \n Set the rowClassName property to set row style. (You must specify td background-color when the rowClassName is set)"),component:t(1645).default,rawText:t(1646),parseTsText:t(1647)},{name:"25-row-click-attr",isTs:!0,isTest:!1,title:Object(s.b)("行内元素点击 \n 设置rowClickAttr，可以使行内元素的点击事件触发onRowClick","Base \n Set the rowClickAttr to trigger an onRowClick event for an element."),component:t(1648).default,rawText:t(1649),parseTsText:t(1650)},{name:"26-tree",isTs:!0,isTest:!1,title:Object(s.b)("树形数据 \n 支持树形数据的展示，通过 columns.treeColumnsName 指定子数据字段名，同时在该列自动添加 展开/收起 按钮。\n 通过 columns.treeIndent 指定每一层缩进宽度。\n 备注：当展开列内容过长时，单元格会自动换行。可以通过 width 设定足够的长度来避免。","Tree Data \n Support Tree Data."),component:t(1651).default,rawText:t(1652),parseTsText:t(1653)},{name:"26-tree0",isTs:!0,isTest:!1,title:Object(s.b)(" \n 设置 treeCheckAll, 支持递归选择子数据"," \n Set treeCheckAll to deep check children"),component:t(1654).default,rawText:t(1655),parseTsText:t(1656)},{name:"27-tree",isTs:!0,isTest:!1,title:Object(s.b)(" \n 展开图标在其他列"," \n expeng icon in other column"),component:t(1657).default,rawText:t(1658),parseTsText:t(1659)},{name:"28-tree",isTs:!0,isTest:!1,title:Object(s.b)(" \n 使用 treeExpandKeys 和 onTreeExpand 使展开行受控 \n 设置 changedByExpand 为 true 用来改变滚动条重置的默认行为"," \n Use treeExpandKeys and onTreeExpand to control the expand row. \n Set changedByExpand to true to change the default behavior of scrollbar reset"),component:t(1660).default,rawText:t(1661),parseTsText:t(1662)},{name:"29-sort",isTs:!0,isTest:!1,title:Object(s.b)("排序 (旧) \n 设置 column 的 sorter 属性标示此列需要排序 \n sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序 \n 后端或自行排序用户自行处理，sorter 函数不要返回结果","Sorter (Out of date) \n Set the sorter property of column to indicate that this column can be sorted. \n When the sorter returns a function, use this function to sort data internally. \n Server-side or self-sorting is is handled by the user, do not return results."),component:t(1663).default,rawText:t(1664),parseTsText:t(1665)},{name:"30-raw",isTs:!0,isTest:!1,title:Object(s.b)("只使用样式 \n 使用原生的tr, td来显示表格","Style only \n Use the native tr and td to display the table."),component:t(1666).default,rawText:t(1667),parseTsText:t(1668)},{name:"31-sticky",isTs:!0,isTest:!1,title:Object(s.b)("表头附着 \n 在滚屏场景下，可以设置 sticky 属性使表头附着顶部","Sticky Header \n Use the sticky attribute to sticky the header."),component:t(1669).default,rawText:t(1670),parseTsText:t(1671)},{name:"32-selection",isTs:!0,isTest:!1,title:Object(s.b)("单元格选中 \n 通过 cellSelectable 属性来启用 ctrl/cmd + click 选中单元格","Cell selectable \n whether to enable ctrl/cmd + click check."),component:t(1672).default,rawText:t(1673),parseTsText:t(1674)},{name:"33-row-drag",isTs:!0,isTest:!1,title:Object(s.b)("拖动行 \n 通过 rowEvents 属性来自定义拖拽事件","drag row \n customize drag events through the rowEvents property"),component:t(1675).default,rawText:t(1676),parseTsText:t(1677)},{name:"34-summary-01",isTs:!0,isTest:!1,title:Object(s.b)("底部总结栏 \n 通过 summary 属性来渲染底部信息","footer summary \n Render bottom information through the summary property"),component:t(1678).default,rawText:t(1679),parseTsText:t(1680)},{name:"34-summary-02-fixed",isTs:!0,isTest:!1,title:Object(s.b)(" \n 固定列用法"," \n Fixed column usage"),component:t(1681).default,rawText:t(1682),parseTsText:t(1683)},{name:"test-001-hover",isTs:!0,isTest:!0,title:Object(s.b)("T:hover \n ","T:hover \n "),component:t(1684).default,rawText:t(1685),parseTsText:t(1686)},{name:"test-002-value",isTs:!0,isTest:!0,title:Object(s.b)("T:value \n ","T:value \n "),component:t(1687).default,rawText:t(1688),parseTsText:t(1689)},{name:"test-003-sticky",isTs:!0,isTest:!0,title:Object(s.b)("T:sticky \n fixed: 修复 Table 在配置 Sticky 具体属性后可能导致表头渲染异常的问题 \n https://github.com/sheinsight/shineout/pull/1890","T:sticky \n "),component:t(1690).default,rawText:t(1691),parseTsText:t(1692)}];n.default=Object(i.a)(function(e){return a.a.createElement(o.b,Object.assign({},e,{codes:void 0,source:m,examples:f}))})},1561:function(e,n){e.exports="# Table *表格*\n\n<example />\n\n## API\n\n### Table\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| bordered | boolean | false | 是否显示外边框 |\n| className | string | 无 | 扩展className |\n| columns | object[] | 无 | 数组，见 TableColumn |\n| data | object[] | 无 | 数据 |\n| disabled | (data: object) => boolean \\| boolean | false | 如果 disabled 为 true，禁用全部选项，如果 disabled 为函数，根据函数反回结果禁用选项 |\n| fixed | 'both' \\| 'x' \\| 'y' \\| 'auto' | 无 | 虚拟滚动条方向设置，不设置则使用原生滚动条且关闭懒加载 |\n| format | (data: object) => any \\| string | d => d | 格式化 value<br />默认值，返回原始数据<br />为string时，会作为key从原始数据中获取值，相当于 (d) => d\\[format\\]<br /> 为函数时，以函数返回结果作为 value |\n| loading | boolean \\| ReactNode | false | 数据加载中，为true时会展示一个默认的[Spin](/components/Spin)组件，可以传入一个自定义的Spin代替 |\n| keygen | ((data: object) => any) \\| string | 必填 | 生成每一项key的辅助方法<br />为函数时，使用此函数返回值<br />为string时，使用这个string对应的数据值。如 'id'，相当于 (d => d.id) |\n| onScroll | (x: number, y: number) => void | 无 | 滚动条滚动后回调函数；<br />x: 横向滚动比(0 <= x <= 1)<br />y: 纵向滚动比(0 <= y <= 1) |\n| onRowClick | (data: object, index: number) => void | 无 | 行点击事件; <br />data: 当前行数据<br />index: 当前行索引 |\n| onRowSelect | (rows: any[]) => void | 无 | 选择行。rows为选中的数据。如果需要数据需要格式化的处理，建议配置 format 和 prediction |\n| prediction | (v: any, data: object) => boolean | (val, d) => val===format(d) | 默认使用 format 函数执行的结果来比较是否匹配，在某些情况下（例如返回原始数据的对象，更新数据时，生成了一个值相同，非同一个对象的选项），需要借助 prediction 函数来判断是否匹配 |\n| rowClassName | (record: object, index: number) => (string \\| undefined) | 无 | 指定单行className |\n| rowHeight | number | 40 | 单行表格的预期高度，只是一个大概的估值，用来展示滚动条 |\n| rowsInView | number | 20 | 单次render的最大行数。Table 采用了lazy render的方式来优化在大量数据下的性能，如果你的表格显示的高度超出了20条，可以调整rowsInView的值。为 0 表示单次 render 所有数据。 |\n| showSelectAll | boolean | true | 是否显示全选 |\n| striped | boolean | false | 是否显示交错斑马底纹 |\n| style | object | 无 | 扩展样式 |\n| value | any[] | 无 | 当前选中值，格式和 onRowSelect 返回值一致 |\n| empty | string \\| ReactNode | 无数据 | 空数据文案 |\n| verticalAlign | 'top' \\| 'middle' | 'top' | 单元格内容垂直对齐方式 |\n| rowClickAttr | true \\| string \\| string[] | \\['*'\\] | 设置行内元素的attribut来按需触发onRowClick, '*'表示接受行点击触发 |\n| sorter | (sortKey: any, sorter: 'asc' \\| 'desc', sortedList: object[]) => (a: object, b: object) => number | alphaSort(Column.sorter, sorter) | 表格统一排序函数，参数分别为 Column.sorter 和 排序方式;<br />支持多列排序，sorter传入对象{ rule: string \\| function, weight: number }, rule为排序规则，为字符串时参考单列排序的用法, weight为权重，指明排序的优先级. <br />多列排序时，sortedList返回所有参与排序的字段信息|\n| treeExpandKeys | any[] | 无  | 树形数据展开行，受控 |\n| hover | boolean | true | \b数据行鼠标悬浮高亮效果 |\n| onTreeExpand | (openKeys: (string\\|number)[], data: object, expand: boolean) => void | 无 |  当设置 treeExpandKeys 后，展开行时会触发该回调，keys为展开的行 |\n| treeEmptyExpand | boolean | false | 树形表格子数据为空时依然展示展开按钮 |\n| treeCheckAll | boolean | false | 全选时是否将子孙数据选中 |\n| onSortCancel | () => void | 无 | 排序取消事件 |\n| radio | boolean | false | 是否单选 |\n| rowEvents | object | 无 | tr 事件监听器集合 |\n| defaultTreeExpandKeys | any[] | 无 | 默认展开行(非受控) |\n| dataChangeResize | boolean | false | 数据发生变化后是否重新计算列宽 |\n| onColumnResize | (newColumns: object[]) => void | 无 | 列宽伸缩后的回调 |\n| size | 'small' \\| 'default' | 'default' | 表格尺寸 |\n| pagination | object | 无 | 分页数据 |\n| innerScrollAttr | string[] | 无 | 虚拟滚动模式下，设置行内元素的 attribut 来实现内部滚动 |\n| expandKeys | any[] | 无 | 展开行受控 |\n| sticky | boolean \\| object | 无 | 表头是否附着顶部，为 true 时距离顶部为0，为对象时属性值参考 [Sticky组件](/components/Sticky) |\n| cellSelectable | boolean | false | 是否启用 ctrl/cmd + click 选中单元格 |\n| height | number \\| string | 无 | 表格高度，与 style.height 作用相同 |\n| hideHeader | boolean | false | 是否隐藏表头 |\n| changedByExpand | boolean | false | 在特定场景（树形数据展开受控)下开启 用来改变滚动条重置的默认行为 |\n| renderSorter | (params: {status?: 'asc' \\| 'desc', triggerAsc: () => void, triggerDesc: ()=> void})=> ReactNode | false | 自定义排序图标 |\n| width | number | 无 | 表格总宽度 |\n| summary | { render: ()=> ReactNode, colSpan?: number, rowSpan?: number }\\[]\\[] | 无 | 渲染底部信息 |\n\n### TableColumn\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| className | string | 无 | 列对应的类名 |\n| colSpan | function(row) | 无 | 合并列控制函数，row为单行数据，返回值一个整数，标明需要合并的列数 |\n| fixed | string | 无 | 可选\\['left', 'right']；<br />需要设置Table的fixed为'x'或'both'才生效；<br />如果相邻的多列需要锁定，只需指定最外侧的column即可 |\n| group | string \\| string\\[] | 无 | 表头分组，相邻的相同 group 会生成一个新的表头 |\n| key | string \\| number | 无 | 列的key，默认使用index |\n| render | string \\| function(d,i) | 必填 | 表格内容生成函数；<br />d: 当前行数据<br />i: 当前行索引<br />为了使用方便，可以传入一个数据的key，如 'id'，相当于 (d) => { return d.id } |\n| rowSpan | ((a, b) => boolean) \\| boolean | 无 | 根据函数返回的结果（boolean）判断是否合并行，a、b为相邻的两行数据。 |\n| sorter | function(order) \\| string | 无 | sorter 不为空时，这一列会出现排序 icon。order的值为\\['asc', 'desc']<br />字符串表示排序依据字段，作为第一个参数传入Table.sorter<br />前端排序，返回一个排序函数，参考 Array.sort。<br />服务端排序，不要返回值，自行处理即可。 |\n| title | string \\| ReactElement \\| function | 无 | 表头显示内容 |\n| type | string | 无 | 特殊用途列，可选值为 \\['expand', 'row-expand', 'checkbox']<br />expand: 行展开列，render 函数返回函数时，表示此行可以展开，内容为此函数返回结果<br />row-expand: 同expand。不同为点击行内空白区域也可以折叠/展开行。<br />checkbox: 选择列，用于仅固定选择列的场景 |\n| width | number | 无 | 列宽 |\n| align | string | 'left' | 单元格内容排布方式，可选 \\['left', 'center', 'right'\\]\n| treeColumnsName | string | 无 | 树形表格子数据字段名 |\n| treeIndent | number | 25 | 每一层缩进宽度 |\n| minWidth | number | 无 | 最小列宽 |\n| maxWidth | number | 无 | 最大可拖动列宽 |\n| hide | boolean | false | 只针对行展开列有效，表示是否隐藏该列 |\n| defaultOrder | string | 'asc' \\| 'desc' | 默认排序规则 |\n| filterAll | ( data: array) => array  | 无 | 点击全选后数据过滤，type = \"checkbox\" 生效 |\n"},1562:function(e,n){e.exports="# Table\n\n<example />\n\n## API\n\n### Table\n\n| Property | Type | Default | Description |\n| --- | --- | -- | --- |\n| bordered | boolean | false | Whether to display the border |\n| className | string | - | extend className |\n| columns | object[] | - | array，见 TableColumn |\n| data | object[] | - | data |\n| disabled | (data: object) => boolean \\| boolean | false | When the value is true, disabled all checkboxes; When the value is function, disable the checkbox that this function returns true. |\n| fixed | 'both' \\| 'x' \\| 'y' \\| 'auto' | - | visual scroll-bar direction, empty will use native scroll-bar and disabled lazy load |\n| format | (data: object) => any \\| string | d => d | Format value<br />The defaule value is return the original data.<br />When it is a string, the value is fetched from the original data as a key equivalent to (d) => d\\[format]<br />When it is a function, use its return value. |\n| loading | boolean \\| ReactNode | false | When it is true, a default [Spin](/components/Spin) component will be displayed, a custom loading icon can be passed in to replace. |\n| keygen | ((data: object) => any) \\| string \\| boolean | index | Generate a auxiliary method for each key<br />If not filled, index will be used (not recommended, in some cases there may be problems)<br />When it is a function, use its return value. <br />When it is a string，ues the value of the string.For example, 'id' is the same thing as (d) => d.id . |\n| onScroll | (x: number, y: number) => void | none | The callback function after scrolling.<br />x: Horizontal rolling ratio(0 <= x <= 1)<br />y: Vertical scroll ratio(0 <= y <= 1) |\n| onRowClick | (data: object, index: number) => void | none | Callback when row click.<br />data: current row data<br />index: current row index |\n| onRowSelect | (rows: any[]) => void | none | Select row. Rows is the selected data. |\n| prediction | (v: any, data: object) => boolean | (val, d) => val===format(d) | By default, the result of the format function is used to compare whether it matches. In some cases (for example, whe an object that returns the original data is updated, an different option with the same value  is generated), the prediction function needs to be used to determine whether match |\n| rowClassName | (record: object, index: number) => (string \\| undefined) | - | Specify row className |\n| rowHeight | number | 40 | The expected height of a one-line table is just a rough estimate to show the scroll bar. |\n| rowsInView | number | 20 | The maximum number of rows for a single render. Table uses lazy render to optimize performance under large amounts of data. If your table displays more than 20 rows, you can change the value of rowsInView. Value of 0 render all data.|\n| showSelectAll | boolean | true | Whether to show being fully selected. |\n| striped | boolean | false | Whether to display zebra shading. |\n| style | object | - | Container element style |\n| value | any[] | none | The current selected value. |\n| empty | string \\| ReactNode | Data not found | empty text |\n| verticalAlign | 'top' \\| 'middle' | 'top' | vertical align with content |\n| rowClickAttr | true \\| string \\| string[] | \\['*'\\] | Sets the attribute of inner element to trigger onRowClick as needed, and '*' to accept the row click |\n| sorter | (sortKey: any, sorter: 'asc' \\| 'desc', sortedList: any[]) => (a: object, b: object) => number | alphaSort(Column.sorter, sorter) | the method of table sort，args are Column.sorter and order<br /> Multi-column sorting is supported. The sorter passes in the object {rule: string \\| function, weight: number}, where rule is a sorting rule, which refers to the use of single-column sorting when it is a string, weight is the weight, indicating the priority of the order<br /> When sorting on multiple columns, sortedList returns information about all fields involved in sorting|\n| treeExpandKeys | any[] | none | Tree Table expanded row keys |\n| onTreeExpand | (openKeys: (string\\|number)[], data: object, expand: boolean) => void | none | When treeExpandKeys is set, the callback is triggered when the row is expanded. Keys is expanded row keys |\n| hover | boolean | true | row hover highlight |\n| treeEmptyExpand | boolean | false | show expand button while children data is empty |\n| treeCheckAll | boolean | false | check children data while select all |\n| onSortCancel | () => void | none | sort cancel event |\n| radio | boolean | false | is Radio |\n| rowEvents | object | none | tr events |\n| defaultTreeExpandKeys | any[] | none | Default expanded row keys |\n| dataChangeResize | boolean | false | Whether to recalculate the column width after the data changes |\n| onColumnResize | (newColumns: object[]) => void | none | columns resize callback |\n| size | 'small' \\| 'default' | 'default' | size of table |\n| pagination | object | none | pagination of table |\n| innerScrollAttr | string[] | 无 | set inner scrollable element's attribute |\n| expandKeys | any[] | none | controlled expand rows |\n| sticky | boolean \\| object | none | sticky header, When it is true, the distance from the top is 0. When it is an object, the attribute value reference [Sticky component] (/components/Sticky)  |\n| cellSelectable | boolean | false | whether to enable ctrl/cmd + click check |\n| height | number \\| string | none | height of table, same with style.height |\n| hideHeader | boolean | false | whether hide thead |\n| changedByExpand | boolean | false | Enable in specific scenarios (tree data expansion is controlled) Used to change the default behavior of scroll reset |\n| renderSorter | (params: {status?: 'asc' \\| 'desc', triggerAsc: () => void, triggerDesc: ()=> void})=> ReactNode | false | customize sort icons |\n| width | number | - | Total table width |\n| summary | {render: ()=> ReactNode, colSpan?: number, rowSpan?: number }\\[]\\[] | - | render footer |\n\n\n### TableColumn\n\n| Property | Type | Default | Description |\n| --- | --- | --- | --- |\n| className | string | none | classname of column |\n| colSpan | function(record) | none | The function for controlling to merge columns. The return value is an integer indicating the number of columns that need to be merged。 |\n| fixed | string | - | options: \\['left', 'right']；<br />Need to set the Table's fixed to 'x' or 'both'; |\n| group | string \\| string\\[] | - | The group of header column. |\n| key | string \\| number | none | The key of the column |\n| render | string \\| function(d,i) | required | The generation function for Table content.<br />d: the data of the current row<br />i: the index of the current row <br />For ease of use, you can pass in the key of a data, such as 'id', which is equivalent to (d) => { return d.id } |\n| rowSpan | ((a, b) => boolean) \\| boolean | none | When it is a function, it is judged whether the rows are merged according to the result (boolean) returned by the function, and a and b are two adjacent rows of data. |\n| sorter | function(order) \\| string | none | When the sorter is not empty, the sort icon appears in this column. the value of order: \\['asc', 'desc']<br />Indicate the sort key string, will pass to table sorter method.<br />Front-end sorting returns a sort function, refer to Array.sort.<br />Server-side sorting, do not return values and handle it itself. |\n| title | string \\| ReactElement \\| function(data) | none | The content of the header |\n| type | string | - | Special column, options: \\['expand', 'row-expand', 'checkbox']<br />expand: Expand the column. When the render function returns a function, it means that the row can be expanded and the content  is the result returned by this function. <br />row-expand: Similar to expand. The difference is that clicking on the entire row triggers the expand event.<br />checkbox: Select column for scenes with only fixed selection columns |\n| width | number | - | the width of the column |\n| align | string | 'left' | cell align \\['left', 'center', 'right'\\] |\n| treeColumnsName | string | none | tree table children-data name |\n| treeIndent | number | 25 | indent of each level |\n| minWidth | number | - | the minimum width of the column |\n| maxWidth | number | - | Maximum draggable column width |\n| hide | boolean | false | hide the column, only work on row-expand column |\n| dataChangeResize | boolean | false | Recalculate columns width while data change |\n| defaultOrder | string | 'asc' \\| 'desc' | default sort |\n| filterAll | ( data: array) => array  | - | After clicking select all, data filtering, type = \"checkbox\" |\n"},1563:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=[{id:1,firstName:"Ephraim",lastName:"Wisozk",position:"Marketing Designer",start:"2012-01-29",time:"01:42",salary:115777,country:"Reunion",office:"Miami",office5:"Istanbul",height:113.74},{id:2,firstName:"Osvaldo",lastName:"Beer",position:"Financial Controller",start:"2007-09-04",time:"03:26",salary:396093,country:"Syrian Arab Republic",office:"San Paulo",office5:"Shenzhen",height:82.13},{id:3,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",start:"2009-10-16",time:"01:45",salary:236064,country:"Peru",office:"Boston",office5:"Delhi",height:179.53},{id:4,firstName:"Shaniya",lastName:"Jacobs",position:"Developer",start:"2014-06-30",time:"02:17",salary:338985,country:"Peru",office:"Chengdu",office5:"Dallas-Fort Worth",height:190.11}],s=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];n.default=function(){return a.a.createElement(i.a,{keygen:"id",width:1500,columns:s,data:o})}},1565:function(e,n){e.exports="/**\n * cn - 基本用法\n *    -- 基础的表格用法。推荐 columns 写为常量，以提升性能。\n * en - Base\n *    -- Basic table usage.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n]\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst App: React.FC = () => <Table keygen=\"id\" width={1500} columns={columns} data={data} />\n\nexport default App\n"},1566:function(e,n){e.exports="/**\n * cn - 基本用法\n *    -- 基础的表格用法。推荐 columns 写为常量，以提升性能。\n * en - Base\n *    -- Basic table usage.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nconst data = [\n    {\n        id: 1,\n        firstName: 'Ephraim',\n        lastName: 'Wisozk',\n        position: 'Marketing Designer',\n        start: '2012-01-29',\n        time: '01:42',\n        salary: 115777,\n        country: 'Reunion',\n        office: 'Miami',\n        office5: 'Istanbul',\n        height: 113.74,\n    },\n    {\n        id: 2,\n        firstName: 'Osvaldo',\n        lastName: 'Beer',\n        position: 'Financial Controller',\n        start: '2007-09-04',\n        time: '03:26',\n        salary: 396093,\n        country: 'Syrian Arab Republic',\n        office: 'San Paulo',\n        office5: 'Shenzhen',\n        height: 82.13,\n    },\n    {\n        id: 3,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        start: '2009-10-16',\n        time: '01:45',\n        salary: 236064,\n        country: 'Peru',\n        office: 'Boston',\n        office5: 'Delhi',\n        height: 179.53,\n    },\n    {\n        id: 4,\n        firstName: 'Shaniya',\n        lastName: 'Jacobs',\n        position: 'Developer',\n        start: '2014-06-30',\n        time: '02:17',\n        salary: 338985,\n        country: 'Peru',\n        office: 'Chengdu',\n        office5: 'Dallas-Fort Worth',\n        height: 190.11,\n    },\n];\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst App = () => <Table keygen=\"id\" width={1500} columns={columns} data={data}/>;\nexport default App;\n"},1567:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(4),l=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},align:"right"},{title:"Country",render:"country"},{title:"Position",render:"position",align:"right"},{title:"Office",render:"office"}];n.default=function(){return a.a.createElement(i.a,{keygen:"id",striped:!0,bordered:!0,columns:l,data:s})}},1568:function(e,n){e.exports="/**\n * cn - 边框和底纹\n *    -- 通过 striped 显示交错底纹；通过 bordered 显示边框。\n * en - Style\n *    -- Set striped to add zebra-striping; Set bordered to add borders.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(4)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, align: 'right' },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position', align: 'right' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => <Table keygen=\"id\" striped bordered columns={columns} data={data} />\n\nexport default App\n"},1569:function(e,n){e.exports="/**\n * cn - 边框和底纹\n *    -- 通过 striped 显示交错底纹；通过 bordered 显示边框。\n * en - Style\n *    -- Set striped to add zebra-striping; Set bordered to add borders.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(4);\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, align: 'right' },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position', align: 'right' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => <Table keygen=\"id\" striped bordered columns={columns} data={data}/>;\nexport default App;\n"},1570:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(4),l=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"}];n.default=function(){return a.a.createElement(i.a,{keygen:"id",size:"small",columns:l,data:s})}},1571:function(e,n){e.exports="/**\n * cn - 紧凑表格\n *    -- 设置 size 为 small 显示紧凑表格\n * en - Small table\n *    -- Set size to small to display the compact form.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(4)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => <Table keygen=\"id\" size=\"small\" columns={columns} data={data} />\n\nexport default App\n"},1572:function(e,n){e.exports="/**\n * cn - 紧凑表格\n *    -- 设置 size 为 small 显示紧凑表格\n * en - Small table\n *    -- Set size to small to display the compact form.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(4);\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => <Table keygen=\"id\" size=\"small\" columns={columns} data={data}/>;\nexport default App;\n"},1573:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(4),l=a.a.createElement("span",{style:{background:"#ccc",display:"block",lineHeight:"40px",color:"#fff"}},"Name"),d=a.a.createElement("span",null,"Other"),c=[{title:"id",render:"id",width:50},{title:"First Name",render:"firstName",group:[l,"True Name"]},{title:"Last Name",render:"lastName",group:[l,"True Name"]},{title:"Nick Name",render:function(){return"nickname"},group:l},{title:"Country",render:"country"},{title:"Office",render:"office",group:d},{title:"Position",render:"position",group:d}];n.default=function(){return a.a.createElement(i.a,{bordered:!0,keygen:"id",columns:c,data:s})}},1574:function(e,n){e.exports="/**\n * cn - 表头分组\n *    -- Table 会自动合并相邻相同 group 的表头\n * en - Column group\n *    -- Table automatically merges headers with adjacent and identical groups.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(4)\n\nconst name = <span style={{ background: '#ccc', display: 'block', lineHeight: '40px', color: '#fff' }}>Name</span>\n\nconst other = <span>Other</span>\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'First Name', render: 'firstName', group: [name, 'True Name'] },\n  { title: 'Last Name', render: 'lastName', group: [name, 'True Name'] },\n  { title: 'Nick Name', render: () => 'nickname', group: name },\n  { title: 'Country', render: 'country' },\n  { title: 'Office', render: 'office', group: other },\n  { title: 'Position', render: 'position', group: other },\n]\n\nconst App: React.FC = () => <Table bordered keygen=\"id\" columns={columns} data={data} />\n\nexport default App\n"},1575:function(e,n){e.exports="/**\n * cn - 表头分组\n *    -- Table 会自动合并相邻相同 group 的表头\n * en - Column group\n *    -- Table automatically merges headers with adjacent and identical groups.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(4);\nconst name = <span style={{ background: '#ccc', display: 'block', lineHeight: '40px', color: '#fff' }}>Name</span>;\nconst other = <span>Other</span>;\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'First Name', render: 'firstName', group: [name, 'True Name'] },\n    { title: 'Last Name', render: 'lastName', group: [name, 'True Name'] },\n    { title: 'Nick Name', render: () => 'nickname', group: name },\n    { title: 'Country', render: 'country' },\n    { title: 'Office', render: 'office', group: other },\n    { title: 'Position', render: 'position', group: other },\n];\nconst App = () => <Table bordered keygen=\"id\" columns={columns} data={data}/>;\nexport default App;\n"},1576:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(20),l=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];n.default=function(){return a.a.createElement("div",null,a.a.createElement(function(){return a.a.createElement("div",{style:{height:300,marginBottom:40}},a.a.createElement(i.a,{rowsInView:0,fixed:"auto",keygen:"id",width:1500,columns:l,bordered:!0,data:s}))},null),a.a.createElement(function(){return a.a.createElement("div",{style:{display:"flex",flexDirection:"column",height:500}},a.a.createElement("div",{style:{textAlign:"center",height:40,lineHeight:"40px",background:"#eee"}},"Flex-Header"),a.a.createElement(i.a,{style:{flex:1,overflow:"hidden"},fixed:"y",data:s,keygen:"id",columns:l.slice(0,4)}))},null))}},1577:function(e,n){e.exports="/**\n * cn - 固定表头\n *    -- 设置 fixed 属性为 'both' 或 'y'，可以固定表头，表格高度默认填充父元素\n *    -- 设置 fixed 属性为 'auto'，可以自动展示滚动条\n *    -- 注:横向滚动需要指定 Table 的 width 属性, 不建议给所有的 column 设置宽度, 如果出现表头对不齐的问题, 请尝试至少留一列不设宽度以适应弹性布局，或者检查表格内容是否有超长不换行元素破坏布局.\n * en - Fixed head\n *    -- Set the fixed property to 'both' or 'y' can fix the table header. The table height defaults to full the parent element.\n *    -- Set the fixed property to 'auto' can auto show scrollbar.\n *    -- Note: Horizontal scrolling requires the width property of Table, it is not recommended to set the width for all columns, if there is a problem with tablehead pairs, try leaving at least one column without a width to fit the elastic layout, or check the table contentford for excessively long unwrapped elements to break the layout.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(20)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst App: React.FC = () => {\n  const Normal = () => (\n    <div style={{ height: 300, marginBottom: 40 }}>\n      <Table rowsInView={0} fixed=\"auto\" keygen=\"id\" width={1500} columns={columns} bordered data={data} />\n    </div>\n  )\n\n  const Flex = () => (\n    <div style={{ display: 'flex', flexDirection: 'column', height: 500 }}>\n      <div style={{ textAlign: 'center', height: 40, lineHeight: '40px', background: '#eee' }}>Flex-Header</div>\n      <Table style={{ flex: 1, overflow: 'hidden' }} fixed=\"y\" data={data} keygen=\"id\" columns={columns.slice(0, 4)} />\n    </div>\n  )\n\n  return (\n    <div>\n      <Normal />\n      <Flex />\n    </div>\n  )\n}\nexport default App\n"},1578:function(e,n){e.exports="/**\n * cn - 固定表头\n *    -- 设置 fixed 属性为 'both' 或 'y'，可以固定表头，表格高度默认填充父元素\n *    -- 设置 fixed 属性为 'auto'，可以自动展示滚动条\n *    -- 注:横向滚动需要指定 Table 的 width 属性, 不建议给所有的 column 设置宽度, 如果出现表头对不齐的问题, 请尝试至少留一列不设宽度以适应弹性布局，或者检查表格内容是否有超长不换行元素破坏布局.\n * en - Fixed head\n *    -- Set the fixed property to 'both' or 'y' can fix the table header. The table height defaults to full the parent element.\n *    -- Set the fixed property to 'auto' can auto show scrollbar.\n *    -- Note: Horizontal scrolling requires the width property of Table, it is not recommended to set the width for all columns, if there is a problem with tablehead pairs, try leaving at least one column without a width to fit the elastic layout, or check the table contentford for excessively long unwrapped elements to break the layout.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(20);\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst App = () => {\n    const Normal = () => (<div style={{ height: 300, marginBottom: 40 }}>\n      <Table rowsInView={0} fixed=\"auto\" keygen=\"id\" width={1500} columns={columns} bordered data={data}/>\n    </div>);\n    const Flex = () => (<div style={{ display: 'flex', flexDirection: 'column', height: 500 }}>\n      <div style={{ textAlign: 'center', height: 40, lineHeight: '40px', background: '#eee' }}>Flex-Header</div>\n      <Table style={{ flex: 1, overflow: 'hidden' }} fixed=\"y\" data={data} keygen=\"id\" columns={columns.slice(0, 4)}/>\n    </div>);\n    return (<div>\n      <Normal />\n      <Flex />\n    </div>);\n};\nexport default App;\n"},1579:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(20),l=[{title:"id",render:"id",width:50},{title:"First Name",group:"Name",render:"firstName",width:120},{title:"Last Name",fixed:"left",group:"Name",render:"lastName",width:120},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",fixed:"right",width:100,render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];n.default=function(){return a.a.createElement(i.a,{bordered:!0,fixed:"both",keygen:"id",width:1500,style:{height:300},columns:l,data:s})}},1580:function(e,n){e.exports="/**\n * cn - 固定列\n *    -- 设置 column 的 fixed 属性，可以固定列。只在设置了表格的 width 属性，并且 width 大于外部容器情况下才会生效\n * en - Fixed column\n *    -- Set the fixed property of the column can fix the column; Only take effect if the table's width property is set and width is greater than the external container.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(20)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  {\n    title: 'First Name',\n    group: 'Name',\n    render: 'firstName',\n    width: 120,\n  },\n  {\n    title: 'Last Name',\n    fixed: 'left',\n    group: 'Name',\n    render: 'lastName',\n    width: 120,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    fixed: 'right',\n    width: 100,\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst App: React.FC = () => (\n  <Table bordered fixed=\"both\" keygen=\"id\" width={1500} style={{ height: 300 }} columns={columns} data={data} />\n)\n\nexport default App\n"},1581:function(e,n){e.exports="/**\n * cn - 固定列\n *    -- 设置 column 的 fixed 属性，可以固定列。只在设置了表格的 width 属性，并且 width 大于外部容器情况下才会生效\n * en - Fixed column\n *    -- Set the fixed property of the column can fix the column; Only take effect if the table's width property is set and width is greater than the external container.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(20);\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    {\n        title: 'First Name',\n        group: 'Name',\n        render: 'firstName',\n        width: 120,\n    },\n    {\n        title: 'Last Name',\n        fixed: 'left',\n        group: 'Name',\n        render: 'lastName',\n        width: 120,\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        fixed: 'right',\n        width: 100,\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst App = () => (<Table bordered fixed=\"both\" keygen=\"id\" width={1500} style={{ height: 300 }} columns={columns} data={data}/>);\nexport default App;\n"},1582:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(6),l=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Date",render:"start",fixed:"right",group:"Start Time",width:120},{title:"Time",render:"time",group:"Start Time",width:80}];n.default=function(){return a.a.createElement(i.a,{fixed:"x",keygen:"id",width:1500,columns:l,data:s})}},1583:function(e,n){e.exports="/**\n * cn -\n *    -- 示例：只固定右侧列\n * en -\n *    -- Example: Only fix the right column.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(6)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  {\n    title: 'Date',\n    render: 'start',\n    fixed: 'right',\n    group: 'Start Time',\n    width: 120,\n  },\n  {\n    title: 'Time',\n    render: 'time',\n    group: 'Start Time',\n    width: 80,\n  },\n]\n\nconst App: React.FC = () => <Table fixed=\"x\" keygen=\"id\" width={1500} columns={columns} data={data} />\n\nexport default App\n"},1584:function(e,n){e.exports="/**\n * cn -\n *    -- 示例：只固定右侧列\n * en -\n *    -- Example: Only fix the right column.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(6);\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    {\n        title: 'Date',\n        render: 'start',\n        fixed: 'right',\n        group: 'Start Time',\n        width: 120,\n    },\n    {\n        title: 'Time',\n        render: 'time',\n        group: 'Start Time',\n        width: 80,\n    },\n];\nconst App = () => <Table fixed=\"x\" keygen=\"id\" width={1500} columns={columns} data={data}/>;\nexport default App;\n"},1585:function(e,n,t){"use strict";t.r(n);for(var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(1e4),l=[{title:"id",render:"id",width:80},{title:"Name",fixed:"left",render:function(e){return a.a.createElement("div",{style:{height:e.height}},"".concat(e.firstName," ").concat(e.lastName))},width:160},{title:"Country",render:"country",width:200},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start",width:140}],d=0;d<50;d++)l.push({title:"".concat(d+1),render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}});n.default=function(){return a.a.createElement(i.a,{fixed:"both",keygen:"id",width:6400,style:{height:600},columns:l,data:s,rowsInView:10})}},1586:function(e,n){e.exports="/**\n * cn - 性能\n *    -- Table内部对大量数据的渲染做了lazy render的优化。这个例子加载了10000条，55列数据。可以通过设置rowsInView调整单次最多render的行数，默认为20\n * en - Performance\n *    -- The rendering of large amounts of data in the Table has been optimized by lazy render. This example loads 10000 pieces and 55 columns of data.\n *    -- You can set rowsInView property to change the number of rows in rendering. The default value is 20.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(10000)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 80 },\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: d => <div style={{ height: d.height }}>{`${d.firstName} ${d.lastName}`}</div>,\n    width: 160,\n  },\n  { title: 'Country', render: 'country', width: 200 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start', width: 140 },\n]\n\nfor (let i = 0; i < 50; i++) {\n  columns.push({\n    title: `${i + 1}`,\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  })\n}\n\nconst App: React.FC = () => (\n  <Table fixed=\"both\" keygen=\"id\" width={6400} style={{ height: 600 }} columns={columns} data={data} rowsInView={10} />\n)\n\nexport default App\n"},1587:function(e,n){e.exports="/**\n * cn - 性能\n *    -- Table内部对大量数据的渲染做了lazy render的优化。这个例子加载了10000条，55列数据。可以通过设置rowsInView调整单次最多render的行数，默认为20\n * en - Performance\n *    -- The rendering of large amounts of data in the Table has been optimized by lazy render. This example loads 10000 pieces and 55 columns of data.\n *    -- You can set rowsInView property to change the number of rows in rendering. The default value is 20.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(10000);\nconst columns = [\n    { title: 'id', render: 'id', width: 80 },\n    {\n        title: 'Name',\n        fixed: 'left',\n        render: d => <div style={{ height: d.height }}>{`${d.firstName} ${d.lastName}`}</div>,\n        width: 160,\n    },\n    { title: 'Country', render: 'country', width: 200 },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start', width: 140 },\n];\nfor (let i = 0; i < 50; i++) {\n    columns.push({\n        title: `${i + 1}`,\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    });\n}\nconst App = () => (<Table fixed=\"both\" keygen=\"id\" width={6400} style={{ height: 600 }} columns={columns} data={data} rowsInView={10}/>);\nexport default App;\n"},1588:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(51),o=t(316),s=t(565),l=Object(s.b)(8),d=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"}];n.default=function(){var e=a.a.createElement(i.a,{color:"#1890ff",name:"ring"});return a.a.createElement(o.a,{keygen:"id",loading:e,columns:d,data:l})}},1589:function(e,n){e.exports="/**\n * cn - 加载中\n *    -- 设置 loading 属性可以将表格状态设置为加载中\n * en - Loading\n *    -- Set the loading property can set the table state to loading.\n */\nimport React from 'react'\nimport { Table, Spin, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(8)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => {\n  const loading = <Spin color=\"#1890ff\" name=\"ring\" />\n  return <Table keygen=\"id\" loading={loading} columns={columns} data={data} />\n}\n\nexport default App\n"},1590:function(e,n){e.exports="/**\n * cn - 加载中\n *    -- 设置 loading 属性可以将表格状态设置为加载中\n * en - Loading\n *    -- Set the loading property can set the table state to loading.\n */\nimport React from 'react';\nimport { Table, Spin } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(8);\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => {\n    const loading = <Spin color=\"#1890ff\" name=\"ring\"/>;\n    return <Table keygen=\"id\" loading={loading} columns={columns} data={data}/>;\n};\nexport default App;\n"},1591:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(1e3),l=[{width:80,title:"id",render:"id",sorter:"id"},{title:"Name",fixed:"left",width:160,sorter:"firstName",defaultOrder:"asc",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"}];n.default=function(){var t={id:function(t){return function(e,n){return"asc"===t?e.id-n.id:n.id-e.id}},firstName:function(t){return function(e,n){return"asc"===t?e.firstName.localeCompare(n.firstName):n.firstName.localeCompare(e.firstName)}}};return a.a.createElement(i.a,{striped:!0,data:s,keygen:"id",fixed:"both",width:1200,rowsInView:10,columns:l,sorter:function(e,n){return t[e](n)},style:{maxHeight:400},onSortCancel:function(e,n){console.log("sort cancel : ",e,n)}})}},1592:function(e,n){e.exports="/**\n * cn - 排序\n *    -- 设置 Table 的 sorter 属性统一指定排序函数\n *    -- 设置 column 的 sorter 标示此列需要排序并指定依据字段，会作为第一个参数传入排序函数\n *    -- defaultOrder 指定该列默认排序规则\n *    -- sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序\n *    -- 后端或自行排序用户自行处理，sorter 函数不要返回结果\n * en - Sorter\n *    -- Set the sorter property of Table to indicate the method of table sort.\n *    -- Set the sorter property of Column to indicate the sort key string, will pass to table sorter method\n *    -- Set defaultOrder mark defualt order\n *    -- When the sorter returns a function, use this function to sort data internally.\n *    -- Server-side or self-sorting is is handled by the user, do not return results.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData>\ntype TableSorter = TableProps['sorter']\ntype TableColumnOrder = TYPE.Table.ColumnOrder\ntype TableOnSortCancel = TableProps['onSortCancel']\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(1000)\n\nconst columns: TableColumnItem[] = [\n  {\n    width: 80,\n    title: 'id',\n    render: 'id',\n    sorter: 'id',\n  },\n  {\n    title: 'Name',\n    fixed: 'left',\n    width: 160,\n    sorter: 'firstName',\n    defaultOrder: 'asc',\n    render: d => `${d.firstName} ${d.lastName}`,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n]\n\nconst App: React.FC = () => {\n  const sorter: {\n    [x: string]: Function\n  } = {\n    id: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n      order === 'asc' ? a.id - b.id : b.id - a.id,\n    firstName: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n      order === 'asc' ? a.firstName.localeCompare(b.firstName) : b.firstName.localeCompare(a.firstName),\n  }\n\n  const handleSorter: TableSorter = (name, order) => sorter[name](order)\n\n  const handleCancel: TableOnSortCancel = (prevType, index) => {\n    console.log('sort cancel : ', prevType, index)\n  }\n\n  return (\n    <Table\n      striped\n      data={data}\n      keygen=\"id\"\n      fixed=\"both\"\n      width={1200}\n      rowsInView={10}\n      columns={columns}\n      sorter={handleSorter}\n      style={{ maxHeight: 400 }}\n      onSortCancel={handleCancel}\n    />\n  )\n}\n\nexport default App\n"},1593:function(e,n){e.exports="/**\n * cn - 排序\n *    -- 设置 Table 的 sorter 属性统一指定排序函数\n *    -- 设置 column 的 sorter 标示此列需要排序并指定依据字段，会作为第一个参数传入排序函数\n *    -- defaultOrder 指定该列默认排序规则\n *    -- sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序\n *    -- 后端或自行排序用户自行处理，sorter 函数不要返回结果\n * en - Sorter\n *    -- Set the sorter property of Table to indicate the method of table sort.\n *    -- Set the sorter property of Column to indicate the sort key string, will pass to table sorter method\n *    -- Set defaultOrder mark defualt order\n *    -- When the sorter returns a function, use this function to sort data internally.\n *    -- Server-side or self-sorting is is handled by the user, do not return results.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(1000);\nconst columns = [\n    {\n        width: 80,\n        title: 'id',\n        render: 'id',\n        sorter: 'id',\n    },\n    {\n        title: 'Name',\n        fixed: 'left',\n        width: 160,\n        sorter: 'firstName',\n        defaultOrder: 'asc',\n        render: d => `${d.firstName} ${d.lastName}`,\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n];\nconst App = () => {\n    const sorter = {\n        id: (order) => (a, b) => order === 'asc' ? a.id - b.id : b.id - a.id,\n        firstName: (order) => (a, b) => order === 'asc' ? a.firstName.localeCompare(b.firstName) : b.firstName.localeCompare(a.firstName),\n    };\n    const handleSorter = (name, order) => sorter[name](order);\n    const handleCancel = (prevType, index) => {\n        console.log('sort cancel : ', prevType, index);\n    };\n    return (<Table striped data={data} keygen=\"id\" fixed=\"both\" width={1200} rowsInView={10} columns={columns} sorter={handleSorter} style={{ maxHeight: 400 }} onSortCancel={handleCancel}/>);\n};\nexport default App;\n"},1594:function(e,n,t){"use strict";t.r(n);var a=t(12),r=t(0),i=t.n(r),o=t(316),s=t(565),l=Object(s.b)(1e3),d=[{title:"id",render:"id",width:80,sorter:"id",defaultOrder:"asc"},{title:"Name",fixed:"left",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:160,sorter:"firstName"},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"}],c={position:"absolute",cursor:"pointer",transform:"rotate(-90deg) scale(0.8, 1.2)"};n.default=function(){var t={id:function(t){return function(e,n){return"asc"===t?e.id-n.id:n.id-e.id}},firstName:function(t){return function(e,n){return"asc"===t?e.firstName.localeCompare(n.firstName):n.firstName.localeCompare(e.firstName)}}};return i.a.createElement(o.a,{striped:!0,data:l,keygen:"id",fixed:"both",width:1200,rowsInView:10,columns:d,sorter:function(e,n){return t[e](n)},style:{maxHeight:400},onSortCancel:function(e,n){console.log("sort cancel : ",e,n)},renderSorter:function(e){var n=e.status,t=e.triggerAsc,r=e.triggerDesc;return i.a.createElement(i.a.Fragment,null,i.a.createElement("div",{style:Object(a.a)(Object(a.a)({},c),{},{top:"-5px",color:"asc"===n?"#197afa":"#999da8"}),onClick:t},">"),i.a.createElement("div",{style:Object(a.a)(Object(a.a)({bottom:"-5px"},c),{},{color:"desc"===n?"#197afa":"#999da8"}),onClick:r},"<"))}})}},1595:function(e,n){e.exports="/**\n * cn - 自定义排序图标\n *    -- 设置 Table 的 renderSorter 属性来自定义图标\n * en - Sorter\n *    -- Set the renderSorter property of the Table to customize the icon.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData>\ntype TableSorter = TableProps['sorter']\ntype TableColumnOrder = TYPE.Table.ColumnOrder\ntype TableRenderSorter = TableProps['renderSorter']\ntype TableOnSortCancel = TableProps['onSortCancel']\ntype TableSorterParam = TYPE.Table.renderSorterParam\n\nconst data: TableRowData[] = fetchSync(1000)\nconst columns: TableColumnItem[] = [\n  {\n    title: 'id',\n    render: 'id',\n    width: 80,\n    sorter: 'id',\n    defaultOrder: 'asc',\n  },\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: d => `${d.firstName} ${d.lastName}`,\n    width: 160,\n    sorter: 'firstName',\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n]\n\nconst commonStyle: React.CSSProperties = {\n  position: 'absolute',\n  cursor: 'pointer',\n  transform: 'rotate(-90deg) scale(0.8, 1.2)',\n}\n\nconst App: React.FC = () => {\n  const sorter: {\n    [x: string]: Function\n  } = {\n    id: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n      order === 'asc' ? a.id - b.id : b.id - a.id,\n    firstName: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n      order === 'asc' ? a.firstName.localeCompare(b.firstName) : b.firstName.localeCompare(a.firstName),\n  }\n\n  const renderSorter: TableRenderSorter = ({ status, triggerAsc, triggerDesc }: TableSorterParam) => (\n    <>\n      <div\n        style={{\n          ...commonStyle,\n          top: '-5px',\n          color: status === 'asc' ? '#197afa' : '#999da8',\n        }}\n        onClick={triggerAsc}\n      >\n        {'>'}\n      </div>\n      <div\n        style={{\n          bottom: '-5px',\n          ...commonStyle,\n          color: status === 'desc' ? '#197afa' : '#999da8',\n        }}\n        onClick={triggerDesc}\n      >\n        {'<'}\n      </div>\n    </>\n  )\n\n  const handleSorter: TableSorter = (name, order) => sorter[name](order)\n\n  const handleCancel: TableOnSortCancel = (prevType, index) => {\n    console.log('sort cancel : ', prevType, index)\n  }\n  return (\n    <Table\n      striped\n      data={data}\n      keygen=\"id\"\n      fixed=\"both\"\n      width={1200}\n      rowsInView={10}\n      columns={columns}\n      sorter={handleSorter}\n      style={{ maxHeight: 400 }}\n      onSortCancel={handleCancel}\n      renderSorter={renderSorter}\n    />\n  )\n}\n\nexport default App\n"},1596:function(e,n){e.exports="/**\n * cn - 自定义排序图标\n *    -- 设置 Table 的 renderSorter 属性来自定义图标\n * en - Sorter\n *    -- Set the renderSorter property of the Table to customize the icon.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(1000);\nconst columns = [\n    {\n        title: 'id',\n        render: 'id',\n        width: 80,\n        sorter: 'id',\n        defaultOrder: 'asc',\n    },\n    {\n        title: 'Name',\n        fixed: 'left',\n        render: d => `${d.firstName} ${d.lastName}`,\n        width: 160,\n        sorter: 'firstName',\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n];\nconst commonStyle = {\n    position: 'absolute',\n    cursor: 'pointer',\n    transform: 'rotate(-90deg) scale(0.8, 1.2)',\n};\nconst App = () => {\n    const sorter = {\n        id: (order) => (a, b) => order === 'asc' ? a.id - b.id : b.id - a.id,\n        firstName: (order) => (a, b) => order === 'asc' ? a.firstName.localeCompare(b.firstName) : b.firstName.localeCompare(a.firstName),\n    };\n    const renderSorter = ({ status, triggerAsc, triggerDesc }) => (<>\n      <div style={Object.assign(Object.assign({}, commonStyle), { top: '-5px', color: status === 'asc' ? '#197afa' : '#999da8' })} onClick={triggerAsc}>\n        {'>'}\n      </div>\n      <div style={Object.assign(Object.assign({ bottom: '-5px' }, commonStyle), { color: status === 'desc' ? '#197afa' : '#999da8' })} onClick={triggerDesc}>\n        {'<'}\n      </div>\n    </>);\n    const handleSorter = (name, order) => sorter[name](order);\n    const handleCancel = (prevType, index) => {\n        console.log('sort cancel : ', prevType, index);\n    };\n    return (<Table striped data={data} keygen=\"id\" fixed=\"both\" width={1200} rowsInView={10} columns={columns} sorter={handleSorter} style={{ maxHeight: 400 }} onSortCancel={handleCancel} renderSorter={renderSorter}/>);\n};\nexport default App;\n"},1597:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(1e3),l=[{title:"id",render:"id",width:80,sorter:{rule:"id",weight:1},defaultOrder:"asc"},{title:"Name",fixed:"left",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:160,sorter:{rule:"firstName",weight:2},defaultOrder:"asc"},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"}],d={id:function(t){return function(e,n){return"asc"===t?e.id-n.id:n.id-e.id}},firstName:function(t){return function(e,n){return"asc"===t?e.firstName.localeCompare(n.firstName):n.firstName.localeCompare(e.firstName)}}};n.default=function(){return a.a.createElement(i.a,{striped:!0,data:s,keygen:"id",fixed:"both",width:1200,rowsInView:10,columns:l,sorter:function(e,n){return d[e](n)},style:{maxHeight:400},onSortCancel:function(e,n){console.log("sort cancel : ",e,n)}})}},1598:function(e,n){e.exports="/**\n * cn - 多列排序\n *    -- 设置 column 的 sorter 为一个对象，对象的rule属性同单列排序的sorter，weight表示排序权重，值越大表示排序优先级越高\n *    -- 支持多列默认排序，为需要默认排序的列设置defaultOrder\n *    -- sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序\n *    -- 后端或自行排序用户自行处理，sorter 函数不要返回结果\n * en - multiple Sorter\n *    -- Set the sorter property of Table to indicate the method of table sort.\n *    -- Set the sorter of column to an object, the rule attribute of the object is the same as the sorter of single column sorting, weight indicates the sorting weight, the larger the value, the higher the sorting priority\n *    -- Support multi-column default sorting, set defaultOrder for columns that need default sorting\n *    -- When the sorter returns a function, use this function to sort data internally.\n *    -- Server-side or self-sorting is is handled by the user, do not return results.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData>\ntype TableSorter = TableProps['sorter']\ntype TableColumnOrder = TYPE.Table.ColumnOrder\ntype TableOnSortCancel = TableProps['onSortCancel']\n\nconst data: TableRowData[] = fetchSync(1000)\nconst columns: TableColumnItem[] = [\n  {\n    title: 'id',\n    render: 'id',\n    width: 80,\n    sorter: {\n      rule: 'id',\n      weight: 1,\n    },\n    defaultOrder: 'asc',\n  },\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: d => `${d.firstName} ${d.lastName}`,\n    width: 160,\n    sorter: {\n      rule: 'firstName',\n      weight: 2,\n    },\n    defaultOrder: 'asc',\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n]\n\nconst sorter: {\n  [x: string]: Function\n} = {\n  id: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) => (order === 'asc' ? a.id - b.id : b.id - a.id),\n  firstName: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n    order === 'asc' ? a.firstName.localeCompare(b.firstName) : b.firstName.localeCompare(a.firstName),\n}\n\nconst App: React.FC = () => {\n  const handleSorter: TableSorter = (name, order) => sorter[name](order)\n\n  const handleCancel: TableOnSortCancel = (prevType, index) => {\n    console.log('sort cancel : ', prevType, index)\n  }\n\n  return (\n    <Table\n      striped\n      data={data}\n      keygen=\"id\"\n      fixed=\"both\"\n      width={1200}\n      rowsInView={10}\n      columns={columns}\n      sorter={handleSorter}\n      style={{ maxHeight: 400 }}\n      onSortCancel={handleCancel}\n    />\n  )\n}\n\nexport default App\n"},1599:function(e,n){e.exports="/**\n * cn - 多列排序\n *    -- 设置 column 的 sorter 为一个对象，对象的rule属性同单列排序的sorter，weight表示排序权重，值越大表示排序优先级越高\n *    -- 支持多列默认排序，为需要默认排序的列设置defaultOrder\n *    -- sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序\n *    -- 后端或自行排序用户自行处理，sorter 函数不要返回结果\n * en - multiple Sorter\n *    -- Set the sorter property of Table to indicate the method of table sort.\n *    -- Set the sorter of column to an object, the rule attribute of the object is the same as the sorter of single column sorting, weight indicates the sorting weight, the larger the value, the higher the sorting priority\n *    -- Support multi-column default sorting, set defaultOrder for columns that need default sorting\n *    -- When the sorter returns a function, use this function to sort data internally.\n *    -- Server-side or self-sorting is is handled by the user, do not return results.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(1000);\nconst columns = [\n    {\n        title: 'id',\n        render: 'id',\n        width: 80,\n        sorter: {\n            rule: 'id',\n            weight: 1,\n        },\n        defaultOrder: 'asc',\n    },\n    {\n        title: 'Name',\n        fixed: 'left',\n        render: d => `${d.firstName} ${d.lastName}`,\n        width: 160,\n        sorter: {\n            rule: 'firstName',\n            weight: 2,\n        },\n        defaultOrder: 'asc',\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n];\nconst sorter = {\n    id: (order) => (a, b) => (order === 'asc' ? a.id - b.id : b.id - a.id),\n    firstName: (order) => (a, b) => order === 'asc' ? a.firstName.localeCompare(b.firstName) : b.firstName.localeCompare(a.firstName),\n};\nconst App = () => {\n    const handleSorter = (name, order) => sorter[name](order);\n    const handleCancel = (prevType, index) => {\n        console.log('sort cancel : ', prevType, index);\n    };\n    return (<Table striped data={data} keygen=\"id\" fixed=\"both\" width={1200} rowsInView={10} columns={columns} sorter={handleSorter} style={{ maxHeight: 400 }} onSortCancel={handleCancel}/>);\n};\nexport default App;\n"},1600:function(e,n,t){"use strict";t.r(n);var o=t(24),s=t(0),l=t.n(s),d=t(316),r=t(565),c=Object(r.b)(1e3);n.default=function(){var e=Object(s.useState)(1),n=Object(o.a)(e,2),t=n[0],r=n[1],a=function(e){r(e)},i=[{title:"id",render:"id",width:70,sorter:function(t){return a(1),function(e,n){return"asc"===t?e.id-n.id:n.id-e.id}}},{title:"First Name",group:"Name",render:"firstName",width:100},{title:"Last Name",fixed:"left",group:"Name",render:"lastName",width:120,sorter:function(t){return a(1),function(e,n){return"asc"===t?e.lastName.localeCompare(n.lastName):n.lastName.localeCompare(e.lastName)}}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",fixed:"right",width:100,render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];return l.a.createElement(d.a,{fixed:"x",keygen:"id",data:c,width:1500,columns:i,pagination:{current:t,align:"center",layout:["links","list"],onChange:a,pageSizeList:[10,15,20],text:{page:"/ page"}}})}},1601:function(e,n){e.exports="/**\n * cn - 分页\n *    -- 前端分页的情况下, 设置 pagination 显示分页，没有设置 onChange 处理数据的情况下，会自动对数据进行分页\n *    -- pagination 的参数和 Pagination 组件一致\n * en - Pagination\n *    -- Set the pagination property to show the pagination and if not set onChange property, the data is automatically paged.\n *    -- The parameters of pagination are consistent with the Pagination component.\n */\nimport React, { useState } from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(1000)\n\nconst App: React.FC = () => {\n  const [current, setCurrent] = useState<number>(1)\n\n  const handlePageChange = (c: number) => {\n    setCurrent(c)\n  }\n\n  const columns: TableColumnItem[] = [\n    {\n      title: 'id',\n      render: 'id',\n      width: 70,\n      sorter: order => {\n        handlePageChange(1)\n        return (a, b) => {\n          if (order === 'asc') return a.id - b.id\n          return b.id - a.id\n        }\n      },\n    },\n    {\n      title: 'First Name',\n      group: 'Name',\n      render: 'firstName',\n      width: 100,\n    },\n    {\n      title: 'Last Name',\n      fixed: 'left',\n      group: 'Name',\n      render: 'lastName',\n      width: 120,\n      sorter: order => {\n        handlePageChange(1)\n        return (a, b) => {\n          if (order === 'asc') return a.lastName.localeCompare(b.lastName)\n          return b.lastName.localeCompare(a.lastName)\n        }\n      },\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n      title: 'Salary',\n      fixed: 'right',\n      width: 100,\n      render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n  ]\n\n  return (\n    <Table\n      fixed=\"x\"\n      keygen=\"id\"\n      data={data}\n      width={1500}\n      columns={columns}\n      pagination={{\n        current,\n        align: 'center',\n        layout: ['links', 'list'],\n        onChange: handlePageChange,\n        pageSizeList: [10, 15, 20],\n        text: {\n          page: '/ page',\n        },\n      }}\n    />\n  )\n}\n\nexport default App\n"},1602:function(e,n){e.exports="/**\n * cn - 分页\n *    -- 前端分页的情况下, 设置 pagination 显示分页，没有设置 onChange 处理数据的情况下，会自动对数据进行分页\n *    -- pagination 的参数和 Pagination 组件一致\n * en - Pagination\n *    -- Set the pagination property to show the pagination and if not set onChange property, the data is automatically paged.\n *    -- The parameters of pagination are consistent with the Pagination component.\n */\nimport React, { useState } from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(1000);\nconst App = () => {\n    const [current, setCurrent] = useState(1);\n    const handlePageChange = (c) => {\n        setCurrent(c);\n    };\n    const columns = [\n        {\n            title: 'id',\n            render: 'id',\n            width: 70,\n            sorter: order => {\n                handlePageChange(1);\n                return (a, b) => {\n                    if (order === 'asc')\n                        return a.id - b.id;\n                    return b.id - a.id;\n                };\n            },\n        },\n        {\n            title: 'First Name',\n            group: 'Name',\n            render: 'firstName',\n            width: 100,\n        },\n        {\n            title: 'Last Name',\n            fixed: 'left',\n            group: 'Name',\n            render: 'lastName',\n            width: 120,\n            sorter: order => {\n                handlePageChange(1);\n                return (a, b) => {\n                    if (order === 'asc')\n                        return a.lastName.localeCompare(b.lastName);\n                    return b.lastName.localeCompare(a.lastName);\n                };\n            },\n        },\n        { title: 'Country', render: 'country' },\n        { title: 'Position', render: 'position' },\n        { title: 'Office', render: 'office' },\n        { title: 'Start Date', render: 'start' },\n        {\n            title: 'Salary',\n            fixed: 'right',\n            width: 100,\n            render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n        },\n    ];\n    return (<Table fixed=\"x\" keygen=\"id\" data={data} width={1500} columns={columns} pagination={{\n            current,\n            align: 'center',\n            layout: ['links', 'list'],\n            onChange: handlePageChange,\n            pageSizeList: [10, 15, 20],\n            text: {\n                page: '/ page',\n            },\n        }}/>);\n};\nexport default App;\n"},1603:function(e,n,t){"use strict";t.r(n);var D=t(24),k=t(0),R=t.n(k),O=t(316),P=t(565);n.default=function(){var e=Object(k.useState)(0),n=Object(D.a)(e,2),t=n[0],r=n[1],a=Object(k.useState)({}),i=Object(D.a)(a,2),o=i[0],s=i[1],l=Object(k.useState)(1),d=Object(D.a)(l,2),c=d[0],u=d[1],m=Object(k.useState)(20),f=Object(D.a)(m,2),p=f[0],h=f[1],g=Object(k.useState)(!1),b=Object(D.a)(g,2),y=b[0],N=b[1],S=Object(k.useState)([]),T=Object(D.a)(S,2),w=T[0],x=T[1],C=function(e,n){s({name:e,order:n}),u(1)},v=[{width:80,title:"id",render:"id",sorter:function(e){return C("id",e)}},{width:100,group:"Name",title:"First Name",render:"firstName"},{width:120,fixed:"left",group:"Name",render:"lastName",title:"Last Name",sorter:function(e){return C("lastName",e)}},{title:"Country",render:"country"},{title:"Office",render:"office"},{title:"Start Date",render:"start",sorter:function(e){return C("start",e)}}];return Object(k.useEffect)(function(){N(!0),P.a.get("user",{sorter:o,current:c,pageSize:p,username:""}).then(function(e){x(e.data),N(!1),r(e.total)})},[c,p,o]),R.a.createElement(O.a,{bordered:!0,fixed:"y",keygen:"id",data:w,loading:y,columns:v,style:{height:400},pagination:{total:t,current:c,pageSize:p,align:"center",layout:["links","list"],onChange:function(e,n){u(e),h(n)},pageSizeList:[10,15,20,100]}})}},1604:function(e,n){e.exports="/**\n * cn -\n *    -- 后端分页的情况下, 在 pagination 的 onChange 中处理（获取）数据，可以实现服务端分页\n * en -\n *    -- Processing (acquiring) data in pagination's onChange realizes the pagination of server-side.\n */\nimport React, { useState, useEffect } from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetch } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableColumnOrder = TYPE.Table.ColumnOrder\n\nconst App: React.FC = () => {\n  const [total, setTotal] = useState(0)\n  const [sorter, setSorter] = useState({})\n  const [current, setCurrent] = useState(1)\n  const [pageSize, setPageSize] = useState(20)\n  const [loading, setLoading] = useState(false)\n  const [data, setData] = useState<TableRowData[]>([])\n\n  const fetchData = () => {\n    setLoading(true)\n    fetch.get('user', { sorter, current, pageSize, username: '' }).then(res => {\n      setData(res.data)\n      setLoading(false)\n      setTotal(res.total)\n    })\n  }\n\n  const handleSorter = (name: string, order: TableColumnOrder) => {\n    setSorter({ name, order })\n    setCurrent(1)\n  }\n\n  const handlePageChange = (c: number, p: number) => {\n    setCurrent(c)\n    setPageSize(p)\n  }\n\n  const columns: TableColumnItem[] = [\n    {\n      width: 80,\n      title: 'id',\n      render: 'id',\n      sorter: order => handleSorter('id', order),\n    },\n    {\n      width: 100,\n      group: 'Name',\n      title: 'First Name',\n      render: 'firstName',\n    },\n    {\n      width: 120,\n      fixed: 'left',\n      group: 'Name',\n      render: 'lastName',\n      title: 'Last Name',\n      sorter: order => handleSorter('lastName', order),\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start', sorter: order => handleSorter('start', order) },\n  ]\n\n  useEffect(\n    () => {\n      fetchData()\n    },\n    [current, pageSize, sorter]\n  )\n\n  return (\n    <Table\n      bordered\n      fixed=\"y\"\n      keygen=\"id\"\n      data={data}\n      loading={loading}\n      columns={columns}\n      style={{ height: 400 }}\n      pagination={{\n        total,\n        current,\n        pageSize,\n        align: 'center',\n        layout: ['links', 'list'],\n        onChange: handlePageChange,\n        pageSizeList: [10, 15, 20, 100],\n      }}\n    />\n  )\n}\n\nexport default App\n"},1605:function(e,n){e.exports="/**\n * cn -\n *    -- 后端分页的情况下, 在 pagination 的 onChange 中处理（获取）数据，可以实现服务端分页\n * en -\n *    -- Processing (acquiring) data in pagination's onChange realizes the pagination of server-side.\n */\nimport React, { useState, useEffect } from 'react';\nimport { Table } from 'shineout';\nimport { fetch } from 'doc/data/user';\nconst App = () => {\n    const [total, setTotal] = useState(0);\n    const [sorter, setSorter] = useState({});\n    const [current, setCurrent] = useState(1);\n    const [pageSize, setPageSize] = useState(20);\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n    const fetchData = () => {\n        setLoading(true);\n        fetch.get('user', { sorter, current, pageSize, username: '' }).then(res => {\n            setData(res.data);\n            setLoading(false);\n            setTotal(res.total);\n        });\n    };\n    const handleSorter = (name, order) => {\n        setSorter({ name, order });\n        setCurrent(1);\n    };\n    const handlePageChange = (c, p) => {\n        setCurrent(c);\n        setPageSize(p);\n    };\n    const columns = [\n        {\n            width: 80,\n            title: 'id',\n            render: 'id',\n            sorter: order => handleSorter('id', order),\n        },\n        {\n            width: 100,\n            group: 'Name',\n            title: 'First Name',\n            render: 'firstName',\n        },\n        {\n            width: 120,\n            fixed: 'left',\n            group: 'Name',\n            render: 'lastName',\n            title: 'Last Name',\n            sorter: order => handleSorter('lastName', order),\n        },\n        { title: 'Country', render: 'country' },\n        { title: 'Office', render: 'office' },\n        { title: 'Start Date', render: 'start', sorter: order => handleSorter('start', order) },\n    ];\n    useEffect(() => {\n        fetchData();\n    }, [current, pageSize, sorter]);\n    return (<Table bordered fixed=\"y\" keygen=\"id\" data={data} loading={loading} columns={columns} style={{ height: 400 }} pagination={{\n            total,\n            current,\n            pageSize,\n            align: 'center',\n            layout: ['links', 'list'],\n            onChange: handlePageChange,\n            pageSizeList: [10, 15, 20, 100],\n        }}/>);\n};\nexport default App;\n"},1606:function(e,n,t){"use strict";t.r(n);var p=t(27),h=t(24),g=t(0),b=t.n(g),y=t(316),N=t(565);n.default=function(){var e=Object(g.useState)(20),n=Object(h.a)(e,1)[0],t=Object(g.useState)(1),r=Object(h.a)(t,2),a=r[0],i=r[1],o=Object(g.useState)(!1),s=Object(h.a)(o,2),l=s[0],d=s[1],c=Object(g.useState)([]),u=Object(h.a)(c,2),m=u[0],f=u[1];return Object(g.useEffect)(function(){d(!0),N.a.get("table",{current:a,pageSize:n,sorter:"",username:""}).then(function(e){f([].concat(Object(p.a)(m),Object(p.a)(e.data))),d(!1)})},[n,a]),b.a.createElement(y.a,{bordered:!0,fixed:"y",keygen:"id",data:m,loading:l,columns:[{title:"id",render:"id",width:70},{width:100,group:"Name",title:"First Name",render:"firstName"},{width:120,fixed:"left",group:"Name",title:"Last Name",render:"lastName"},{title:"Country",render:"country"},{title:"Office",render:"office"},{title:"Start Date",render:"start"}],verticalAlign:"middle",style:{height:450},onScroll:function(e,n){1!==n||l||i(a+1)}})}},1607:function(e,n){e.exports="/**\n * cn - 滚动加载\n *    -- onScroll 事件会返回当前滚动条位置 (float 类型，[0,1])，可以据此实现滚动加载数据\n * en - onScroll\n *    -- The onScroll event returns the current position(float,[0,1]) of the scroll bar.\n */\nimport React, { useState, useEffect } from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetch } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst App: React.FC = () => {\n  const [pageSize] = useState(20)\n  const [current, setCurrent] = useState(1)\n  const [loading, setLoading] = useState(false)\n  const [data, setData] = useState<TableRowData[]>([])\n\n  const fetchData = () => {\n    setLoading(true)\n    fetch.get('table', { current, pageSize, sorter: '', username: '' }).then(res => {\n      setData([...data, ...res.data])\n      setLoading(false)\n    })\n  }\n\n  const handleScroll = (_left: number, top: number) => {\n    if (top === 1 && !loading) {\n      setCurrent(current + 1)\n    }\n  }\n\n  const columns: TableColumnItem[] = [\n    { title: 'id', render: 'id', width: 70 },\n    {\n      width: 100,\n      group: 'Name',\n      title: 'First Name',\n      render: 'firstName',\n    },\n    {\n      width: 120,\n      fixed: 'left',\n      group: 'Name',\n      title: 'Last Name',\n      render: 'lastName',\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n  ]\n\n  useEffect(\n    () => {\n      fetchData()\n    },\n    [pageSize, current]\n  )\n\n  return (\n    <Table\n      bordered\n      fixed=\"y\"\n      keygen=\"id\"\n      data={data}\n      loading={loading}\n      columns={columns}\n      verticalAlign=\"middle\"\n      style={{ height: 450 }}\n      onScroll={handleScroll}\n    />\n  )\n}\n\nexport default App\n"},1608:function(e,n){e.exports="/**\n * cn - 滚动加载\n *    -- onScroll 事件会返回当前滚动条位置 (float 类型，[0,1])，可以据此实现滚动加载数据\n * en - onScroll\n *    -- The onScroll event returns the current position(float,[0,1]) of the scroll bar.\n */\nimport React, { useState, useEffect } from 'react';\nimport { Table } from 'shineout';\nimport { fetch } from 'doc/data/user';\nconst App = () => {\n    const [pageSize] = useState(20);\n    const [current, setCurrent] = useState(1);\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n    const fetchData = () => {\n        setLoading(true);\n        fetch.get('table', { current, pageSize, sorter: '', username: '' }).then(res => {\n            setData([...data, ...res.data]);\n            setLoading(false);\n        });\n    };\n    const handleScroll = (_left, top) => {\n        if (top === 1 && !loading) {\n            setCurrent(current + 1);\n        }\n    };\n    const columns = [\n        { title: 'id', render: 'id', width: 70 },\n        {\n            width: 100,\n            group: 'Name',\n            title: 'First Name',\n            render: 'firstName',\n        },\n        {\n            width: 120,\n            fixed: 'left',\n            group: 'Name',\n            title: 'Last Name',\n            render: 'lastName',\n        },\n        { title: 'Country', render: 'country' },\n        { title: 'Office', render: 'office' },\n        { title: 'Start Date', render: 'start' },\n    ];\n    useEffect(() => {\n        fetchData();\n    }, [pageSize, current]);\n    return (<Table bordered fixed=\"y\" keygen=\"id\" data={data} loading={loading} columns={columns} verticalAlign=\"middle\" style={{ height: 450 }} onScroll={handleScroll}/>);\n};\nexport default App;\n"},1609:function(e,n,t){"use strict";t.r(n);var D=t(24),k=t(0),R=t.n(k),O=t(316),P=t(565);n.default=function(){var e=Object(k.useState)(0),n=Object(D.a)(e,2),t=n[0],r=n[1],a=Object(k.useState)(1),i=Object(D.a)(a,2),o=i[0],s=i[1],l=Object(k.useState)(10),d=Object(D.a)(l,2),c=d[0],u=d[1],m=Object(k.useState)(!1),f=Object(D.a)(m,2),p=f[0],h=f[1],g=Object(k.useState)([]),b=Object(D.a)(g,2),y=b[0],N=b[1],S=Object(k.useState)({name:"start",order:"asc"}),T=Object(D.a)(S,2),w=T[0],x=T[1],C=function(e,n){x({name:e,order:n}),s(1)},v=[{width:70,title:"id",render:"id",sorter:function(e){return C("id",e)}},{title:"First Name",group:"Name",render:"firstName"},{title:"Last Name",group:"Name",render:"lastName"},{render:"start",title:"Start Date",rowSpan:function(e,n){return e.start===n.start},sorter:function(e){return C("start",e)},colSpan:function(e){var n=parseInt(e.time.slice(0,2),10);return 21<n||n<9?2:1}},{title:"Time",render:"time"},{title:"Office",render:"office5",rowSpan:!0}];return Object(k.useEffect)(function(){h(!0),P.a.get("user",{sorter:w,current:o,pageSize:c,username:""}).then(function(e){N(e.data),h(!1),r(e.total)})},[o,c,w]),R.a.createElement(O.a,{bordered:!0,keygen:"id",data:y,loading:p,columns:v,pagination:{total:t,current:o,pageSize:c,align:"center",layout:["links","list"],onChange:function(e,n){s(e),u(n)},pageSizeList:[10,15,20]}})}},1610:function(e,n){e.exports="/**\n * cn - 合并行/列\n *    -- 设置 column 的 rowSpan 可以合并行，rowSpan 为函数，会传入相邻的两行数据，根据此函数返回结果(bool)判断是否合并行\n *    -- 设置 column 的 colSpan 可以合并列，colSpan 为函数，传入参数为当前行数据，函数返回结果为需要向后合并的列数，不合并返回 1\n *    -- 一个单元格同时指定了rowSpan和colSpan时，如果两行的colSpan计算结果不同，这两行不会合并\n * en - rowSpan & colSpan\n *    -- - Set column's rowSpan property to merge rows. The rowSpan property is a function that passed in two adjacent rows of data and determine whether to merge or not.\n *    -- - Set column's colSpan property to merge columns. The colSpan property is a function that passed in current row of data and the result returned by this function is as the number of columns that need to be merged.\n *    -- - When a cell specifies both rowSpan and colSpan, if the colSpan's calculation results of the two rows are different, the two rows will not be merged.\n */\nimport React, { useState, useEffect } from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetch } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableColumnOrder = TYPE.Table.ColumnOrder\n\nconst App: React.FC = () => {\n  const [total, setTotal] = useState(0)\n  const [current, setCurrent] = useState(1)\n  const [pageSize, setPageSize] = useState(10)\n  const [loading, setLoading] = useState(false)\n  const [data, setData] = useState<TableRowData[]>([])\n  const [sorter, setSorter] = useState({ name: 'start', order: 'asc' })\n\n  const fetchData = () => {\n    setLoading(true)\n    fetch.get('user', { sorter, current, pageSize, username: '' }).then(res => {\n      setData(res.data)\n      setLoading(false)\n      setTotal(res.total)\n    })\n  }\n\n  const handlePageChange = (c: number, p: number) => {\n    setCurrent(c)\n    setPageSize(p)\n  }\n\n  const handleSorter = (name: string, order: TableColumnOrder) => {\n    setSorter({ name, order })\n    setCurrent(1)\n  }\n\n  const columns: TableColumnItem[] = [\n    {\n      width: 70,\n      title: 'id',\n      render: 'id',\n      sorter: order => handleSorter('id', order),\n    },\n    { title: 'First Name', group: 'Name', render: 'firstName' },\n    { title: 'Last Name', group: 'Name', render: 'lastName' },\n    {\n      render: 'start',\n      title: 'Start Date',\n      rowSpan: (a, b) => a.start === b.start,\n      sorter: order => handleSorter('start', order),\n      colSpan: d => {\n        const hour = parseInt(d.time.slice(0, 2), 10)\n        if (hour > 21 || hour < 9) return 2\n        return 1\n      },\n    },\n    { title: 'Time', render: 'time' },\n    { title: 'Office', render: 'office5', rowSpan: true },\n  ]\n\n  useEffect(\n    () => {\n      fetchData()\n    },\n    [current, pageSize, sorter]\n  )\n\n  return (\n    <Table\n      bordered\n      keygen=\"id\"\n      data={data}\n      loading={loading}\n      columns={columns}\n      pagination={{\n        total,\n        current,\n        pageSize,\n        align: 'center',\n        layout: ['links', 'list'],\n        onChange: handlePageChange,\n        pageSizeList: [10, 15, 20],\n      }}\n    />\n  )\n}\n\nexport default App\n"},1611:function(e,n){e.exports="/**\n * cn - 合并行/列\n *    -- 设置 column 的 rowSpan 可以合并行，rowSpan 为函数，会传入相邻的两行数据，根据此函数返回结果(bool)判断是否合并行\n *    -- 设置 column 的 colSpan 可以合并列，colSpan 为函数，传入参数为当前行数据，函数返回结果为需要向后合并的列数，不合并返回 1\n *    -- 一个单元格同时指定了rowSpan和colSpan时，如果两行的colSpan计算结果不同，这两行不会合并\n * en - rowSpan & colSpan\n *    -- - Set column's rowSpan property to merge rows. The rowSpan property is a function that passed in two adjacent rows of data and determine whether to merge or not.\n *    -- - Set column's colSpan property to merge columns. The colSpan property is a function that passed in current row of data and the result returned by this function is as the number of columns that need to be merged.\n *    -- - When a cell specifies both rowSpan and colSpan, if the colSpan's calculation results of the two rows are different, the two rows will not be merged.\n */\nimport React, { useState, useEffect } from 'react';\nimport { Table } from 'shineout';\nimport { fetch } from 'doc/data/user';\nconst App = () => {\n    const [total, setTotal] = useState(0);\n    const [current, setCurrent] = useState(1);\n    const [pageSize, setPageSize] = useState(10);\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n    const [sorter, setSorter] = useState({ name: 'start', order: 'asc' });\n    const fetchData = () => {\n        setLoading(true);\n        fetch.get('user', { sorter, current, pageSize, username: '' }).then(res => {\n            setData(res.data);\n            setLoading(false);\n            setTotal(res.total);\n        });\n    };\n    const handlePageChange = (c, p) => {\n        setCurrent(c);\n        setPageSize(p);\n    };\n    const handleSorter = (name, order) => {\n        setSorter({ name, order });\n        setCurrent(1);\n    };\n    const columns = [\n        {\n            width: 70,\n            title: 'id',\n            render: 'id',\n            sorter: order => handleSorter('id', order),\n        },\n        { title: 'First Name', group: 'Name', render: 'firstName' },\n        { title: 'Last Name', group: 'Name', render: 'lastName' },\n        {\n            render: 'start',\n            title: 'Start Date',\n            rowSpan: (a, b) => a.start === b.start,\n            sorter: order => handleSorter('start', order),\n            colSpan: d => {\n                const hour = parseInt(d.time.slice(0, 2), 10);\n                if (hour > 21 || hour < 9)\n                    return 2;\n                return 1;\n            },\n        },\n        { title: 'Time', render: 'time' },\n        { title: 'Office', render: 'office5', rowSpan: true },\n    ];\n    useEffect(() => {\n        fetchData();\n    }, [current, pageSize, sorter]);\n    return (<Table bordered keygen=\"id\" data={data} loading={loading} columns={columns} pagination={{\n            total,\n            current,\n            pageSize,\n            align: 'center',\n            layout: ['links', 'list'],\n            onChange: handlePageChange,\n            pageSizeList: [10, 15, 20],\n        }}/>);\n};\nexport default App;\n"},1612:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(1e4),l=[{title:"id",render:"id",width:70,sorter:function(t){return function(e,n){return"asc"===t?e.id-n.id:n.id-e.id}}},{title:"First Name",group:"Name",render:"firstName",rowSpan:function(e,n){return e.firstName===n.firstName},sorter:function(t){return function(e,n){return"asc"===t?e.firstName.localeCompare(n.firstName):n.firstName.localeCompare(e.firstName)}}},{title:"Last Name",group:"Name",render:"lastName"},{title:"Start Date",width:120,render:"start",rowSpan:function(e,n){return e.start===n.start},colSpan:function(e){var n=parseInt(e.time.slice(0,2),10);return 21<n||n<9?2:1},sorter:function(t){return function(e,n){return"asc"===t?e.start.localeCompare(n.start):n.start.localeCompare(e.start)}}},{title:"Time",render:"time"},{title:"Office",render:"office5",rowSpan:!0}];n.default=function(){return a.a.createElement(i.a,{bordered:!0,data:s,keygen:"id",fixed:"y",columns:l,style:{height:650}})}},1613:function(e,n){e.exports="/**\n * cn -\n *    -- 示例：不带分页的合并行/列\n * en -\n *    -- Example: Merged rows/columns without pagination.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(10000)\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'id',\n    render: 'id',\n    width: 70,\n    sorter: order => (a, b) => {\n      if (order === 'asc') return a.id - b.id\n      return b.id - a.id\n    },\n  },\n  {\n    title: 'First Name',\n    group: 'Name',\n    render: 'firstName',\n    rowSpan: (a, b) => a.firstName === b.firstName,\n    sorter: order => (a, b) => {\n      if (order === 'asc') return a.firstName.localeCompare(b.firstName)\n      return b.firstName.localeCompare(a.firstName)\n    },\n  },\n  { title: 'Last Name', group: 'Name', render: 'lastName' },\n  {\n    title: 'Start Date',\n    width: 120,\n    render: 'start',\n    rowSpan: (a, b) => a.start === b.start,\n    colSpan: d => {\n      const hour = parseInt(d.time.slice(0, 2), 10)\n      if (hour > 21 || hour < 9) return 2\n      return 1\n    },\n    sorter: order => (a, b) => {\n      if (order === 'asc') return a.start.localeCompare(b.start)\n      return b.start.localeCompare(a.start)\n    },\n  },\n  { title: 'Time', render: 'time' },\n  { title: 'Office', render: 'office5', rowSpan: true },\n]\n\nconst App: React.FC = () => (\n  <Table bordered data={data} keygen=\"id\" fixed=\"y\" columns={columns} style={{ height: 650 }} />\n)\n\nexport default App\n"},1614:function(e,n){e.exports="/**\n * cn -\n *    -- 示例：不带分页的合并行/列\n * en -\n *    -- Example: Merged rows/columns without pagination.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(10000);\nconst columns = [\n    {\n        title: 'id',\n        render: 'id',\n        width: 70,\n        sorter: order => (a, b) => {\n            if (order === 'asc')\n                return a.id - b.id;\n            return b.id - a.id;\n        },\n    },\n    {\n        title: 'First Name',\n        group: 'Name',\n        render: 'firstName',\n        rowSpan: (a, b) => a.firstName === b.firstName,\n        sorter: order => (a, b) => {\n            if (order === 'asc')\n                return a.firstName.localeCompare(b.firstName);\n            return b.firstName.localeCompare(a.firstName);\n        },\n    },\n    { title: 'Last Name', group: 'Name', render: 'lastName' },\n    {\n        title: 'Start Date',\n        width: 120,\n        render: 'start',\n        rowSpan: (a, b) => a.start === b.start,\n        colSpan: d => {\n            const hour = parseInt(d.time.slice(0, 2), 10);\n            if (hour > 21 || hour < 9)\n                return 2;\n            return 1;\n        },\n        sorter: order => (a, b) => {\n            if (order === 'asc')\n                return a.start.localeCompare(b.start);\n            return b.start.localeCompare(a.start);\n        },\n    },\n    { title: 'Time', render: 'time' },\n    { title: 'Office', render: 'office5', rowSpan: true },\n];\nconst App = () => (<Table bordered data={data} keygen=\"id\" fixed=\"y\" columns={columns} style={{ height: 650 }}/>);\nexport default App;\n"},1615:function(e,n,t){"use strict";t.r(n);var a=t(24),i=t(0),o=t.n(i),s=t(316),r=t(565),l=Object(r.b)(20),d=function(e){return e.id%3==0},c=[{type:"checkbox",rowSpan:d,filterAll:function(r){return r.filter(function(e,n){if(0<n){var t=r[n-1];return!d(t)}return!0})}},{title:"id",render:"id",width:60,sorter:function(t){return function(e,n){return"asc"===t?e.id-n.id:n.id-e.id}}},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:160},{title:"Position",render:"position"},{title:"Office",render:"office"}];n.default=function(){var e=Object(i.useState)([l[2]]),n=Object(a.a)(e,2),t=n[0],r=n[1];return o.a.createElement("div",null,o.a.createElement(s.a,{data:l,keygen:"id",fixed:"both",columns:c,value:t,style:{height:450},onRowSelect:function(e){console.log(e),r(e)},prediction:function(e,n){return e.id===n.id}}),o.a.createElement("div",null,"selected rows: [".concat(t.map(function(e){return e.id}).join(", "),"]")))}},1616:function(e,n){e.exports="/**\n * cn - 选择行\n *    -- 设置 onRowSelect 属性，会自动添加选择列\n * en - Select\n *    -- Set the onRowSelect property will automatically add a column with checkbox.\n */\nimport React, { useState } from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData[]>\ntype TableOnRowSelect = TableProps['onRowSelect']\n\nconst data: TableRowData[] = fetchSync(20)\n\nconst rowSpan = (a: TableRowData) => a.id % 3 === 0\n\nconst columns: TableColumnItem[] = [\n  {\n    type: 'checkbox',\n    rowSpan,\n    filterAll: d =>\n      d.filter((_item, index) => {\n        if (index > 0) {\n          const before = d[index - 1]\n          return !rowSpan(before)\n        }\n        return true\n      }),\n  },\n  {\n    title: 'id',\n    render: 'id',\n    width: 60,\n    sorter: order => (a, b) => {\n      if (order === 'asc') return a.id - b.id\n      return b.id - a.id\n    },\n  },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 160 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => {\n  const [selectedValue, setSelectedValue] = useState([data[2]])\n  const handelRowSelect: TableOnRowSelect = v => {\n    console.log(v)\n    setSelectedValue(v)\n  }\n\n  return (\n    <div>\n      <Table\n        data={data}\n        keygen=\"id\"\n        fixed=\"both\"\n        columns={columns}\n        value={selectedValue}\n        style={{ height: 450 }}\n        onRowSelect={handelRowSelect}\n        prediction={(v, d) => v.id === d.id}\n      />\n      {/* <div>selected rows: [{selectedValue.map(v => v.id).join(', ')}] </div> */}\n      <div>{`selected rows: [${selectedValue.map(v => v.id).join(', ')}]`}</div>\n    </div>\n  )\n}\n\nexport default App\n"},1617:function(e,n){e.exports="/**\n * cn - 选择行\n *    -- 设置 onRowSelect 属性，会自动添加选择列\n * en - Select\n *    -- Set the onRowSelect property will automatically add a column with checkbox.\n */\nimport React, { useState } from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(20);\nconst rowSpan = (a) => a.id % 3 === 0;\nconst columns = [\n    {\n        type: 'checkbox',\n        rowSpan,\n        filterAll: d => d.filter((_item, index) => {\n            if (index > 0) {\n                const before = d[index - 1];\n                return !rowSpan(before);\n            }\n            return true;\n        }),\n    },\n    {\n        title: 'id',\n        render: 'id',\n        width: 60,\n        sorter: order => (a, b) => {\n            if (order === 'asc')\n                return a.id - b.id;\n            return b.id - a.id;\n        },\n    },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 160 },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => {\n    const [selectedValue, setSelectedValue] = useState([data[2]]);\n    const handelRowSelect = v => {\n        console.log(v);\n        setSelectedValue(v);\n    };\n    return (<div>\n      <Table data={data} keygen=\"id\" fixed=\"both\" columns={columns} value={selectedValue} style={{ height: 450 }} onRowSelect={handelRowSelect} prediction={(v, d) => v.id === d.id}/>\n      {/* <div>selected rows: [{selectedValue.map(v => v.id).join(', ')}] </div> */}\n      <div>{`selected rows: [${selectedValue.map(v => v.id).join(', ')}]`}</div>\n    </div>);\n};\nexport default App;\n"},1618:function(e,n,t){"use strict";t.r(n);var a=t(24),i=t(0),o=t.n(i),s=t(316),r=t(565),l=Object(r.b)(20),d=[2,3,5].map(function(e){return"".concat(l[e].firstName," ").concat(l[e].lastName)}),c=[{width:60,title:"id",render:"id",sorter:function(t){return function(e,n){return"asc"===t?e.id-n.id:n.id-e.id}}},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:160},{title:"Position",render:"position"},{title:"Office",render:"office"}];n.default=function(){var e=Object(i.useState)(d),n=Object(a.a)(e,2),t=n[0],r=n[1];return o.a.createElement("div",null,o.a.createElement(s.a,{keygen:"id",data:l,fixed:"both",columns:c,value:t,style:{height:300},onRowSelect:function(e){r(e)},format:function(e){return"".concat(e.firstName," ").concat(e.lastName)}}),o.a.createElement("div",{style:{wordBreak:"break-all"}},"selected rows:",JSON.stringify(t)))}},1619:function(e,n){e.exports="/**\n * cn -\n *    -- 使用 format，可以格式化返回的数据\n * en -\n *    -- Set format property to format the returned value.\n */\nimport React, { useState } from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableProps = TYPE.Table.Props<TableRowData, string[]>\ntype TableOnRowSelect = TableProps['onRowSelect']\n\nconst data: TableRowData[] = fetchSync(20)\nconst value = [2, 3, 5].map(i => `${data[i].firstName} ${data[i].lastName}`)\n\nconst columns: TableColumnItem[] = [\n  {\n    width: 60,\n    title: 'id',\n    render: 'id',\n    sorter: order => (a, b) => {\n      if (order === 'asc') return a.id - b.id\n      return b.id - a.id\n    },\n  },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 160 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => {\n  const [selectedValue, setSelectedValue] = useState(value)\n\n  const handelRowSelect: TableOnRowSelect = v => {\n    setSelectedValue(v)\n  }\n  return (\n    <div>\n      <Table\n        keygen=\"id\"\n        data={data}\n        fixed=\"both\"\n        columns={columns}\n        value={selectedValue}\n        style={{ height: 300 }}\n        onRowSelect={handelRowSelect}\n        format={d => `${d.firstName} ${d.lastName}`}\n      />\n      <div style={{ wordBreak: 'break-all' }}>\n        selected rows:\n        {JSON.stringify(selectedValue)}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"},1620:function(e,n){e.exports="/**\n * cn -\n *    -- 使用 format，可以格式化返回的数据\n * en -\n *    -- Set format property to format the returned value.\n */\nimport React, { useState } from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(20);\nconst value = [2, 3, 5].map(i => `${data[i].firstName} ${data[i].lastName}`);\nconst columns = [\n    {\n        width: 60,\n        title: 'id',\n        render: 'id',\n        sorter: order => (a, b) => {\n            if (order === 'asc')\n                return a.id - b.id;\n            return b.id - a.id;\n        },\n    },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 160 },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => {\n    const [selectedValue, setSelectedValue] = useState(value);\n    const handelRowSelect = v => {\n        setSelectedValue(v);\n    };\n    return (<div>\n      <Table keygen=\"id\" data={data} fixed=\"both\" columns={columns} value={selectedValue} style={{ height: 300 }} onRowSelect={handelRowSelect} format={d => `${d.firstName} ${d.lastName}`}/>\n      <div style={{ wordBreak: 'break-all' }}>\n        selected rows:\n        {JSON.stringify(selectedValue)}\n      </div>\n    </div>);\n};\nexport default App;\n"},1621:function(e,n,t){"use strict";t.r(n);var a=t(24),i=t(0),o=t.n(i),s=t(316),r=t(565),l=Object(r.b)(50),d=[{type:"checkbox"},{width:50,title:"id",render:"id"},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:160},{title:"Position",render:"position"},{title:"Office",render:"office"}];n.default=function(){var e=Object(i.useState)(1),n=Object(a.a)(e,2),t=n[0],r=n[1];return o.a.createElement("div",null,o.a.createElement(s.a,{radio:!0,data:l,keygen:"id",format:"id",fixed:"both",value:t,columns:d,style:{height:450},onRowSelect:function(e){console.log(e),r(e)}}),o.a.createElement("div",null,"selected: ".concat(t)))}},1622:function(e,n){e.exports="/**\n * cn -\n *    -- 设置 radio 属性实现单选效果\n * en -\n *    -- Set the radio attribute to achieve the radio effect\n */\nimport React, { useState } from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableProps = TYPE.Table.Props<TableRowData, number>\ntype TableOnRowSelect = TableProps['onRowSelect']\n\nconst data: TableRowData[] = fetchSync(50)\n\nconst columns: TableColumnItem[] = [\n  {\n    type: 'checkbox',\n  },\n  {\n    width: 50,\n    title: 'id',\n    render: 'id',\n  },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 160 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState(1)\n\n  const handelRowSelect: TableOnRowSelect = v => {\n    console.log(v)\n    setValue(v)\n  }\n  return (\n    <div>\n      <Table\n        radio\n        data={data}\n        keygen=\"id\"\n        format=\"id\"\n        fixed=\"both\"\n        value={value}\n        columns={columns}\n        style={{ height: 450 }}\n        onRowSelect={handelRowSelect}\n      />\n      <div>{`selected: ${value}`}</div>\n    </div>\n  )\n}\n\nexport default App\n"},1623:function(e,n){e.exports="/**\n * cn -\n *    -- 设置 radio 属性实现单选效果\n * en -\n *    -- Set the radio attribute to achieve the radio effect\n */\nimport React, { useState } from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(50);\nconst columns = [\n    {\n        type: 'checkbox',\n    },\n    {\n        width: 50,\n        title: 'id',\n        render: 'id',\n    },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 160 },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => {\n    const [value, setValue] = useState(1);\n    const handelRowSelect = v => {\n        console.log(v);\n        setValue(v);\n    };\n    return (<div>\n      <Table radio data={data} keygen=\"id\" format=\"id\" fixed=\"both\" value={value} columns={columns} style={{ height: 450 }} onRowSelect={handelRowSelect}/>\n      <div>{`selected: ${value}`}</div>\n    </div>);\n};\nexport default App;\n"},1624:function(e,n,t){"use strict";t.r(n);var a=t(24),i=t(0),o=t.n(i),r=t(91),s=t(316),l=t(565),d=Object(l.b)(100),c=[{width:40,type:"checkbox",render:function(e,n,t){return o.a.createElement("span",null,t,e.id%3==0?o.a.createElement(r.a,{position:"right"},"这个不能选"):null)}},{width:60,title:"id",render:"id",sorter:function(t){return function(e,n){return"asc"===t?e.id-n.id:n.id-e.id}}},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:160},{title:"Position",render:"position"},{title:"Office",render:"office"}];n.default=function(){var e=Object(i.useState)([d[2]]),n=Object(a.a)(e,2),t=n[0],r=n[1];return o.a.createElement("div",null,o.a.createElement(s.a,{data:d,keygen:"id",fixed:"both",columns:c,value:t,style:{height:450},onRowSelect:function(e){console.log(e),r(e)},disabled:function(e){return e.id%3==0},prediction:function(e,n){return e.id===n.id}}),o.a.createElement("div",null,"selected rows: [".concat(t.map(function(e){return e.id}).join(", "),"] ")))}},1625:function(e,n){e.exports="/**\n * cn -\n *    -- 通过 render 自定义渲染\n * en - Select\n *    -- Custom rendering via render\n */\nimport React, { useState } from 'react'\nimport { Table, Popover, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData[]>\ntype TableOnRowSelect = TableProps['onRowSelect']\n\nconst data: TableRowData[] = fetchSync(100)\n\nconst columns: TableColumnItem[] = [\n  {\n    width: 40,\n    type: 'checkbox',\n    render: (d, _index, checkbox) => (\n      <span>\n        {checkbox}\n        {d.id % 3 === 0 ? <Popover position=\"right\">这个不能选</Popover> : null}\n      </span>\n    ),\n  },\n  {\n    width: 60,\n    title: 'id',\n    render: 'id',\n    sorter: order => (a, b) => {\n      if (order === 'asc') return a.id - b.id\n      return b.id - a.id\n    },\n  },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 160 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => {\n  const [selectedValue, setSelectedValue] = useState([data[2]])\n\n  const handelRowSelect: TableOnRowSelect = v => {\n    console.log(v)\n    setSelectedValue(v)\n  }\n\n  return (\n    <div>\n      <Table\n        data={data}\n        keygen=\"id\"\n        fixed=\"both\"\n        columns={columns}\n        value={selectedValue}\n        style={{ height: 450 }}\n        onRowSelect={handelRowSelect}\n        disabled={d => d.id % 3 === 0}\n        prediction={(v, d) => v.id === d.id}\n      />\n      <div>{`selected rows: [${selectedValue.map(v => v.id).join(', ')}] `}</div>\n    </div>\n  )\n}\nexport default App\n"},1626:function(e,n){e.exports="/**\n * cn -\n *    -- 通过 render 自定义渲染\n * en - Select\n *    -- Custom rendering via render\n */\nimport React, { useState } from 'react';\nimport { Table, Popover } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(100);\nconst columns = [\n    {\n        width: 40,\n        type: 'checkbox',\n        render: (d, _index, checkbox) => (<span>\n        {checkbox}\n        {d.id % 3 === 0 ? <Popover position=\"right\">这个不能选</Popover> : null}\n      </span>),\n    },\n    {\n        width: 60,\n        title: 'id',\n        render: 'id',\n        sorter: order => (a, b) => {\n            if (order === 'asc')\n                return a.id - b.id;\n            return b.id - a.id;\n        },\n    },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 160 },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => {\n    const [selectedValue, setSelectedValue] = useState([data[2]]);\n    const handelRowSelect = v => {\n        console.log(v);\n        setSelectedValue(v);\n    };\n    return (<div>\n      <Table data={data} keygen=\"id\" fixed=\"both\" columns={columns} value={selectedValue} style={{ height: 450 }} onRowSelect={handelRowSelect} disabled={d => d.id % 3 === 0} prediction={(v, d) => v.id === d.id}/>\n      <div>{`selected rows: [${selectedValue.map(v => v.id).join(', ')}] `}</div>\n    </div>);\n};\nexport default App;\n"},1627:function(e,n,t){"use strict";t.r(n);var a=t(24),i=t(0),o=t.n(i),s=t(316),r=t(565),l=Object(r.b)(100),d=[{title:"id",render:"id",width:60,sorter:function(t){return function(e,n){return"asc"===t?e.id-n.id:n.id-e.id}}},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:160},{title:"Position",render:"position"},{title:"Office",render:"office"}];n.default=function(){var e=Object(i.useState)([2,3,5]),n=Object(a.a)(e,2),t=n[0],r=n[1];return o.a.createElement("div",null,o.a.createElement(s.a,{keygen:"id",format:"id",data:l,fixed:"both",columns:d,value:t,style:{height:300},onRowSelect:function(e){r(e)},disabled:function(e){return e.id%3==0}}),o.a.createElement("div",null,"selected rows: [".concat(t.join(", "),"] ")))}},1628:function(e,n){e.exports="/**\n * cn -\n *    -- 设置 disabled 属性，禁用选项。\n * en -\n *    -- Set disabled to disable the selection.\n */\nimport React, { useState } from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableProps = TYPE.Table.Props<TableRowData, number[]>\ntype TableOnRowSelect = TableProps['onRowSelect']\n\nconst data: TableRowData[] = fetchSync(100)\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'id',\n    render: 'id',\n    width: 60,\n    sorter: order => (a, b) => {\n      if (order === 'asc') return a.id - b.id\n      return b.id - a.id\n    },\n  },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 160 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => {\n  const [selectedText, setSelectedText] = useState([2, 3, 5])\n\n  const handelRowSelect: TableOnRowSelect = values => {\n    setSelectedText(values)\n  }\n  return (\n    <div>\n      <Table\n        keygen=\"id\"\n        format=\"id\"\n        data={data}\n        fixed=\"both\"\n        columns={columns}\n        value={selectedText}\n        style={{ height: 300 }}\n        onRowSelect={handelRowSelect}\n        disabled={d => d.id % 3 === 0}\n      />\n      <div>{`selected rows: [${selectedText.join(', ')}] `}</div>\n    </div>\n  )\n}\n\nexport default App\n"},1629:function(e,n){e.exports="/**\n * cn -\n *    -- 设置 disabled 属性，禁用选项。\n * en -\n *    -- Set disabled to disable the selection.\n */\nimport React, { useState } from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(100);\nconst columns = [\n    {\n        title: 'id',\n        render: 'id',\n        width: 60,\n        sorter: order => (a, b) => {\n            if (order === 'asc')\n                return a.id - b.id;\n            return b.id - a.id;\n        },\n    },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 160 },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => {\n    const [selectedText, setSelectedText] = useState([2, 3, 5]);\n    const handelRowSelect = values => {\n        setSelectedText(values);\n    };\n    return (<div>\n      <Table keygen=\"id\" format=\"id\" data={data} fixed=\"both\" columns={columns} value={selectedText} style={{ height: 300 }} onRowSelect={handelRowSelect} disabled={d => d.id % 3 === 0}/>\n      <div>{`selected rows: [${selectedText.join(', ')}] `}</div>\n    </div>);\n};\nexport default App;\n"},1630:function(e,n,t){"use strict";t.r(n);var P=t(24),E=t(0),$=t.n(E),A=t(316),j=t(565);n.default=function(){var e=Object(E.useState)(0),n=Object(P.a)(e,2),t=n[0],r=n[1],a=Object(E.useState)({}),i=Object(P.a)(a,2),o=i[0],s=i[1],l=Object(E.useState)(1),d=Object(P.a)(l,2),c=d[0],u=d[1],m=Object(E.useState)(5),f=Object(P.a)(m,2),p=f[0],h=f[1],g=Object(E.useState)(!1),b=Object(P.a)(g,2),y=b[0],N=b[1],S=Object(E.useState)([]),T=Object(P.a)(S,2),w=T[0],x=T[1],C=Object(E.useState)(""),v=Object(P.a)(C,2),D=v[0],k=v[1],R=function(e,n){s({name:e,order:n}),u(1)},O=[{title:"Id",render:"id",width:70,sorter:function(e){return R("id",e)}},{title:"First Name",render:"firstName"},{title:"Last Name",render:"lastName",sorter:function(e){return R("lastName",e)}},{title:"Office",render:"office"},{title:"Start Date",render:"start",sorter:function(e){return R("start",e)}}];return Object(E.useEffect)(function(){N(!0),j.a.get("user",{sorter:o,current:c,pageSize:p,username:""}).then(function(e){x(e.data),N(!1),r(e.total)})},[c,p,o]),$.a.createElement("div",null,$.a.createElement(A.a,{keygen:"id",format:"id",data:w,loading:y,columns:O,onRowSelect:function(e){return k(e)},pagination:{total:t,current:c,pageSize:p,align:"center",onChange:function(e,n){u(e),h(n)}}}),$.a.createElement("br",null),$.a.createElement("div",null,"selected rows: ".concat(JSON.stringify(D))))}},1631:function(e,n){e.exports="/**\n * cn -\n *    -- 分页中 默认情况下，翻页时会保留当前选中的数据, 如果不需要保留, 则可以分页的时候手动清除\n * en -\n *    -- By default, the Datum object retains the currently selected data when the page is changed.\n */\nimport React, { useState, useEffect } from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetch } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableColumnOrder = TYPE.Table.ColumnOrder\n\nconst App: React.FC = () => {\n  const [total, setTotal] = useState(0)\n  const [sorter, setSorter] = useState({})\n  const [current, setCurrent] = useState(1)\n  const [pageSize, setPageSize] = useState(5)\n  const [loading, setLoading] = useState(false)\n  const [data, setData] = useState<TableRowData[]>([])\n  const [selectedValue, setSelectedValue] = useState('')\n\n  const fetchData = () => {\n    setLoading(true)\n    fetch.get('user', { sorter, current, pageSize, username: '' }).then(res => {\n      setData(res.data)\n      setLoading(false)\n      setTotal(res.total)\n    })\n  }\n\n  const handleSorter = (name: string, order: TableColumnOrder) => {\n    setSorter({ name, order })\n    setCurrent(1)\n  }\n\n  const handlePageChange = (c: number, p: number) => {\n    setCurrent(c)\n    setPageSize(p)\n  }\n\n  const columns: TableColumnItem[] = [\n    {\n      title: 'Id',\n      render: 'id',\n      width: 70,\n      sorter: order => handleSorter('id', order),\n    },\n    { title: 'First Name', render: 'firstName' },\n    { title: 'Last Name', render: 'lastName', sorter: order => handleSorter('lastName', order) },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start', sorter: order => handleSorter('start', order) },\n  ]\n\n  useEffect(\n    () => {\n      fetchData()\n    },\n    [current, pageSize, sorter]\n  )\n\n  return (\n    <div>\n      <Table\n        keygen=\"id\"\n        format=\"id\"\n        data={data}\n        loading={loading}\n        columns={columns}\n        onRowSelect={value => setSelectedValue(value)}\n        pagination={{\n          total,\n          current,\n          pageSize,\n          align: 'center',\n          onChange: handlePageChange,\n        }}\n      />\n      <br />\n      <div>{`selected rows: ${JSON.stringify(selectedValue)}`}</div>\n    </div>\n  )\n}\n\nexport default App\n"},1632:function(e,n){e.exports="/**\n * cn -\n *    -- 分页中 默认情况下，翻页时会保留当前选中的数据, 如果不需要保留, 则可以分页的时候手动清除\n * en -\n *    -- By default, the Datum object retains the currently selected data when the page is changed.\n */\nimport React, { useState, useEffect } from 'react';\nimport { Table } from 'shineout';\nimport { fetch } from 'doc/data/user';\nconst App = () => {\n    const [total, setTotal] = useState(0);\n    const [sorter, setSorter] = useState({});\n    const [current, setCurrent] = useState(1);\n    const [pageSize, setPageSize] = useState(5);\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n    const [selectedValue, setSelectedValue] = useState('');\n    const fetchData = () => {\n        setLoading(true);\n        fetch.get('user', { sorter, current, pageSize, username: '' }).then(res => {\n            setData(res.data);\n            setLoading(false);\n            setTotal(res.total);\n        });\n    };\n    const handleSorter = (name, order) => {\n        setSorter({ name, order });\n        setCurrent(1);\n    };\n    const handlePageChange = (c, p) => {\n        setCurrent(c);\n        setPageSize(p);\n    };\n    const columns = [\n        {\n            title: 'Id',\n            render: 'id',\n            width: 70,\n            sorter: order => handleSorter('id', order),\n        },\n        { title: 'First Name', render: 'firstName' },\n        { title: 'Last Name', render: 'lastName', sorter: order => handleSorter('lastName', order) },\n        { title: 'Office', render: 'office' },\n        { title: 'Start Date', render: 'start', sorter: order => handleSorter('start', order) },\n    ];\n    useEffect(() => {\n        fetchData();\n    }, [current, pageSize, sorter]);\n    return (<div>\n      <Table keygen=\"id\" format=\"id\" data={data} loading={loading} columns={columns} onRowSelect={value => setSelectedValue(value)} pagination={{\n            total,\n            current,\n            pageSize,\n            align: 'center',\n            onChange: handlePageChange,\n        }}/>\n      <br />\n      <div>{`selected rows: ${JSON.stringify(selectedValue)}`}</div>\n    </div>);\n};\nexport default App;\n"},1633:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(20),l=[{title:"id",render:"id",fixed:"left",maxWidth:300,minWidth:100},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];n.default=function(){return a.a.createElement(i.a,{columnResizable:!0,height:300,width:1200,fixed:"both",keygen:"id",columns:l,bordered:!0,data:s})}},1634:function(e,n){e.exports="/**\n * cn - 可伸缩列\n *    -- 设置 columnResizable，使所有列可伸缩。<br />可在columns中设置某一列 columnResizable: false 来取消伸缩该列。\n * en - Fixed head\n *    -- Set the columnResizable property to make all columns resizable. set columnResizable: false on columns item to cancel resizable.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(20)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', fixed: 'left', maxWidth: 300, minWidth: 100 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst App: React.FC = () => (\n  <Table columnResizable height={300} width={1200} fixed=\"both\" keygen=\"id\" columns={columns} bordered data={data} />\n)\n\nexport default App\n"},1635:function(e,n){e.exports="/**\n * cn - 可伸缩列\n *    -- 设置 columnResizable，使所有列可伸缩。<br />可在columns中设置某一列 columnResizable: false 来取消伸缩该列。\n * en - Fixed head\n *    -- Set the columnResizable property to make all columns resizable. set columnResizable: false on columns item to cancel resizable.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(20);\nconst columns = [\n    { title: 'id', render: 'id', fixed: 'left', maxWidth: 300, minWidth: 100 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst App = () => (<Table columnResizable height={300} width={1200} fixed=\"both\" keygen=\"id\" columns={columns} bordered data={data}/>);\nexport default App;\n"},1636:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(100),l=[{title:"id",render:"id",width:50},{type:"row-expand",render:function(e){if(!(e.salary<3e5))return function(){return a.a.createElement("div",{style:{padding:"10px 30px",wordBreak:"break-all"}},JSON.stringify(e))}}},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];n.default=function(){return a.a.createElement(i.a,{fixed:"y",keygen:"id",data:s,columns:l,style:{height:300},onRowClick:function(e,n){return console.log(e,n)}})}},1637:function(e,n){e.exports="/**\n * cn - 可展开\n *    -- 需要展开行时，可以增加一个 type 为 'expand' 的 column，render 函数返回函数时，表示此行可以展开，内容为此函数返回结果\n * en - Expand\n *    -- Add a column with type 'expand' and the render function returns a function, that means the row can be expanded. The content is the result returned by this function.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(100)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  {\n    type: 'row-expand',\n    render: d => {\n      if (d.salary < 300000) return undefined\n      return () => <div style={{ padding: '10px 30px', wordBreak: 'break-all' }}>{JSON.stringify(d)}</div>\n    },\n  },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst App: React.FC = () => (\n  <Table\n    fixed=\"y\"\n    keygen=\"id\"\n    data={data}\n    columns={columns}\n    style={{ height: 300 }}\n    onRowClick={(d, i) => console.log(d, i)}\n  />\n)\n\nexport default App\n"},1638:function(e,n){e.exports="/**\n * cn - 可展开\n *    -- 需要展开行时，可以增加一个 type 为 'expand' 的 column，render 函数返回函数时，表示此行可以展开，内容为此函数返回结果\n * en - Expand\n *    -- Add a column with type 'expand' and the render function returns a function, that means the row can be expanded. The content is the result returned by this function.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(100);\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    {\n        type: 'row-expand',\n        render: d => {\n            if (d.salary < 300000)\n                return undefined;\n            return () => <div style={{ padding: '10px 30px', wordBreak: 'break-all' }}>{JSON.stringify(d)}</div>;\n        },\n    },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst App = () => (<Table fixed=\"y\" keygen=\"id\" data={data} columns={columns} style={{ height: 300 }} onRowClick={(d, i) => console.log(d, i)}/>);\nexport default App;\n"},1639:function(e,n,t){"use strict";t.r(n);var i=t(27),o=t(24),s=t(0),l=t.n(s),d=t(301),c=t(316),r=t(565),u=Object(r.b)(5);n.default=function(){var e=Object(s.useState)([1]),n=Object(o.a)(e,2),t=n[0],r=n[1],a=[{title:"id",render:"id",width:50},{type:"expand",onClick:function(n,e){r(e?[].concat(Object(i.a)(t),[n.id]):t.filter(function(e){return e!==n.id}))},render:function(e){if(!(5<e.id))return function(){return l.a.createElement("div",{style:{padding:"10px 30px",wordBreak:"break-all"}},JSON.stringify(e))}}},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];return l.a.createElement("div",null,l.a.createElement(d.a.Group,{keygen:"id",value:t,onChange:r},[1,2,3,4,5].map(function(e){return l.a.createElement(d.a,{key:e,htmlValue:e},"展开第 ".concat(e," 行"))})),l.a.createElement(c.a,{fixed:"y",expandKeys:t,data:u,keygen:"id",style:{height:300},columns:a}))}},1640:function(e,n){e.exports="/**\n * cn -\n *    -- 受控,当传入一个expandKeys时,展开会变成受控的,需要自行在column里面的onClick去处理\n * en -\n *    -- When an expandKeys is provided, the expansion becomes controlled and needs to be processed by the onClick in the column.\n */\nimport React, { useState } from 'react'\nimport { Table, Checkbox, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(5)\n\nconst App: React.FC = () => {\n  const [expandKeys, setExpandKeys] = useState([1])\n\n  const columns: TableColumnItem[] = [\n    { title: 'id', render: 'id', width: 50 },\n    {\n      type: 'expand',\n      onClick: (d, isExpand) => {\n        if (isExpand) setExpandKeys([...expandKeys, d.id])\n        else setExpandKeys(expandKeys.filter(k => k !== d.id))\n      },\n      render: d => {\n        if (d.id > 5) return undefined\n        return () => <div style={{ padding: '10px 30px', wordBreak: 'break-all' }}>{JSON.stringify(d)}</div>\n      },\n    },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n      title: 'Salary',\n      render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n  ]\n\n  return (\n    <div>\n      <Checkbox.Group keygen=\"id\" value={expandKeys} onChange={setExpandKeys}>\n        {[1, 2, 3, 4, 5].map(d => (\n          <Checkbox key={d} htmlValue={d}>{`展开第 ${d} 行`}</Checkbox>\n        ))}\n      </Checkbox.Group>\n\n      <Table fixed=\"y\" expandKeys={expandKeys} data={data} keygen=\"id\" style={{ height: 300 }} columns={columns} />\n    </div>\n  )\n}\n\nexport default App\n"},1641:function(e,n){e.exports="/**\n * cn -\n *    -- 受控,当传入一个expandKeys时,展开会变成受控的,需要自行在column里面的onClick去处理\n * en -\n *    -- When an expandKeys is provided, the expansion becomes controlled and needs to be processed by the onClick in the column.\n */\nimport React, { useState } from 'react';\nimport { Table, Checkbox } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(5);\nconst App = () => {\n    const [expandKeys, setExpandKeys] = useState([1]);\n    const columns = [\n        { title: 'id', render: 'id', width: 50 },\n        {\n            type: 'expand',\n            onClick: (d, isExpand) => {\n                if (isExpand)\n                    setExpandKeys([...expandKeys, d.id]);\n                else\n                    setExpandKeys(expandKeys.filter(k => k !== d.id));\n            },\n            render: d => {\n                if (d.id > 5)\n                    return undefined;\n                return () => <div style={{ padding: '10px 30px', wordBreak: 'break-all' }}>{JSON.stringify(d)}</div>;\n            },\n        },\n        { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n        { title: 'Office', render: 'office' },\n        { title: 'Start Date', render: 'start' },\n        {\n            title: 'Salary',\n            render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n        },\n    ];\n    return (<div>\n      <Checkbox.Group keygen=\"id\" value={expandKeys} onChange={setExpandKeys}>\n        {[1, 2, 3, 4, 5].map(d => (<Checkbox key={d} htmlValue={d}>{`展开第 ${d} 行`}</Checkbox>))}\n      </Checkbox.Group>\n\n      <Table fixed=\"y\" expandKeys={expandKeys} data={data} keygen=\"id\" style={{ height: 300 }} columns={columns}/>\n    </div>);\n};\nexport default App;\n"},1642:function(e,n,t){"use strict";t.r(n);var d=t(24),c=t(0),u=t.n(c),m=t(255),f=t(127),p=t(316),r=t(565),h=Object(r.b)(1e4),g=[{title:"id",render:"id",width:80},{title:"Name",fixed:"left",render:function(e){return u.a.createElement("div",{id:"name_".concat(e.id),style:{height:e.height}},"".concat(e.firstName," ").concat(e.lastName))},width:160},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start",width:140}];n.default=function(){var e=Object(c.useState)(),n=Object(d.a)(e,2),t=n[0],r=n[1],a=Object(c.useState)({index:25}),i=Object(d.a)(a,2),o=i[0],s=i[1],l=function(){t&&t.scrollToIndex(o.index-1,function(){var e=document.querySelector("#name_".concat(o.index));e&&(e.style.color="red")})};return Object(c.useEffect)(function(){setTimeout(l)},[o]),u.a.createElement("div",null,u.a.createElement(m.a,{value:o,inline:!0,onSubmit:function(e){var n=e.index;s({index:n})}},u.a.createElement(f.a.Number,{min:1,max:1e4,width:100,name:"index"}),u.a.createElement(m.a.Submit,null,"Scroll")),u.a.createElement(p.a,{keygen:"id",data:h,fixed:"both",width:1400,rowHeight:80,rowsInView:10,columns:g,style:{height:600},tableRef:function(e){return r(e)}}))}},1643:function(e,n){e.exports="/**\n * cn - 滚动\n *    -- 固定表头的表格提供了一个 scrollToIndex 方法滚动到指定行，因为非固定行高的原因，滚动到未渲染过的行有一定偏差，请谨慎使用。\n * en - scrollToIndex\n *    -- The table of the fixed header provides a scrollToIndex method to scroll to the specified line. Because of the row height is not fixed, scrolling to the unrendered line has a little deviation. Please use it with caution.\n */\nimport React, { useState, useEffect } from 'react'\nimport { Input, Table, Form, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(10000)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 80 },\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: d => (\n      <div id={`name_${d.id}`} style={{ height: d.height }}>\n        {`${d.firstName} ${d.lastName}`}\n      </div>\n    ),\n    width: 160,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start', width: 140 },\n]\n\nconst App: React.FC = () => {\n  const [table, setTable] = useState<any>()\n\n  const [state, setState] = useState({\n    index: 25,\n  })\n\n  const handleScroll = () => {\n    if (table)\n      table.scrollToIndex(state.index - 1, () => {\n        const el: HTMLElement = document.querySelector(`#name_${state.index}`)!\n        if (el) {\n          el.style.color = 'red'\n        }\n      })\n  }\n\n  const handleIndexChange = ({ index }: { index: number }) => {\n    setState({ index })\n  }\n\n  useEffect(\n    () => {\n      setTimeout(handleScroll)\n    },\n    [state]\n  )\n\n  return (\n    <div>\n      <Form value={state} inline onSubmit={handleIndexChange}>\n        <Input.Number min={1} max={10000} width={100} name=\"index\" />\n        <Form.Submit>Scroll</Form.Submit>\n      </Form>\n\n      <Table\n        keygen=\"id\"\n        data={data}\n        fixed=\"both\"\n        width={1400}\n        rowHeight={80}\n        rowsInView={10}\n        columns={columns}\n        style={{ height: 600 }}\n        tableRef={t => setTable(t)}\n      />\n    </div>\n  )\n}\n\nexport default App\n"},1644:function(e,n){e.exports="/**\n * cn - 滚动\n *    -- 固定表头的表格提供了一个 scrollToIndex 方法滚动到指定行，因为非固定行高的原因，滚动到未渲染过的行有一定偏差，请谨慎使用。\n * en - scrollToIndex\n *    -- The table of the fixed header provides a scrollToIndex method to scroll to the specified line. Because of the row height is not fixed, scrolling to the unrendered line has a little deviation. Please use it with caution.\n */\nimport React, { useState, useEffect } from 'react';\nimport { Input, Table, Form } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(10000);\nconst columns = [\n    { title: 'id', render: 'id', width: 80 },\n    {\n        title: 'Name',\n        fixed: 'left',\n        render: d => (<div id={`name_${d.id}`} style={{ height: d.height }}>\n        {`${d.firstName} ${d.lastName}`}\n      </div>),\n        width: 160,\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start', width: 140 },\n];\nconst App = () => {\n    const [table, setTable] = useState();\n    const [state, setState] = useState({\n        index: 25,\n    });\n    const handleScroll = () => {\n        if (table)\n            table.scrollToIndex(state.index - 1, () => {\n                const el = document.querySelector(`#name_${state.index}`);\n                if (el) {\n                    el.style.color = 'red';\n                }\n            });\n    };\n    const handleIndexChange = ({ index }) => {\n        setState({ index });\n    };\n    useEffect(() => {\n        setTimeout(handleScroll);\n    }, [state]);\n    return (<div>\n      <Form value={state} inline onSubmit={handleIndexChange}>\n        <Input.Number min={1} max={10000} width={100} name=\"index\"/>\n        <Form.Submit>Scroll</Form.Submit>\n      </Form>\n\n      <Table keygen=\"id\" data={data} fixed=\"both\" width={1400} rowHeight={80} rowsInView={10} columns={columns} style={{ height: 600 }} tableRef={t => setTable(t)}/>\n    </div>);\n};\nexport default App;\n"},1645:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(20),l=[{title:"id",render:"id",width:50,fixed:"left"},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}],d=function(e){return 2===e.id?"table-bg-danger":3===e.id?"table-bg-success":void 0};n.default=function(){return a.a.createElement(i.a,{fixed:"both",keygen:"id",width:1500,height:300,columns:l,data:s,rowClassName:d})}},1646:function(e,n){e.exports="/**\n * cn - 行样式\n *    -- 通过 rowClassName 设置单行样式（使用了 rowClassName 必须给 td 指定背景色）\n * en - Row ClassName\n *    -- Set the rowClassName property to set row style. (You must specify td background-color when the rowClassName is set)\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData[]>\ntype TableRowClassName = TableProps['rowClassName']\n\nconst data: TableRowData[] = fetchSync(20)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50, fixed: 'left' },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst rowClassName: TableRowClassName = d => {\n  if (d.id === 2) return 'table-bg-danger'\n  if (d.id === 3) return 'table-bg-success'\n  return undefined\n}\n\nconst App: React.FC = () => (\n  <Table fixed=\"both\" keygen=\"id\" width={1500} height={300} columns={columns} data={data} rowClassName={rowClassName} />\n)\n\nexport default App\n"},1647:function(e,n){e.exports="/**\n * cn - 行样式\n *    -- 通过 rowClassName 设置单行样式（使用了 rowClassName 必须给 td 指定背景色）\n * en - Row ClassName\n *    -- Set the rowClassName property to set row style. (You must specify td background-color when the rowClassName is set)\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(20);\nconst columns = [\n    { title: 'id', render: 'id', width: 50, fixed: 'left' },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst rowClassName = d => {\n    if (d.id === 2)\n        return 'table-bg-danger';\n    if (d.id === 3)\n        return 'table-bg-success';\n    return undefined;\n};\nconst App = () => (<Table fixed=\"both\" keygen=\"id\" width={1500} height={300} columns={columns} data={data} rowClassName={rowClassName}/>);\nexport default App;\n"},1648:function(e,n,t){"use strict";t.r(n);var l=t(24),d=t(0),c=t.n(d),r=t(68),u=t(316),m=t(200),a=t(565),f=Object(a.b)(4),p=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Operation",render:function(){return c.a.createElement("span",null,c.a.createElement(r.a,{"data-info":!0,size:"small"},"info")," ",c.a.createElement(r.a,{"data-call":!0,type:"primary",size:"small"},"call"))}}];n.default=function(){var e=Object(d.useState)(0),n=Object(l.a)(e,2),t=n[0],r=n[1],a=Object(d.useState)(["*"]),i=Object(l.a)(a,2),o=i[0],s=i[1];return c.a.createElement("div",null,c.a.createElement(u.a,{rowClickAttr:o,onRowClick:function(){return r(t+1)},keygen:"id",columns:p,data:f}),"Select rowClickAttr：",c.a.createElement(m.a,{keygen:!0,multiple:!0,value:o,onChange:function(e){return s(e)},placeholder:"select rowClickAttr",data:["data-info","data-call","*"],style:{width:"300px",margin:"0 0 10px 10px"}}),c.a.createElement("div",null,c.a.createElement("span",null,"onRowClick call count： "),c.a.createElement("strong",null,t)))}},1649:function(e,n){e.exports="/**\n * cn - 行内元素点击\n *    -- 设置rowClickAttr，可以使行内元素的点击事件触发onRowClick\n * en - Base\n *    -- Set the rowClickAttr to trigger an onRowClick event for an element.\n */\nimport React, { useState } from 'react'\nimport { Table, Select, Button, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst dataList = fetchSync(4)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  {\n    title: 'Operation',\n    render: () => (\n      <span>\n        <Button data-info size=\"small\">\n          info\n        </Button>\n        &nbsp;\n        <Button data-call type=\"primary\" size=\"small\">\n          call\n        </Button>\n      </span>\n    ),\n  },\n]\n\nconst App: React.FC = () => {\n  const [count, setCount] = useState(0)\n  const [attrs, setAttrs] = useState(['*'])\n\n  const handleClick = () => setCount(count + 1)\n\n  const handleChange = (v: string[]) => setAttrs(v)\n\n  return (\n    <div>\n      <Table rowClickAttr={attrs} onRowClick={handleClick} keygen=\"id\" columns={columns} data={dataList} />\n      Select rowClickAttr：\n      <Select\n        keygen\n        multiple\n        value={attrs}\n        onChange={handleChange}\n        placeholder=\"select rowClickAttr\"\n        data={['data-info', 'data-call', '*']}\n        style={{ width: '300px', margin: '0 0 10px 10px' }}\n      />\n      <div>\n        <span>onRowClick call count： </span>\n        <strong>{count}</strong>\n      </div>\n    </div>\n  )\n}\nexport default App\n"},1650:function(e,n){e.exports="/**\n * cn - 行内元素点击\n *    -- 设置rowClickAttr，可以使行内元素的点击事件触发onRowClick\n * en - Base\n *    -- Set the rowClickAttr to trigger an onRowClick event for an element.\n */\nimport React, { useState } from 'react';\nimport { Table, Select, Button } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst dataList = fetchSync(4);\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    {\n        title: 'Operation',\n        render: () => (<span>\n        <Button data-info size=\"small\">\n          info\n        </Button>\n        &nbsp;\n        <Button data-call type=\"primary\" size=\"small\">\n          call\n        </Button>\n      </span>),\n    },\n];\nconst App = () => {\n    const [count, setCount] = useState(0);\n    const [attrs, setAttrs] = useState(['*']);\n    const handleClick = () => setCount(count + 1);\n    const handleChange = (v) => setAttrs(v);\n    return (<div>\n      <Table rowClickAttr={attrs} onRowClick={handleClick} keygen=\"id\" columns={columns} data={dataList}/>\n      Select rowClickAttr：\n      <Select keygen multiple value={attrs} onChange={handleChange} placeholder=\"select rowClickAttr\" data={['data-info', 'data-call', '*']} style={{ width: '300px', margin: '0 0 10px 10px' }}/>\n      <div>\n        <span>onRowClick call count： </span>\n        <strong>{count}</strong>\n      </div>\n    </div>);\n};\nexport default App;\n"},1651:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=[{id:1,firstName:"Ephraim",lastName:"Wisozk",position:"Marketing Designer",country:"Reunion",office:"Miami",children:[{id:6,firstName:"Ialu",lastName:"Opis",position:"Finalick Designer",country:"Tokiy",office:"Miami",children:[{id:3,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",country:"Peru",office:"Boston",children:[{id:10,firstName:"Danil",lastName:"Forun",position:"Development Lead",country:"Deini",office:"Conty"}]}]},{id:7,firstName:"Foak",lastName:"Resilt",position:"Dcaoko Designer",country:"Moran",office:"Korosal"},{id:8,firstName:"Jest",lastName:"Rokio",position:"Fmaiil Mail",country:"Moran",office:"Ticko",children:[{id:9,firstName:"Domo",lastName:"Wang",position:"Ameri Kich",country:"Moran",office:"Fiour"}]}]},{id:2,firstName:"Osvaldo",lastName:"Beer",position:"Financial Controller",country:"Syrian Arab Republic",office:"San Paulo"},{id:11,firstName:"Shaniya",lastName:"Jacobs",position:"Developer",country:"Peru",office:"Chengdu",children:[{id:12,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",country:"Peru",office:"Boston"}]},{id:13,firstName:"Wolo",lastName:"Casho",position:"Developer",country:"Franch",office:"Jiangsu"},{id:14,firstName:"Lou",lastName:"Woch",position:"Befined",country:"China",office:"Beijing",children:[{id:15,firstName:"Oos",lastName:"Wargen",position:"UX Designer",country:"Upck",office:"Andwarea"}]},{id:16,firstName:"Endted",lastName:"Wang",position:"Ameri Kich",country:"Moran",office:"Fiour",children:[{id:17,firstName:"Oos",lastName:"Wargen",position:"UX Designer",country:"Upck",office:"Andwarea"}]},{id:18,firstName:"Danil",lastName:"Forun",position:"Development Lead",country:"Deini",office:"Conty"}],s=[{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:300,treeColumnsName:"children"},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"}];n.default=function(){return a.a.createElement(i.a,{bordered:!0,fixed:"y",height:300,keygen:"id",columns:s,data:o})}},1652:function(e,n){e.exports="/**\n * cn - 树形数据\n *    -- 支持树形数据的展示，通过 columns.treeColumnsName 指定子数据字段名，同时在该列自动添加 展开/收起 按钮。\\n 通过 columns.treeIndent 指定每一层缩进宽度。\\n 备注：当展开列内容过长时，单元格会自动换行。可以通过 width 设定足够的长度来避免。\n * en - Tree Data\n *    -- Support Tree Data.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\n\ninterface TableRowData {\n  id: number\n  office: string\n  country: string\n  position: string\n  lastName: string\n  firstName: string\n  children?: TableRowData[]\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    country: 'Reunion',\n    office: 'Miami',\n    children: [\n      {\n        id: 6,\n        firstName: 'Ialu',\n        lastName: 'Opis',\n        position: 'Finalick Designer',\n        country: 'Tokiy',\n        office: 'Miami',\n        children: [\n          {\n            id: 3,\n            firstName: 'Dylan',\n            lastName: 'Ratke',\n            position: 'Development Lead',\n            country: 'Peru',\n            office: 'Boston',\n            children: [\n              {\n                id: 10,\n                firstName: 'Danil',\n                lastName: 'Forun',\n                position: 'Development Lead',\n                country: 'Deini',\n                office: 'Conty',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 7,\n        firstName: 'Foak',\n        lastName: 'Resilt',\n        position: 'Dcaoko Designer',\n        country: 'Moran',\n        office: 'Korosal',\n      },\n      {\n        id: 8,\n        firstName: 'Jest',\n        lastName: 'Rokio',\n        position: 'Fmaiil Mail',\n        country: 'Moran',\n        office: 'Ticko',\n        children: [\n          {\n            id: 9,\n            firstName: 'Domo',\n            lastName: 'Wang',\n            position: 'Ameri Kich',\n            country: 'Moran',\n            office: 'Fiour',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n  },\n  {\n    id: 11,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    country: 'Peru',\n    office: 'Chengdu',\n    children: [\n      {\n        id: 12,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        country: 'Peru',\n        office: 'Boston',\n      },\n    ],\n  },\n  {\n    id: 13,\n    firstName: 'Wolo',\n    lastName: 'Casho',\n    position: 'Developer',\n    country: 'Franch',\n    office: 'Jiangsu',\n  },\n  {\n    id: 14,\n    firstName: 'Lou',\n    lastName: 'Woch',\n    position: 'Befined',\n    country: 'China',\n    office: 'Beijing',\n    children: [\n      {\n        id: 15,\n        firstName: 'Oos',\n        lastName: 'Wargen',\n        position: 'UX Designer',\n        country: 'Upck',\n        office: 'Andwarea',\n      },\n    ],\n  },\n  {\n    id: 16,\n    firstName: 'Endted',\n    lastName: 'Wang',\n    position: 'Ameri Kich',\n    country: 'Moran',\n    office: 'Fiour',\n    children: [\n      {\n        id: 17,\n        firstName: 'Oos',\n        lastName: 'Wargen',\n        position: 'UX Designer',\n        country: 'Upck',\n        office: 'Andwarea',\n      },\n    ],\n  },\n  {\n    id: 18,\n    firstName: 'Danil',\n    lastName: 'Forun',\n    position: 'Development Lead',\n    country: 'Deini',\n    office: 'Conty',\n  },\n]\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 300, treeColumnsName: 'children' },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => <Table bordered fixed=\"y\" height={300} keygen=\"id\" columns={columns} data={data} />\n\nexport default App\n"},1653:function(e,n){e.exports="/**\n * cn - 树形数据\n *    -- 支持树形数据的展示，通过 columns.treeColumnsName 指定子数据字段名，同时在该列自动添加 展开/收起 按钮。\\n 通过 columns.treeIndent 指定每一层缩进宽度。\\n 备注：当展开列内容过长时，单元格会自动换行。可以通过 width 设定足够的长度来避免。\n * en - Tree Data\n *    -- Support Tree Data.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nconst data = [\n    {\n        id: 1,\n        firstName: 'Ephraim',\n        lastName: 'Wisozk',\n        position: 'Marketing Designer',\n        country: 'Reunion',\n        office: 'Miami',\n        children: [\n            {\n                id: 6,\n                firstName: 'Ialu',\n                lastName: 'Opis',\n                position: 'Finalick Designer',\n                country: 'Tokiy',\n                office: 'Miami',\n                children: [\n                    {\n                        id: 3,\n                        firstName: 'Dylan',\n                        lastName: 'Ratke',\n                        position: 'Development Lead',\n                        country: 'Peru',\n                        office: 'Boston',\n                        children: [\n                            {\n                                id: 10,\n                                firstName: 'Danil',\n                                lastName: 'Forun',\n                                position: 'Development Lead',\n                                country: 'Deini',\n                                office: 'Conty',\n                            },\n                        ],\n                    },\n                ],\n            },\n            {\n                id: 7,\n                firstName: 'Foak',\n                lastName: 'Resilt',\n                position: 'Dcaoko Designer',\n                country: 'Moran',\n                office: 'Korosal',\n            },\n            {\n                id: 8,\n                firstName: 'Jest',\n                lastName: 'Rokio',\n                position: 'Fmaiil Mail',\n                country: 'Moran',\n                office: 'Ticko',\n                children: [\n                    {\n                        id: 9,\n                        firstName: 'Domo',\n                        lastName: 'Wang',\n                        position: 'Ameri Kich',\n                        country: 'Moran',\n                        office: 'Fiour',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        id: 2,\n        firstName: 'Osvaldo',\n        lastName: 'Beer',\n        position: 'Financial Controller',\n        country: 'Syrian Arab Republic',\n        office: 'San Paulo',\n    },\n    {\n        id: 11,\n        firstName: 'Shaniya',\n        lastName: 'Jacobs',\n        position: 'Developer',\n        country: 'Peru',\n        office: 'Chengdu',\n        children: [\n            {\n                id: 12,\n                firstName: 'Dylan',\n                lastName: 'Ratke',\n                position: 'Development Lead',\n                country: 'Peru',\n                office: 'Boston',\n            },\n        ],\n    },\n    {\n        id: 13,\n        firstName: 'Wolo',\n        lastName: 'Casho',\n        position: 'Developer',\n        country: 'Franch',\n        office: 'Jiangsu',\n    },\n    {\n        id: 14,\n        firstName: 'Lou',\n        lastName: 'Woch',\n        position: 'Befined',\n        country: 'China',\n        office: 'Beijing',\n        children: [\n            {\n                id: 15,\n                firstName: 'Oos',\n                lastName: 'Wargen',\n                position: 'UX Designer',\n                country: 'Upck',\n                office: 'Andwarea',\n            },\n        ],\n    },\n    {\n        id: 16,\n        firstName: 'Endted',\n        lastName: 'Wang',\n        position: 'Ameri Kich',\n        country: 'Moran',\n        office: 'Fiour',\n        children: [\n            {\n                id: 17,\n                firstName: 'Oos',\n                lastName: 'Wargen',\n                position: 'UX Designer',\n                country: 'Upck',\n                office: 'Andwarea',\n            },\n        ],\n    },\n    {\n        id: 18,\n        firstName: 'Danil',\n        lastName: 'Forun',\n        position: 'Development Lead',\n        country: 'Deini',\n        office: 'Conty',\n    },\n];\nconst columns = [\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 300, treeColumnsName: 'children' },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => <Table bordered fixed=\"y\" height={300} keygen=\"id\" columns={columns} data={data}/>;\nexport default App;\n"},1654:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=[{id:1,firstName:"Ephraim",lastName:"Wisozk",position:"Marketing Designer",country:"Reunion",office:"Miami",children:[{id:6,firstName:"Ialu",lastName:"Opis",position:"Finalick Designer",country:"Tokiy",office:"Miami",children:[{id:3,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",country:"Peru",office:"Boston",children:[{id:10,firstName:"Danil",lastName:"Forun",position:"Development Lead",country:"Deini",office:"Conty"}]}]},{id:7,firstName:"Foak",lastName:"Resilt",position:"Dcaoko Designer",country:"Moran",office:"Korosal"},{id:8,firstName:"Jest",lastName:"Rokio",position:"Fmaiil Mail",country:"Moran",office:"Ticko",children:[{id:9,firstName:"Domo",lastName:"Wang",position:"Ameri Kich",country:"Moran",office:"Fiour"}]}]},{id:2,firstName:"Osvaldo",lastName:"Beer",position:"Financial Controller",country:"Syrian Arab Republic",office:"San Paulo"},{id:11,firstName:"Shaniya",lastName:"Jacobs",position:"Developer",country:"Peru",office:"Chengdu",children:[{id:12,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",country:"Peru",office:"Boston"}]}],s=[{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:300,treeColumnsName:"children"},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"}];n.default=function(){return a.a.createElement(i.a,{bordered:!0,fixed:"y",keygen:"id",format:"id",data:o,treeCheckAll:!0,columns:s,onRowSelect:function(e){return console.log(e)}})}},1655:function(e,n){e.exports="/**\n * cn -\n *    -- 设置 treeCheckAll, 支持递归选择子数据\n * en -\n *    -- Set treeCheckAll to deep check children\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\n\ninterface TableRowData {\n  id: number\n  office: string\n  country: string\n  position: string\n  lastName: string\n  firstName: string\n  children?: TableRowData[]\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    country: 'Reunion',\n    office: 'Miami',\n    children: [\n      {\n        id: 6,\n        firstName: 'Ialu',\n        lastName: 'Opis',\n        position: 'Finalick Designer',\n        country: 'Tokiy',\n        office: 'Miami',\n        children: [\n          {\n            id: 3,\n            firstName: 'Dylan',\n            lastName: 'Ratke',\n            position: 'Development Lead',\n            country: 'Peru',\n            office: 'Boston',\n            children: [\n              {\n                id: 10,\n                firstName: 'Danil',\n                lastName: 'Forun',\n                position: 'Development Lead',\n                country: 'Deini',\n                office: 'Conty',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 7,\n        firstName: 'Foak',\n        lastName: 'Resilt',\n        position: 'Dcaoko Designer',\n        country: 'Moran',\n        office: 'Korosal',\n      },\n      {\n        id: 8,\n        firstName: 'Jest',\n        lastName: 'Rokio',\n        position: 'Fmaiil Mail',\n        country: 'Moran',\n        office: 'Ticko',\n        children: [\n          {\n            id: 9,\n            firstName: 'Domo',\n            lastName: 'Wang',\n            position: 'Ameri Kich',\n            country: 'Moran',\n            office: 'Fiour',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n  },\n  {\n    id: 11,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    country: 'Peru',\n    office: 'Chengdu',\n    children: [\n      {\n        id: 12,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        country: 'Peru',\n        office: 'Boston',\n      },\n    ],\n  },\n]\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 300, treeColumnsName: 'children' },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => (\n  <Table\n    bordered\n    fixed=\"y\"\n    keygen=\"id\"\n    format=\"id\"\n    data={data}\n    treeCheckAll\n    columns={columns}\n    onRowSelect={selected => console.log(selected)}\n  />\n)\n\nexport default App\n"},1656:function(e,n){e.exports="/**\n * cn -\n *    -- 设置 treeCheckAll, 支持递归选择子数据\n * en -\n *    -- Set treeCheckAll to deep check children\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nconst data = [\n    {\n        id: 1,\n        firstName: 'Ephraim',\n        lastName: 'Wisozk',\n        position: 'Marketing Designer',\n        country: 'Reunion',\n        office: 'Miami',\n        children: [\n            {\n                id: 6,\n                firstName: 'Ialu',\n                lastName: 'Opis',\n                position: 'Finalick Designer',\n                country: 'Tokiy',\n                office: 'Miami',\n                children: [\n                    {\n                        id: 3,\n                        firstName: 'Dylan',\n                        lastName: 'Ratke',\n                        position: 'Development Lead',\n                        country: 'Peru',\n                        office: 'Boston',\n                        children: [\n                            {\n                                id: 10,\n                                firstName: 'Danil',\n                                lastName: 'Forun',\n                                position: 'Development Lead',\n                                country: 'Deini',\n                                office: 'Conty',\n                            },\n                        ],\n                    },\n                ],\n            },\n            {\n                id: 7,\n                firstName: 'Foak',\n                lastName: 'Resilt',\n                position: 'Dcaoko Designer',\n                country: 'Moran',\n                office: 'Korosal',\n            },\n            {\n                id: 8,\n                firstName: 'Jest',\n                lastName: 'Rokio',\n                position: 'Fmaiil Mail',\n                country: 'Moran',\n                office: 'Ticko',\n                children: [\n                    {\n                        id: 9,\n                        firstName: 'Domo',\n                        lastName: 'Wang',\n                        position: 'Ameri Kich',\n                        country: 'Moran',\n                        office: 'Fiour',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        id: 2,\n        firstName: 'Osvaldo',\n        lastName: 'Beer',\n        position: 'Financial Controller',\n        country: 'Syrian Arab Republic',\n        office: 'San Paulo',\n    },\n    {\n        id: 11,\n        firstName: 'Shaniya',\n        lastName: 'Jacobs',\n        position: 'Developer',\n        country: 'Peru',\n        office: 'Chengdu',\n        children: [\n            {\n                id: 12,\n                firstName: 'Dylan',\n                lastName: 'Ratke',\n                position: 'Development Lead',\n                country: 'Peru',\n                office: 'Boston',\n            },\n        ],\n    },\n];\nconst columns = [\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 300, treeColumnsName: 'children' },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => (<Table bordered fixed=\"y\" keygen=\"id\" format=\"id\" data={data} treeCheckAll columns={columns} onRowSelect={selected => console.log(selected)}/>);\nexport default App;\n"},1657:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=[{id:1,firstName:"Ephraim",lastName:"Wisozk",position:"Marketing Designer",country:"Reunion",office:"Miami",children:[{id:6,firstName:"Ialu",lastName:"Opis",position:"Finalick Designer",country:"Tokiy",office:"Miami",children:[{id:3,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",country:"Peru",office:"Boston",children:[{id:10,firstName:"Danil",lastName:"Forun",position:"Development Lead",country:"Deini",office:"Conty"}]}]},{id:7,firstName:"Foak",lastName:"Resilt",position:"Dcaoko Designer",country:"Moran",office:"Korosal"},{id:8,firstName:"Jest",lastName:"Rokio",position:"Fmaiil Mail",country:"Moran",office:"Ticko",children:[{id:9,firstName:"Domo",lastName:"Wang",position:"Ameri Kich",country:"Moran",office:"Fiour"}]}]},{id:2,firstName:"Osvaldo",lastName:"Beer",position:"Financial Controller",country:"Syrian Arab Republic",office:"San Paulo"},{id:11,firstName:"Shaniya",lastName:"Jacobs",position:"Developer",country:"Peru",office:"Chengdu",children:[{id:12,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",country:"Peru",office:"Boston"}]},{id:13,firstName:"Wolo",lastName:"Casho",position:"Developer",country:"Franch",office:"Jiangsu"},{id:14,firstName:"Lou",lastName:"Woch",position:"Befined",country:"China",office:"Beijing",children:[{id:15,firstName:"Oos",lastName:"Wargen",position:"UX Designer",country:"Upck",office:"Andwarea"}]},{id:16,firstName:"Endted",lastName:"Wang",position:"Ameri Kich",country:"Moran",office:"Fiour",children:[{id:17,firstName:"Oos",lastName:"Wargen",position:"UX Designer",country:"Upck",office:"Andwarea"}]},{id:18,firstName:"Danil",lastName:"Forun",position:"Development Lead",country:"Deini",office:"Conty"}],s=[{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:300},{title:"Country",render:"country",treeColumnsName:"children"},{title:"Position",render:"position"},{title:"Office",render:"office"}];n.default=function(){return a.a.createElement(i.a,{bordered:!0,fixed:"y",height:300,keygen:"id",columns:s,data:o})}},1658:function(e,n){e.exports="/**\n * cn -\n *    -- 展开图标在其他列\n * en -\n *    --  expeng icon in other column\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\n\ninterface TableRowData {\n  id: number\n  office: string\n  country: string\n  position: string\n  lastName: string\n  firstName: string\n  children?: TableRowData[]\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    country: 'Reunion',\n    office: 'Miami',\n    children: [\n      {\n        id: 6,\n        firstName: 'Ialu',\n        lastName: 'Opis',\n        position: 'Finalick Designer',\n        country: 'Tokiy',\n        office: 'Miami',\n        children: [\n          {\n            id: 3,\n            firstName: 'Dylan',\n            lastName: 'Ratke',\n            position: 'Development Lead',\n            country: 'Peru',\n            office: 'Boston',\n            children: [\n              {\n                id: 10,\n                firstName: 'Danil',\n                lastName: 'Forun',\n                position: 'Development Lead',\n                country: 'Deini',\n                office: 'Conty',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 7,\n        firstName: 'Foak',\n        lastName: 'Resilt',\n        position: 'Dcaoko Designer',\n        country: 'Moran',\n        office: 'Korosal',\n      },\n      {\n        id: 8,\n        firstName: 'Jest',\n        lastName: 'Rokio',\n        position: 'Fmaiil Mail',\n        country: 'Moran',\n        office: 'Ticko',\n        children: [\n          {\n            id: 9,\n            firstName: 'Domo',\n            lastName: 'Wang',\n            position: 'Ameri Kich',\n            country: 'Moran',\n            office: 'Fiour',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n  },\n  {\n    id: 11,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    country: 'Peru',\n    office: 'Chengdu',\n    children: [\n      {\n        id: 12,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        country: 'Peru',\n        office: 'Boston',\n      },\n    ],\n  },\n  {\n    id: 13,\n    firstName: 'Wolo',\n    lastName: 'Casho',\n    position: 'Developer',\n    country: 'Franch',\n    office: 'Jiangsu',\n  },\n  {\n    id: 14,\n    firstName: 'Lou',\n    lastName: 'Woch',\n    position: 'Befined',\n    country: 'China',\n    office: 'Beijing',\n    children: [\n      {\n        id: 15,\n        firstName: 'Oos',\n        lastName: 'Wargen',\n        position: 'UX Designer',\n        country: 'Upck',\n        office: 'Andwarea',\n      },\n    ],\n  },\n  {\n    id: 16,\n    firstName: 'Endted',\n    lastName: 'Wang',\n    position: 'Ameri Kich',\n    country: 'Moran',\n    office: 'Fiour',\n    children: [\n      {\n        id: 17,\n        firstName: 'Oos',\n        lastName: 'Wargen',\n        position: 'UX Designer',\n        country: 'Upck',\n        office: 'Andwarea',\n      },\n    ],\n  },\n  {\n    id: 18,\n    firstName: 'Danil',\n    lastName: 'Forun',\n    position: 'Development Lead',\n    country: 'Deini',\n    office: 'Conty',\n  },\n]\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 300 },\n  { title: 'Country', render: 'country', treeColumnsName: 'children' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => <Table bordered fixed=\"y\" height={300} keygen=\"id\" columns={columns} data={data} />\n\nexport default App\n"},1659:function(e,n){e.exports="/**\n * cn -\n *    -- 展开图标在其他列\n * en -\n *    --  expeng icon in other column\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nconst data = [\n    {\n        id: 1,\n        firstName: 'Ephraim',\n        lastName: 'Wisozk',\n        position: 'Marketing Designer',\n        country: 'Reunion',\n        office: 'Miami',\n        children: [\n            {\n                id: 6,\n                firstName: 'Ialu',\n                lastName: 'Opis',\n                position: 'Finalick Designer',\n                country: 'Tokiy',\n                office: 'Miami',\n                children: [\n                    {\n                        id: 3,\n                        firstName: 'Dylan',\n                        lastName: 'Ratke',\n                        position: 'Development Lead',\n                        country: 'Peru',\n                        office: 'Boston',\n                        children: [\n                            {\n                                id: 10,\n                                firstName: 'Danil',\n                                lastName: 'Forun',\n                                position: 'Development Lead',\n                                country: 'Deini',\n                                office: 'Conty',\n                            },\n                        ],\n                    },\n                ],\n            },\n            {\n                id: 7,\n                firstName: 'Foak',\n                lastName: 'Resilt',\n                position: 'Dcaoko Designer',\n                country: 'Moran',\n                office: 'Korosal',\n            },\n            {\n                id: 8,\n                firstName: 'Jest',\n                lastName: 'Rokio',\n                position: 'Fmaiil Mail',\n                country: 'Moran',\n                office: 'Ticko',\n                children: [\n                    {\n                        id: 9,\n                        firstName: 'Domo',\n                        lastName: 'Wang',\n                        position: 'Ameri Kich',\n                        country: 'Moran',\n                        office: 'Fiour',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        id: 2,\n        firstName: 'Osvaldo',\n        lastName: 'Beer',\n        position: 'Financial Controller',\n        country: 'Syrian Arab Republic',\n        office: 'San Paulo',\n    },\n    {\n        id: 11,\n        firstName: 'Shaniya',\n        lastName: 'Jacobs',\n        position: 'Developer',\n        country: 'Peru',\n        office: 'Chengdu',\n        children: [\n            {\n                id: 12,\n                firstName: 'Dylan',\n                lastName: 'Ratke',\n                position: 'Development Lead',\n                country: 'Peru',\n                office: 'Boston',\n            },\n        ],\n    },\n    {\n        id: 13,\n        firstName: 'Wolo',\n        lastName: 'Casho',\n        position: 'Developer',\n        country: 'Franch',\n        office: 'Jiangsu',\n    },\n    {\n        id: 14,\n        firstName: 'Lou',\n        lastName: 'Woch',\n        position: 'Befined',\n        country: 'China',\n        office: 'Beijing',\n        children: [\n            {\n                id: 15,\n                firstName: 'Oos',\n                lastName: 'Wargen',\n                position: 'UX Designer',\n                country: 'Upck',\n                office: 'Andwarea',\n            },\n        ],\n    },\n    {\n        id: 16,\n        firstName: 'Endted',\n        lastName: 'Wang',\n        position: 'Ameri Kich',\n        country: 'Moran',\n        office: 'Fiour',\n        children: [\n            {\n                id: 17,\n                firstName: 'Oos',\n                lastName: 'Wargen',\n                position: 'UX Designer',\n                country: 'Upck',\n                office: 'Andwarea',\n            },\n        ],\n    },\n    {\n        id: 18,\n        firstName: 'Danil',\n        lastName: 'Forun',\n        position: 'Development Lead',\n        country: 'Deini',\n        office: 'Conty',\n    },\n];\nconst columns = [\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 300 },\n    { title: 'Country', render: 'country', treeColumnsName: 'children' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => <Table bordered fixed=\"y\" height={300} keygen=\"id\" columns={columns} data={data}/>;\nexport default App;\n"},1660:function(e,n,t){"use strict";t.r(n);var a=t(24),i=t(0),o=t.n(i),s=t(316),l=[{id:1,firstName:"Ephraim",lastName:"Wisozk",position:"Marketing Designer",country:"Reunion",office:"Miami",children:[{id:6,firstName:"Ialu",lastName:"Opis",position:"Finalick Designer",country:"Tokiy",office:"Miami",children:[{id:3,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",country:"Peru",office:"Boston",children:[{id:10,firstName:"Danil",lastName:"Forun",position:"Development Lead",country:"Deini",office:"Conty"}]}]},{id:7,firstName:"Foak",lastName:"Resilt",position:"Dcaoko Designer",country:"Moran",office:"Korosal"},{id:8,firstName:"Jest",lastName:"Rokio",position:"Fmaiil Mail",country:"Moran",office:"Ticko",children:[{id:9,firstName:"Domo",lastName:"Wang",position:"Ameri Kich",country:"Moran",office:"Fiour"}]}]},{id:2,firstName:"Osvaldo",lastName:"Beer",position:"Financial Controller",country:"Syrian Arab Republic",office:"San Paulo"},{id:11,firstName:"Shaniya",lastName:"Jacobs",position:"Developer",country:"Peru",office:"Chengdu",children:[{id:12,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",country:"Peru",office:"Boston"}]},{id:13,firstName:"Wolo",lastName:"Casho",position:"Developer",country:"Franch",office:"Jiangsu"},{id:14,firstName:"Lou",lastName:"Woch",position:"Befined",country:"China",office:"Beijing",children:[{id:15,firstName:"Oos",lastName:"Wargen",position:"UX Designer",country:"Upck",office:"Andwarea"}]},{id:16,firstName:"Endted",lastName:"Wang",position:"Ameri Kich",country:"Moran",office:"Fiour",children:[{id:17,firstName:"Oos",lastName:"Wargen",position:"UX Designer",country:"Upck",office:"Andwarea"}]},{id:18,firstName:"Danil",lastName:"Forun",position:"Development Lead",country:"Deini",office:"Conty"}],d=[{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:300,treeColumnsName:"children"},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"}];n.default=function(){var e=Object(i.useState)([]),n=Object(a.a)(e,2),t=n[0],r=n[1];return o.a.createElement(s.a,{bordered:!0,fixed:"y",keygen:"id",data:l,height:300,changedByExpand:!0,columns:d,treeExpandKeys:t,onTreeExpand:function(e){console.log(e),r(e)}})}},1661:function(e,n){e.exports="/**\n * cn -\n *    -- 使用 treeExpandKeys 和 onTreeExpand 使展开行受控\n *    -- 设置 changedByExpand 为 true 用来改变滚动条重置的默认行为\n * en -\n *    -- Use treeExpandKeys and onTreeExpand to control the expand row.\n *    -- Set changedByExpand to true to change the default behavior of scrollbar reset\n */\nimport React, { useState } from 'react'\nimport { Table, TYPE } from 'shineout'\n\ninterface TableRowData {\n  id: number\n  office: string\n  country: string\n  position: string\n  lastName: string\n  firstName: string\n  children?: TableRowData[]\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData>\ntype TableOnTreeExpand = TableProps['onTreeExpand']\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    country: 'Reunion',\n    office: 'Miami',\n    children: [\n      {\n        id: 6,\n        firstName: 'Ialu',\n        lastName: 'Opis',\n        position: 'Finalick Designer',\n        country: 'Tokiy',\n        office: 'Miami',\n        children: [\n          {\n            id: 3,\n            firstName: 'Dylan',\n            lastName: 'Ratke',\n            position: 'Development Lead',\n            country: 'Peru',\n            office: 'Boston',\n            children: [\n              {\n                id: 10,\n                firstName: 'Danil',\n                lastName: 'Forun',\n                position: 'Development Lead',\n                country: 'Deini',\n                office: 'Conty',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 7,\n        firstName: 'Foak',\n        lastName: 'Resilt',\n        position: 'Dcaoko Designer',\n        country: 'Moran',\n        office: 'Korosal',\n      },\n      {\n        id: 8,\n        firstName: 'Jest',\n        lastName: 'Rokio',\n        position: 'Fmaiil Mail',\n        country: 'Moran',\n        office: 'Ticko',\n        children: [\n          {\n            id: 9,\n            firstName: 'Domo',\n            lastName: 'Wang',\n            position: 'Ameri Kich',\n            country: 'Moran',\n            office: 'Fiour',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n  },\n  {\n    id: 11,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    country: 'Peru',\n    office: 'Chengdu',\n    children: [\n      {\n        id: 12,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        country: 'Peru',\n        office: 'Boston',\n      },\n    ],\n  },\n  {\n    id: 13,\n    firstName: 'Wolo',\n    lastName: 'Casho',\n    position: 'Developer',\n    country: 'Franch',\n    office: 'Jiangsu',\n  },\n  {\n    id: 14,\n    firstName: 'Lou',\n    lastName: 'Woch',\n    position: 'Befined',\n    country: 'China',\n    office: 'Beijing',\n    children: [\n      {\n        id: 15,\n        firstName: 'Oos',\n        lastName: 'Wargen',\n        position: 'UX Designer',\n        country: 'Upck',\n        office: 'Andwarea',\n      },\n    ],\n  },\n  {\n    id: 16,\n    firstName: 'Endted',\n    lastName: 'Wang',\n    position: 'Ameri Kich',\n    country: 'Moran',\n    office: 'Fiour',\n    children: [\n      {\n        id: 17,\n        firstName: 'Oos',\n        lastName: 'Wargen',\n        position: 'UX Designer',\n        country: 'Upck',\n        office: 'Andwarea',\n      },\n    ],\n  },\n  {\n    id: 18,\n    firstName: 'Danil',\n    lastName: 'Forun',\n    position: 'Development Lead',\n    country: 'Deini',\n    office: 'Conty',\n  },\n]\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 300, treeColumnsName: 'children' },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n]\n\nconst App: React.FC = () => {\n  const [expands, setExpands] = useState<(number | string)[]>([])\n\n  const handleExpand: TableOnTreeExpand = keys => {\n    console.log(keys)\n    setExpands(keys)\n  }\n\n  return (\n    <Table\n      bordered\n      fixed=\"y\"\n      keygen=\"id\"\n      data={data}\n      height={300}\n      changedByExpand\n      columns={columns}\n      treeExpandKeys={expands}\n      onTreeExpand={handleExpand}\n    />\n  )\n}\n\nexport default App\n"},1662:function(e,n){e.exports="/**\n * cn -\n *    -- 使用 treeExpandKeys 和 onTreeExpand 使展开行受控\n *    -- 设置 changedByExpand 为 true 用来改变滚动条重置的默认行为\n * en -\n *    -- Use treeExpandKeys and onTreeExpand to control the expand row.\n *    -- Set changedByExpand to true to change the default behavior of scrollbar reset\n */\nimport React, { useState } from 'react';\nimport { Table } from 'shineout';\nconst data = [\n    {\n        id: 1,\n        firstName: 'Ephraim',\n        lastName: 'Wisozk',\n        position: 'Marketing Designer',\n        country: 'Reunion',\n        office: 'Miami',\n        children: [\n            {\n                id: 6,\n                firstName: 'Ialu',\n                lastName: 'Opis',\n                position: 'Finalick Designer',\n                country: 'Tokiy',\n                office: 'Miami',\n                children: [\n                    {\n                        id: 3,\n                        firstName: 'Dylan',\n                        lastName: 'Ratke',\n                        position: 'Development Lead',\n                        country: 'Peru',\n                        office: 'Boston',\n                        children: [\n                            {\n                                id: 10,\n                                firstName: 'Danil',\n                                lastName: 'Forun',\n                                position: 'Development Lead',\n                                country: 'Deini',\n                                office: 'Conty',\n                            },\n                        ],\n                    },\n                ],\n            },\n            {\n                id: 7,\n                firstName: 'Foak',\n                lastName: 'Resilt',\n                position: 'Dcaoko Designer',\n                country: 'Moran',\n                office: 'Korosal',\n            },\n            {\n                id: 8,\n                firstName: 'Jest',\n                lastName: 'Rokio',\n                position: 'Fmaiil Mail',\n                country: 'Moran',\n                office: 'Ticko',\n                children: [\n                    {\n                        id: 9,\n                        firstName: 'Domo',\n                        lastName: 'Wang',\n                        position: 'Ameri Kich',\n                        country: 'Moran',\n                        office: 'Fiour',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        id: 2,\n        firstName: 'Osvaldo',\n        lastName: 'Beer',\n        position: 'Financial Controller',\n        country: 'Syrian Arab Republic',\n        office: 'San Paulo',\n    },\n    {\n        id: 11,\n        firstName: 'Shaniya',\n        lastName: 'Jacobs',\n        position: 'Developer',\n        country: 'Peru',\n        office: 'Chengdu',\n        children: [\n            {\n                id: 12,\n                firstName: 'Dylan',\n                lastName: 'Ratke',\n                position: 'Development Lead',\n                country: 'Peru',\n                office: 'Boston',\n            },\n        ],\n    },\n    {\n        id: 13,\n        firstName: 'Wolo',\n        lastName: 'Casho',\n        position: 'Developer',\n        country: 'Franch',\n        office: 'Jiangsu',\n    },\n    {\n        id: 14,\n        firstName: 'Lou',\n        lastName: 'Woch',\n        position: 'Befined',\n        country: 'China',\n        office: 'Beijing',\n        children: [\n            {\n                id: 15,\n                firstName: 'Oos',\n                lastName: 'Wargen',\n                position: 'UX Designer',\n                country: 'Upck',\n                office: 'Andwarea',\n            },\n        ],\n    },\n    {\n        id: 16,\n        firstName: 'Endted',\n        lastName: 'Wang',\n        position: 'Ameri Kich',\n        country: 'Moran',\n        office: 'Fiour',\n        children: [\n            {\n                id: 17,\n                firstName: 'Oos',\n                lastName: 'Wargen',\n                position: 'UX Designer',\n                country: 'Upck',\n                office: 'Andwarea',\n            },\n        ],\n    },\n    {\n        id: 18,\n        firstName: 'Danil',\n        lastName: 'Forun',\n        position: 'Development Lead',\n        country: 'Deini',\n        office: 'Conty',\n    },\n];\nconst columns = [\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}`, width: 300, treeColumnsName: 'children' },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n];\nconst App = () => {\n    const [expands, setExpands] = useState([]);\n    const handleExpand = keys => {\n        console.log(keys);\n        setExpands(keys);\n    };\n    return (<Table bordered fixed=\"y\" keygen=\"id\" data={data} height={300} changedByExpand columns={columns} treeExpandKeys={expands} onTreeExpand={handleExpand}/>);\n};\nexport default App;\n"},1663:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(1e3),l=[{title:"id",render:"id",width:80,sorter:function(t){return function(e,n){return"asc"===t?e.id-n.id:n.id-e.id}}},{title:"Name",fixed:"left",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)},width:160,sorter:function(t){return function(e,n){return"asc"===t?e.firstName.localeCompare(n.firstName):n.firstName.localeCompare(e.firstName)}}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"}];n.default=function(){return a.a.createElement(i.a,{striped:!0,keygen:"id",data:s,fixed:"both",width:1200,rowsInView:10,columns:l,style:{maxHeight:400}})}},1664:function(e,n){e.exports="/**\n * cn - 排序 (旧)\n *    -- 设置 column 的 sorter 属性标示此列需要排序\n *    -- sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序\n *    -- 后端或自行排序用户自行处理，sorter 函数不要返回结果\n * en - Sorter (Out of date)\n *    -- Set the sorter property of column to indicate that this column can be sorted.\n *    -- When the sorter returns a function, use this function to sort data internally.\n *    -- Server-side or self-sorting is is handled by the user, do not return results.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(1000)\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'id',\n    render: 'id',\n    width: 80,\n    sorter: order => (a, b) => {\n      if (order === 'asc') return a.id - b.id\n      return b.id - a.id\n    },\n  },\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: d => `${d.firstName} ${d.lastName}`,\n    width: 160,\n    sorter: order => (a, b) => {\n      if (order === 'asc') return a.firstName.localeCompare(b.firstName)\n      return b.firstName.localeCompare(a.firstName)\n    },\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n]\n\nconst App: React.FC = () => (\n  <Table\n    striped\n    keygen=\"id\"\n    data={data}\n    fixed=\"both\"\n    width={1200}\n    rowsInView={10}\n    columns={columns}\n    style={{ maxHeight: 400 }}\n  />\n)\n\nexport default App\n"},1665:function(e,n){e.exports="/**\n * cn - 排序 (旧)\n *    -- 设置 column 的 sorter 属性标示此列需要排序\n *    -- sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序\n *    -- 后端或自行排序用户自行处理，sorter 函数不要返回结果\n * en - Sorter (Out of date)\n *    -- Set the sorter property of column to indicate that this column can be sorted.\n *    -- When the sorter returns a function, use this function to sort data internally.\n *    -- Server-side or self-sorting is is handled by the user, do not return results.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(1000);\nconst columns = [\n    {\n        title: 'id',\n        render: 'id',\n        width: 80,\n        sorter: order => (a, b) => {\n            if (order === 'asc')\n                return a.id - b.id;\n            return b.id - a.id;\n        },\n    },\n    {\n        title: 'Name',\n        fixed: 'left',\n        render: d => `${d.firstName} ${d.lastName}`,\n        width: 160,\n        sorter: order => (a, b) => {\n            if (order === 'asc')\n                return a.firstName.localeCompare(b.firstName);\n            return b.firstName.localeCompare(a.firstName);\n        },\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n];\nconst App = () => (<Table striped keygen=\"id\" data={data} fixed=\"both\" width={1200} rowsInView={10} columns={columns} style={{ maxHeight: 400 }}/>);\nexport default App;\n"},1666:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(6);n.default=function(){return a.a.createElement(i.a,{striped:!0,keygen:"id"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Name"),a.a.createElement("th",null,"Office"),a.a.createElement("th",null,"Start Date"),a.a.createElement("th",null,"Salary"))),a.a.createElement("tbody",null,s.map(function(e){return a.a.createElement("tr",{key:e.id},a.a.createElement("td",null,"".concat(e.firstName," ").concat(e.lastName)),a.a.createElement("td",null,e.office),a.a.createElement("td",null,e.start),a.a.createElement("td",null,"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))))})))}},1667:function(e,n){e.exports="/**\n * cn - 只使用样式\n *    -- 使用原生的tr, td来显示表格\n * en - Style only\n *    -- Use the native tr and td to display the table.\n */\nimport React from 'react'\nimport { Table } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\nconst data: TableRowData[] = fetchSync(6)\n\nconst App: React.FC = () => (\n  <Table striped keygen=\"id\">\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Office</th>\n        <th>Start Date</th>\n        <th>Salary</th>\n      </tr>\n    </thead>\n    <tbody>\n      {data.map(d => (\n        <tr key={d.id}>\n          <td>{`${d.firstName} ${d.lastName}`}</td>\n          <td>{d.office}</td>\n          <td>{d.start}</td>\n          <td>{`$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`}</td>\n        </tr>\n      ))}\n    </tbody>\n  </Table>\n)\n\nexport default App\n"},1668:function(e,n){e.exports="/**\n * cn - 只使用样式\n *    -- 使用原生的tr, td来显示表格\n * en - Style only\n *    -- Use the native tr and td to display the table.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(6);\nconst App = () => (<Table striped keygen=\"id\">\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Office</th>\n        <th>Start Date</th>\n        <th>Salary</th>\n      </tr>\n    </thead>\n    <tbody>\n      {data.map(d => (<tr key={d.id}>\n          <td>{`${d.firstName} ${d.lastName}`}</td>\n          <td>{d.office}</td>\n          <td>{d.start}</td>\n          <td>{`$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`}</td>\n        </tr>))}\n    </tbody>\n  </Table>);\nexport default App;\n"},1669:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(20),l=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];n.default=function(){return a.a.createElement(i.a,{sticky:!0,data:s,columns:l,keygen:"id"})}},1670:function(e,n){e.exports="/**\n * cn - 表头附着\n *    -- 在滚屏场景下，可以设置 sticky 属性使表头附着顶部\n * en - Sticky Header\n *    -- Use the sticky attribute to sticky the header.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(20)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst App: React.FC = () => <Table sticky data={data} columns={columns} keygen=\"id\" />\n\nexport default App\n"},1671:function(e,n){e.exports="/**\n * cn - 表头附着\n *    -- 在滚屏场景下，可以设置 sticky 属性使表头附着顶部\n * en - Sticky Header\n *    -- Use the sticky attribute to sticky the header.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(20);\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst App = () => <Table sticky data={data} columns={columns} keygen=\"id\"/>;\nexport default App;\n"},1672:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=[{id:1,firstName:"Ephraim",lastName:"Wisozk",position:"Marketing Designer",start:"2012-01-29",time:"01:42",salary:115777,country:"Reunion",office:"Miami",office5:"Istanbul",height:113.74},{id:2,firstName:"Osvaldo",lastName:"Beer",position:"Financial Controller",start:"2007-09-04",time:"03:26",salary:396093,country:"Syrian Arab Republic",office:"San Paulo",office5:"Shenzhen",height:82.13},{id:3,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",start:"2009-10-16",time:"01:45",salary:236064,country:"Peru",office:"Boston",office5:"Delhi",height:179.53},{id:4,firstName:"Shaniya",lastName:"Jacobs",position:"Developer",start:"2014-06-30",time:"02:17",salary:338985,country:"Peru",office:"Chengdu",office5:"Dallas-Fort Worth",height:190.11}],s=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];n.default=function(){return a.a.createElement(i.a,{keygen:"id",width:1500,columns:s,data:o,cellSelectable:!0})}},1673:function(e,n){e.exports="/**\n * cn - 单元格选中\n *    -- 通过 cellSelectable 属性来启用 ctrl/cmd + click 选中单元格\n * en - Cell selectable\n *    -- whether to enable ctrl/cmd + click check.\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n]\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst App: React.FC = () => <Table keygen=\"id\" width={1500} columns={columns} data={data} cellSelectable />\n\nexport default App\n"},1674:function(e,n){e.exports="/**\n * cn - 单元格选中\n *    -- 通过 cellSelectable 属性来启用 ctrl/cmd + click 选中单元格\n * en - Cell selectable\n *    -- whether to enable ctrl/cmd + click check.\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nconst data = [\n    {\n        id: 1,\n        firstName: 'Ephraim',\n        lastName: 'Wisozk',\n        position: 'Marketing Designer',\n        start: '2012-01-29',\n        time: '01:42',\n        salary: 115777,\n        country: 'Reunion',\n        office: 'Miami',\n        office5: 'Istanbul',\n        height: 113.74,\n    },\n    {\n        id: 2,\n        firstName: 'Osvaldo',\n        lastName: 'Beer',\n        position: 'Financial Controller',\n        start: '2007-09-04',\n        time: '03:26',\n        salary: 396093,\n        country: 'Syrian Arab Republic',\n        office: 'San Paulo',\n        office5: 'Shenzhen',\n        height: 82.13,\n    },\n    {\n        id: 3,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        start: '2009-10-16',\n        time: '01:45',\n        salary: 236064,\n        country: 'Peru',\n        office: 'Boston',\n        office5: 'Delhi',\n        height: 179.53,\n    },\n    {\n        id: 4,\n        firstName: 'Shaniya',\n        lastName: 'Jacobs',\n        position: 'Developer',\n        start: '2014-06-30',\n        time: '02:17',\n        salary: 338985,\n        country: 'Peru',\n        office: 'Chengdu',\n        office5: 'Dallas-Fort Worth',\n        height: 190.11,\n    },\n];\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst App = () => <Table keygen=\"id\" width={1500} columns={columns} data={data} cellSelectable/>;\nexport default App;\n"},1675:function(e,n,t){"use strict";t.r(n);var p=t(27),h=t(24),g=t(0),b=t.n(g),y=t(316),N=[{id:1,firstName:"Ephraim",lastName:"Wisozk",position:"Marketing Designer",start:"2012-01-29",time:"01:42",salary:115777,country:"Reunion",office:"Miami",office5:"Istanbul",height:113.74},{id:2,firstName:"Osvaldo",lastName:"Beer",position:"Financial Controller",start:"2007-09-04",time:"03:26",salary:396093,country:"Syrian Arab Republic",office:"San Paulo",office5:"Shenzhen",height:82.13},{id:3,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",start:"2009-10-16",time:"01:45",salary:236064,country:"Peru",office:"Boston",office5:"Delhi",height:179.53},{id:4,firstName:"Shaniya",lastName:"Jacobs",position:"Developer",start:"2014-06-30",time:"02:17",salary:338985,country:"Peru",office:"Chengdu",office5:"Dallas-Fort Worth",height:190.11}],S=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}],T=function(e,n){for(var t=e;t.tagName!==n&&"BODY"!==t.tagName;)t=t.parentNode;return t},w=function(e){var n=T(e,"TBODY");return Array.prototype.slice.call(n.children).indexOf(e)};n.default=function(){var e=Object(g.useState)(N),n=Object(h.a)(e,2),o=n[0],s=n[1],t=Object(g.useState)(),r=Object(h.a)(t,2),a=r[0],i=r[1],l=Object(g.useRef)({current:{}}),d=Object(g.useCallback)(function(e){l.current.dragging||(l.current.dragging=!0,l.current.startIndex=w(e.target))},[]),c=Object(g.useCallback)(function(e){e.preventDefault();var n=T(e.target,"TR"),t=w(n);i(t)},[]),u=Object(g.useCallback)(function(e){e.preventDefault()},[]),m=Object(g.useCallback)(function(e){console.log("dragEnd",e.target),l.current.dragging=!1,i(null)},[]),f=Object(g.useCallback)(function(e){e.preventDefault();var n=T(e.target,"TR"),t=l.current.startIndex,r=w(n);if(t!==r){var a=o[t],i=Object(p.a)(o);console.log(t,r),i.splice(t,1),i.splice(r,0,a),s(i)}},[o]);return console.log(a),b.a.createElement(y.a,{data:o,keygen:"id",cellSelectable:!0,columns:S,rowClassName:function(e,n){return n===a?"example-drag-in":""},rowEvents:{draggable:!0,onDrop:f,onDragEnd:m,onDragOver:u,onDragStart:d,onDragEnter:c}})}},1676:function(e,n){e.exports="/**\n * cn - 拖动行\n *    -- 通过 rowEvents 属性来自定义拖拽事件\n * en - drag row\n *    -- customize drag events through the rowEvents property\n */\nimport React, { useState, useRef, useCallback } from 'react'\nimport { Table, TYPE } from 'shineout'\nimport './row-drag.css'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n]\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst findNearestDOM = (el: HTMLElement, tagName: string) => {\n  let node: any = el\n  while (node.tagName !== tagName && node.tagName !== 'BODY') {\n    node = node.parentNode\n  }\n  return node\n}\nconst findIndex = (el: HTMLElement) => {\n  const tbody = findNearestDOM(el, 'TBODY')\n  const nodes = Array.prototype.slice.call(tbody.children)\n\n  return nodes.indexOf(el)\n}\n\nconst App: React.FC = () => {\n  const [d, setD] = useState(data)\n  const [target, setTarget] = useState<number | null>()\n  const ref = useRef<{\n    startIndex?: number\n    dragging?: boolean\n    current: { dragging?: boolean; startIndex?: number }\n  }>({ current: {} })\n\n  const dragStartHandler = useCallback(e => {\n    if (ref.current.dragging) return\n    ref.current.dragging = true\n    ref.current.startIndex = findIndex(e.target)\n  }, [])\n\n  const dragEnterHandler = useCallback(e => {\n    e.preventDefault()\n    const tr = findNearestDOM(e.target, 'TR')\n    const index = findIndex(tr)\n    setTarget(index)\n  }, [])\n\n  const dragOverHandler = useCallback(e => {\n    e.preventDefault()\n  }, [])\n\n  const dragEndHandler = useCallback(e => {\n    console.log('dragEnd', e.target)\n    ref.current.dragging = false\n    setTarget(null)\n  }, [])\n\n  const dropHandler = useCallback(\n    e => {\n      e.preventDefault()\n      const tr = findNearestDOM(e.target, 'TR')\n      const start = ref.current.startIndex\n      const end = findIndex(tr)\n      if (start === end) return\n      const source = d[start!]\n      const r = [...d]\n      console.log(start, end)\n      r.splice(start!, 1)\n      r.splice(end, 0, source)\n      setD(r)\n    },\n    [d]\n  )\n\n  console.log(target)\n\n  return (\n    <Table\n      data={d}\n      keygen=\"id\"\n      cellSelectable\n      columns={columns}\n      rowClassName={(_row, index) => (index === target ? 'example-drag-in' : '')}\n      rowEvents={{\n        draggable: true,\n        onDrop: dropHandler,\n        onDragEnd: dragEndHandler,\n        onDragOver: dragOverHandler,\n        onDragStart: dragStartHandler,\n        onDragEnter: dragEnterHandler,\n      }}\n    />\n  )\n}\n\nexport default App\n"},1677:function(e,n){e.exports="/**\n * cn - 拖动行\n *    -- 通过 rowEvents 属性来自定义拖拽事件\n * en - drag row\n *    -- customize drag events through the rowEvents property\n */\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Table } from 'shineout';\nimport './row-drag.css';\nconst data = [\n    {\n        id: 1,\n        firstName: 'Ephraim',\n        lastName: 'Wisozk',\n        position: 'Marketing Designer',\n        start: '2012-01-29',\n        time: '01:42',\n        salary: 115777,\n        country: 'Reunion',\n        office: 'Miami',\n        office5: 'Istanbul',\n        height: 113.74,\n    },\n    {\n        id: 2,\n        firstName: 'Osvaldo',\n        lastName: 'Beer',\n        position: 'Financial Controller',\n        start: '2007-09-04',\n        time: '03:26',\n        salary: 396093,\n        country: 'Syrian Arab Republic',\n        office: 'San Paulo',\n        office5: 'Shenzhen',\n        height: 82.13,\n    },\n    {\n        id: 3,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        start: '2009-10-16',\n        time: '01:45',\n        salary: 236064,\n        country: 'Peru',\n        office: 'Boston',\n        office5: 'Delhi',\n        height: 179.53,\n    },\n    {\n        id: 4,\n        firstName: 'Shaniya',\n        lastName: 'Jacobs',\n        position: 'Developer',\n        start: '2014-06-30',\n        time: '02:17',\n        salary: 338985,\n        country: 'Peru',\n        office: 'Chengdu',\n        office5: 'Dallas-Fort Worth',\n        height: 190.11,\n    },\n];\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst findNearestDOM = (el, tagName) => {\n    let node = el;\n    while (node.tagName !== tagName && node.tagName !== 'BODY') {\n        node = node.parentNode;\n    }\n    return node;\n};\nconst findIndex = (el) => {\n    const tbody = findNearestDOM(el, 'TBODY');\n    const nodes = Array.prototype.slice.call(tbody.children);\n    return nodes.indexOf(el);\n};\nconst App = () => {\n    const [d, setD] = useState(data);\n    const [target, setTarget] = useState();\n    const ref = useRef({ current: {} });\n    const dragStartHandler = useCallback(e => {\n        if (ref.current.dragging)\n            return;\n        ref.current.dragging = true;\n        ref.current.startIndex = findIndex(e.target);\n    }, []);\n    const dragEnterHandler = useCallback(e => {\n        e.preventDefault();\n        const tr = findNearestDOM(e.target, 'TR');\n        const index = findIndex(tr);\n        setTarget(index);\n    }, []);\n    const dragOverHandler = useCallback(e => {\n        e.preventDefault();\n    }, []);\n    const dragEndHandler = useCallback(e => {\n        console.log('dragEnd', e.target);\n        ref.current.dragging = false;\n        setTarget(null);\n    }, []);\n    const dropHandler = useCallback(e => {\n        e.preventDefault();\n        const tr = findNearestDOM(e.target, 'TR');\n        const start = ref.current.startIndex;\n        const end = findIndex(tr);\n        if (start === end)\n            return;\n        const source = d[start];\n        const r = [...d];\n        console.log(start, end);\n        r.splice(start, 1);\n        r.splice(end, 0, source);\n        setD(r);\n    }, [d]);\n    console.log(target);\n    return (<Table data={d} keygen=\"id\" cellSelectable columns={columns} rowClassName={(_row, index) => (index === target ? 'example-drag-in' : '')} rowEvents={{\n            draggable: true,\n            onDrop: dropHandler,\n            onDragEnd: dragEndHandler,\n            onDragOver: dragOverHandler,\n            onDragStart: dragStartHandler,\n            onDragEnter: dragEnterHandler,\n        }}/>);\n};\nexport default App;\n"},1678:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=[{id:1,firstName:"Ephraim",lastName:"Wisozk",salary:115777,height:113.74},{id:2,firstName:"Osvaldo",lastName:"Beer",salary:396093,height:82.13},{id:3,firstName:"Dylan",lastName:"Ratke",salary:236064,height:179.53},{id:4,firstName:"Shaniya",lastName:"Jacobs",salary:338985,height:190.11}],s=[{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"height",render:"height"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}],l=[[{render:function(){return a.a.createElement("span",null,"Total")}},{render:function(){return a.a.createElement("span",null,1347016)}},{render:function(){return a.a.createElement("span",null,2341312)}}],[{render:function(){return a.a.createElement("span",null,"Balance")}},{render:function(){return a.a.createElement("span",null,1234)},colSpan:2}]];n.default=function(){return a.a.createElement(i.a,{bordered:!0,data:o,keygen:"id",cellSelectable:!0,columns:s,summary:l})}},1679:function(e,n){e.exports="/**\n * cn - 底部总结栏\n *    -- 通过 summary 属性来渲染底部信息\n * en - footer summary\n *    -- Render bottom information through the summary property\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport './row-drag.css'\n\ninterface TableRowData {\n  id: number\n  height: number\n  salary: number\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\ntype TableProps = TYPE.Table.Props<TableRowData, number[]>\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    salary: 115777,\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    salary: 396093,\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    salary: 236064,\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    salary: 338985,\n    height: 190.11,\n  },\n]\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'height', render: 'height' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst summary: TableProps['summary'] = [\n  [\n    {\n      render: () => <span>Total</span>,\n    },\n    {\n      render: () => <span>{1347016}</span>,\n    },\n    {\n      render: () => <span>{2341312}</span>,\n    },\n  ],\n  [\n    {\n      render: () => <span>Balance</span>,\n    },\n    {\n      render: () => <span>{1234}</span>,\n      colSpan: 2,\n    },\n  ],\n]\n\nconst App: React.FC = () => (\n  <Table bordered data={data} keygen=\"id\" cellSelectable columns={columns} summary={summary} />\n)\n\nexport default App\n"},1680:function(e,n){e.exports="/**\n * cn - 底部总结栏\n *    -- 通过 summary 属性来渲染底部信息\n * en - footer summary\n *    -- Render bottom information through the summary property\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport './row-drag.css';\nconst data = [\n    {\n        id: 1,\n        firstName: 'Ephraim',\n        lastName: 'Wisozk',\n        salary: 115777,\n        height: 113.74,\n    },\n    {\n        id: 2,\n        firstName: 'Osvaldo',\n        lastName: 'Beer',\n        salary: 396093,\n        height: 82.13,\n    },\n    {\n        id: 3,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        salary: 236064,\n        height: 179.53,\n    },\n    {\n        id: 4,\n        firstName: 'Shaniya',\n        lastName: 'Jacobs',\n        salary: 338985,\n        height: 190.11,\n    },\n];\nconst columns = [\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'height', render: 'height' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst summary = [\n    [\n        {\n            render: () => <span>Total</span>,\n        },\n        {\n            render: () => <span>{1347016}</span>,\n        },\n        {\n            render: () => <span>{2341312}</span>,\n        },\n    ],\n    [\n        {\n            render: () => <span>Balance</span>,\n        },\n        {\n            render: () => <span>{1234}</span>,\n            colSpan: 2,\n        },\n    ],\n];\nconst App = () => (<Table bordered data={data} keygen=\"id\" cellSelectable columns={columns} summary={summary}/>);\nexport default App;\n"},1681:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=t(565),s=Object(o.b)(20),l=[{title:"id",render:"id",width:50},{title:"First Name",group:"Name",render:"firstName",width:120},{title:"Last Name",fixed:"left",group:"Name",render:"lastName",width:120},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",fixed:"right",width:100,render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}],d=[[{render:function(){return a.a.createElement("span",null,"Summary")},colSpan:3},{render:function(){return a.a.createElement("span",null,"summary content")},colSpan:4},{render:function(){return a.a.createElement("span",null,"summary2")}}]];n.default=function(){return a.a.createElement(i.a,{bordered:!0,fixed:"both",keygen:"id",width:1500,style:{height:300},columns:l,data:s,summary:d})}},1682:function(e,n){e.exports="/**\n * cn -\n *    -- 固定列用法\n * en -\n *    -- Fixed column usage\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\ntype TableProps = TYPE.Table.Props<TableRowData, number[]>\n\nconst data: TableRowData[] = fetchSync(20)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  {\n    title: 'First Name',\n    group: 'Name',\n    render: 'firstName',\n    width: 120,\n  },\n  {\n    title: 'Last Name',\n    fixed: 'left',\n    group: 'Name',\n    render: 'lastName',\n    width: 120,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    fixed: 'right',\n    width: 100,\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst summary: TableProps['summary'] = [\n  [\n    { render: () => <span>Summary</span>, colSpan: 3 },\n    { render: () => <span>summary content</span>, colSpan: 4 },\n    { render: () => <span>summary2</span> },\n  ],\n]\n\nconst App: React.FC = () => (\n  <Table\n    bordered\n    fixed=\"both\"\n    keygen=\"id\"\n    width={1500}\n    style={{ height: 300 }}\n    columns={columns}\n    data={data}\n    summary={summary}\n  />\n)\n\nexport default App\n"},1683:function(e,n){e.exports="/**\n * cn -\n *    -- 固定列用法\n * en -\n *    -- Fixed column usage\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(20);\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    {\n        title: 'First Name',\n        group: 'Name',\n        render: 'firstName',\n        width: 120,\n    },\n    {\n        title: 'Last Name',\n        fixed: 'left',\n        group: 'Name',\n        render: 'lastName',\n        width: 120,\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        fixed: 'right',\n        width: 100,\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst summary = [\n    [\n        { render: () => <span>Summary</span>, colSpan: 3 },\n        { render: () => <span>summary content</span>, colSpan: 4 },\n        { render: () => <span>summary2</span> },\n    ],\n];\nconst App = () => (<Table bordered fixed=\"both\" keygen=\"id\" width={1500} style={{ height: 300 }} columns={columns} data={data} summary={summary}/>);\nexport default App;\n"},1684:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(316),o=[{id:1,firstName:"Ephraim",lastName:"Wisozk",position:"Marketing Designer",start:"2012-01-29",time:"01:42",salary:115777,country:"Reunion",office:"Miami",office5:"Istanbul",height:113.74},{id:2,firstName:"Osvaldo",lastName:"Beer",position:"Financial Controller",start:"2007-09-04",time:"03:26",salary:396093,country:"Syrian Arab Republic",office:"San Paulo",office5:"Shenzhen",height:82.13},{id:3,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",start:"2009-10-16",time:"01:45",salary:236064,country:"Peru",office:"Boston",office5:"Delhi",height:179.53},{id:4,firstName:"Shaniya",lastName:"Jacobs",position:"Developer",start:"2014-06-30",time:"02:17",salary:338985,country:"Peru",office:"Chengdu",office5:"Dallas-Fort Worth",height:190.11}],s=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];n.default=function(){return a.a.createElement(i.a,{keygen:"id",width:1500,columns:s,data:o})}},1685:function(e,n){e.exports="/**\n * cn - T:hover\n *    --\n * en - T:hover\n *    --\n */\nimport React from 'react'\nimport { Table, TYPE } from 'shineout'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n]\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst App: React.FC = () => <Table keygen=\"id\" width={1500} columns={columns} data={data} />\n\nexport default App\n"},1686:function(e,n){e.exports="/**\n * cn - T:hover\n *    --\n * en - T:hover\n *    --\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nconst data = [\n    {\n        id: 1,\n        firstName: 'Ephraim',\n        lastName: 'Wisozk',\n        position: 'Marketing Designer',\n        start: '2012-01-29',\n        time: '01:42',\n        salary: 115777,\n        country: 'Reunion',\n        office: 'Miami',\n        office5: 'Istanbul',\n        height: 113.74,\n    },\n    {\n        id: 2,\n        firstName: 'Osvaldo',\n        lastName: 'Beer',\n        position: 'Financial Controller',\n        start: '2007-09-04',\n        time: '03:26',\n        salary: 396093,\n        country: 'Syrian Arab Republic',\n        office: 'San Paulo',\n        office5: 'Shenzhen',\n        height: 82.13,\n    },\n    {\n        id: 3,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        start: '2009-10-16',\n        time: '01:45',\n        salary: 236064,\n        country: 'Peru',\n        office: 'Boston',\n        office5: 'Delhi',\n        height: 179.53,\n    },\n    {\n        id: 4,\n        firstName: 'Shaniya',\n        lastName: 'Jacobs',\n        position: 'Developer',\n        start: '2014-06-30',\n        time: '02:17',\n        salary: 338985,\n        country: 'Peru',\n        office: 'Chengdu',\n        office5: 'Dallas-Fort Worth',\n        height: 190.11,\n    },\n];\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst App = () => <Table keygen=\"id\" width={1500} columns={columns} data={data}/>;\nexport default App;\n"},1687:function(e,n,t){"use strict";t.r(n);var a=t(24),i=t(0),o=t.n(i),s=t(316),l=[{id:1,firstName:"Ephraim",lastName:"Wisozk",position:"Marketing Designer",start:"2012-01-29",time:"01:42",salary:115777,country:"Reunion",office:"Miami",office5:"Istanbul",height:113.74},{id:2,firstName:"Osvaldo",lastName:"Beer",position:"Financial Controller",start:"2007-09-04",time:"03:26",salary:396093,country:"Syrian Arab Republic",office:"San Paulo",office5:"Shenzhen",height:82.13},{id:3,firstName:"Dylan",lastName:"Ratke",position:"Development Lead",start:"2009-10-16",time:"01:45",salary:236064,country:"Peru",office:"Boston",office5:"Delhi",height:179.53},{id:4,firstName:"Shaniya",lastName:"Jacobs",position:"Developer",start:"2014-06-30",time:"02:17",salary:338985,country:"Peru",office:"Chengdu",office5:"Dallas-Fort Worth",height:190.11}],d=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];n.default=function(){var e=Object(i.useState)([]),n=Object(a.a)(e,2),t=n[0],r=n[1];return o.a.createElement("div",null,o.a.createElement("div",{id:"result"},t.map(function(e){return e.id})),o.a.createElement(s.a,{keygen:"id",value:t,onRowSelect:function(e){return r(e)},width:1500,columns:d,data:l}))}},1688:function(e,n){e.exports="/**\n * cn - T:value\n *    --\n * en - T:value\n *    --\n */\nimport React, { useState } from 'react'\nimport { Table, TYPE } from 'shineout'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n]\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<TableRowData[]>([])\n  return (\n    <div>\n      <div id=\"result\">{value.map(i => i.id)}</div>\n      <Table keygen=\"id\" value={value} onRowSelect={v => setValue(v)} width={1500} columns={columns} data={data} />\n    </div>\n  )\n}\n\nexport default App\n"},1689:function(e,n){e.exports="/**\n * cn - T:value\n *    --\n * en - T:value\n *    --\n */\nimport React, { useState } from 'react';\nimport { Table } from 'shineout';\nconst data = [\n    {\n        id: 1,\n        firstName: 'Ephraim',\n        lastName: 'Wisozk',\n        position: 'Marketing Designer',\n        start: '2012-01-29',\n        time: '01:42',\n        salary: 115777,\n        country: 'Reunion',\n        office: 'Miami',\n        office5: 'Istanbul',\n        height: 113.74,\n    },\n    {\n        id: 2,\n        firstName: 'Osvaldo',\n        lastName: 'Beer',\n        position: 'Financial Controller',\n        start: '2007-09-04',\n        time: '03:26',\n        salary: 396093,\n        country: 'Syrian Arab Republic',\n        office: 'San Paulo',\n        office5: 'Shenzhen',\n        height: 82.13,\n    },\n    {\n        id: 3,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        start: '2009-10-16',\n        time: '01:45',\n        salary: 236064,\n        country: 'Peru',\n        office: 'Boston',\n        office5: 'Delhi',\n        height: 179.53,\n    },\n    {\n        id: 4,\n        firstName: 'Shaniya',\n        lastName: 'Jacobs',\n        position: 'Developer',\n        start: '2014-06-30',\n        time: '02:17',\n        salary: 338985,\n        country: 'Peru',\n        office: 'Chengdu',\n        office5: 'Dallas-Fort Worth',\n        height: 190.11,\n    },\n];\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst App = () => {\n    const [value, setValue] = useState([]);\n    return (<div>\n      <div id=\"result\">{value.map(i => i.id)}</div>\n      <Table keygen=\"id\" value={value} onRowSelect={v => setValue(v)} width={1500} columns={columns} data={data}/>\n    </div>);\n};\nexport default App;\n"},1690:function(e,n,t){"use strict";t.r(n);var a=t(24),i=t(0),o=t.n(i),s=t(68),l=t(316),r=t(565),d=Object(r.b)(20),c=[{title:"id",render:"id",width:50},{title:"Name",render:function(e){return"".concat(e.firstName," ").concat(e.lastName)}},{title:"Country",render:"country"},{title:"Position",render:"position"},{title:"Office",render:"office"},{title:"Start Date",render:"start"},{title:"Salary",render:function(e){return"$".concat(e.salary.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"))}}];n.default=function(){var e=Object(i.useState)(!1),n=Object(a.a)(e,2),t=n[0],r=n[1];return o.a.createElement("div",null,o.a.createElement(s.a,{onClick:function(){return r(!t)}},"Show"),o.a.createElement("div",{style:{display:t?"block":"none"}},o.a.createElement(l.a,{sticky:{top:10},data:d,columns:c,keygen:"id"})))}},1691:function(e,n){e.exports="/**\n * cn - T:sticky\n *    -- fixed: 修复 Table 在配置 Sticky 具体属性后可能导致表头渲染异常的问题\n *    -- https://github.com/sheinsight/shineout/pull/1890\n * en - T:sticky\n *    --\n */\nimport React, { useState } from 'react'\nimport { Table, Button, TYPE } from 'shineout'\nimport { fetchSync } from 'doc/data/user'\n\ninterface TableRowData {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>\n\nconst data: TableRowData[] = fetchSync(20)\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary',\n    render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n]\n\nconst App: React.FC = () => {\n  const [show, setShow] = useState(false)\n  return (\n    <div>\n      <Button onClick={() => setShow(!show)}>Show</Button>\n      <div style={{ display: show ? 'block' : 'none' }}>\n        <Table sticky={{ top: 10 }} data={data} columns={columns} keygen=\"id\" />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"},1692:function(e,n){e.exports="/**\n * cn - T:sticky\n *    -- fixed: 修复 Table 在配置 Sticky 具体属性后可能导致表头渲染异常的问题\n *    -- https://github.com/sheinsight/shineout/pull/1890\n * en - T:sticky\n *    --\n */\nimport React, { useState } from 'react';\nimport { Table, Button } from 'shineout';\nimport { fetchSync } from 'doc/data/user';\nconst data = fetchSync(20);\nconst columns = [\n    { title: 'id', render: 'id', width: 50 },\n    { title: 'Name', render: d => `${d.firstName} ${d.lastName}` },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n        title: 'Salary',\n        render: d => `$${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n];\nconst App = () => {\n    const [show, setShow] = useState(false);\n    return (<div>\n      <Button onClick={() => setShow(!show)}>Show</Button>\n      <div style={{ display: show ? 'block' : 'none' }}>\n        <Table sticky={{ top: 10 }} data={data} columns={columns} keygen=\"id\"/>\n      </div>\n    </div>);\n};\nexport default App;\n"},301:function(e,n,t){"use strict";var r=t(60),a=t(21),d=t(88),i=t(74),o=t(4),s=t(5),l=t(1),c=t(20),u=t(6),m=t(7),f=t(2),p=t(0),h=t.n(p),g=t(14),b=t.n(g),y=t(17),N=t(22),S=t(10),T=t(562),w=t(61);function x(r){return function(){var e,n=Object(f.a)(r);if(function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()){var t=Object(f.a)(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return Object(m.a)(this,e)}}var C=function(e){Object(u.a)(r,e);var t=x(r);function r(e){var n;return Object(o.a)(this,r),(n=t.call(this,e)).handleClick=n.handleClick.bind(Object(l.a)(n)),n.handleUpdate=n.handleUpdate.bind(Object(l.a)(n)),n.handleRawChange=n.handleRawChange.bind(Object(l.a)(n)),n}return Object(s.a)(r,[{key:"componentDidMount",value:function(){Object(c.a)(Object(f.a)(r.prototype),"componentDidMount",this).call(this),this.props.datum.subscribe(S.a,this.handleUpdate)}},{key:"componentWillUnmount",value:function(){Object(c.a)(Object(f.a)(r.prototype),"componentWillUnmount",this).call(this),this.props.datum.unsubscribe(S.a,this.handleUpdate)}},{key:"getContent",value:function(e){var n=this.props.renderItem;return"string"==typeof n?e[n]:"function"==typeof n?n(e):""}},{key:"handleUpdate",value:function(){this.forceUpdate()}},{key:"handleClick",value:function(e,n,t){var r=this.props,a=r.data,i=r.datum;n?i.add(a[t]):i.remove(a[t])}},{key:"handleRawChange",value:function(e,n){var t=this.props.datum;n?t.add(e):t.remove(e)}},{key:"render",value:function(){var t=this,e=this.props,n=e.block,r=e.data,a=e.datum,i=e.keygen,o=e.children,s=e.style,l=b()(Object(w.a)("group",["no-block","block"][Number(n)]),this.props.className);return void 0===r?h.a.createElement("div",{className:l,style:s},h.a.createElement(T.a,{value:{onRawChange:this.handleRawChange,checked:a.check.bind(a)}},o)):h.a.createElement("div",{className:l,style:s},r.map(function(e,n){return h.a.createElement(d.a,{checked:a.check(e),disabled:a.disabled(e),key:Object(N.b)(e,i,n),htmlValue:n,index:n,onChange:t.handleClick},t.getContent(e))}),o)}}]),r}(y.b);C.defaultProps={renderItem:function(e){return e}};var v=C,D=Object(a.compose)(r.a,T.b)(d.a);D.Group=Object(a.compose)(r.a,i.a.hoc({bindProps:["disabled","format","prediction","separator"]}))(v),D.Checkbox=d.a,D.displayName="ShineoutCheckbox",D.Group.displayName="ShineoutCheckboxGroup";n.a=D},562:function(e,n,t){"use strict";t.d(n,"a",function(){return s}),t.d(n,"b",function(){return l});var r=t(0),a=t.n(r),i=t(38),o=Object(i.a)(),s=o.Provider,l=function(t){return function(n){return a.a.createElement(o.Consumer,null,function(e){return a.a.createElement(t,Object.assign({},n,e))})}}}}]);