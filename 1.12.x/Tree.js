(window.webpackJsonpShineoutDoc=window.webpackJsonpShineoutDoc||[]).push([[52],{1700:function(e,n,t){"use strict";t.r(n);var a=t(0),r=t.n(a),o=t(564),d=t(565),i=t(40),l=t(1701),s=t.n(l),c=t(1702),u=t.n(c),p=Object(i.b)(s.a,u.a),f=[{name:"01-base",isTs:!0,isTest:!1,title:Object(i.b)("基本用法 \n 基础的 Tree 用法","Base \n Basic usage of Tree"),component:t(1703).default,rawText:t(1704),parseTsText:t(1705)},{name:"02-icon",isTs:!0,isTest:!1,title:Object(i.b)("图标 \n 在 renderItem 中根据状态展示不同的图标","Icons \n Display different icon in the renderItem."),component:t(1706).default,rawText:t(1707),parseTsText:t(1708)},{name:"03-click",isTs:!0,isTest:!1,title:Object(i.b)("点击事件 \n 设置 onClick 属性监听节点点击","Click \n Set the onClick property to listen the node click."),component:t(1709).default,rawText:t(1710),parseTsText:t(1711)},{name:"04-noline",isTs:!0,isTest:!1,title:Object(i.b)("无连接线 \n 设置 line 为 false，隐藏连接线","Line \n Set the line property to false to hid the connecting line."),component:t(1712).default,rawText:t(1713),parseTsText:t(1714)},{name:"05-expanded",isTs:!0,isTest:!1,title:Object(i.b)("控制展开 \n 受控的展开（此示例数据量太大，第一次全部展开会比较慢）","Expanded \n Controlled expansion (Because the data in this example is too large, it will be slower for the first time.)"),component:t(1715).default,rawText:t(1716),parseTsText:t(1717)},{name:"06-change",isTs:!0,isTest:!1,title:Object(i.b)("可选择 \n 选中值取值提供了 4 种模式 \n 0: 只返回完全选中的节点，包含父节点 \n 1: 返回全部选中的节点和半选中的父节点 \n 2: 只返回选中的子节点 \n 3: 如果父节点选中，只返回父节点 \n 4: 所选即所得","onChange \n Selected values provide 4 modes \n 0: Return only the fully selected node, including the parent node. \n 1: Return the fully selected nodes and semi-selected parent nodes. \n 2: Return only the selected child node. \n 3: Return only the parent node, if the parent node is selected. \n 4: What you choose is what you get."),component:t(1718).default,rawText:t(1719),parseTsText:t(1720)},{name:"07-disabled",isTs:!0,isTest:!1,title:Object(i.b)("禁用 \n disabled 为函数时，根据返回结果禁用节点，同时禁用子节点 \n disabled 为 true 时，禁用全部节点","disabled \n When the disabled property is a function, disable the node and its child nodes according to the returned result. \n When the disabled property is true, disable all nodes."),component:t(1721).default,rawText:t(1722),parseTsText:t(1723)},{name:"08-drag",isTs:!0,isTest:!1,title:Object(i.b)("拖动 \n 设置 onDrop 属性可以拖动节点，设置 dragSibling 限制兄弟节点之间拖动","Drag \n Set the onDrop property to drag nodes."),component:t(1724).default,rawText:t(1725),parseTsText:t(1726)},{name:"08-styledrag",isTs:!0,isTest:!1,title:Object(i.b)("设置拖动样式 \n 可以通过 dragImageSelector, dragImageStyle, dragHoverExpand定义一些拖动的设置","Set the drag style \n Some drag settings can be defined by dragImageSelector, dragImageStyle, dragHoverExpand"),component:t(1727).default,rawText:t(1728),parseTsText:t(1729)},{name:"09-lazyload",isTs:!0,isTest:!1,title:Object(i.b)("动态加载 \n 数据过大，需要动态加载时，可以设置 loader 函数，当展开未定义 children（undefined）的节点时，触发此函数","Lazy load \n Set the loader function to dynamic fetch data. This function is triggered when the undefined child node is expanded."),component:t(1730).default,rawText:t(1731),parseTsText:t(1732)},{name:"data",isTs:!1,isTest:!1,title:Object(i.b)("",""),component:t(1733).default,rawText:t(1734)}];n.default=Object(o.a)(function(e){return r.a.createElement(d.b,Object.assign({},e,{codes:void 0,source:p,examples:f}))})},1701:function(e,n){e.exports="# Tree *树形选择*\n\n##\n\n#### 本页面中用到的数据如下（数据量比较大，请谨慎点开）\n<example name=\"data\" />\n\n<example />\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| className | string | 无 | 扩展className |\n| onChange | (value: string[]) => void | 无 | 设置 onChange 属性时，显示 选择框。参数为当前选中值，和 mode 属性相关 |\n| data | object[] | [] | 数据，子节点为children，如果 children 值为 null 或 长度为 0 时，视为叶子节点 |\n| defaultExpanded | string[] | 无 | 默认展开的节点 key（非受控） |\n| disabled | (data: any) => boolean \\| boolean | false | 显示选择框时有效，为 true 时，所有节点禁用选择，为函数时，根据函数返回结果确定是否禁用 |\n| expanded | string[] | 无 | 展开的节点 key （受控） |\n| keygen | ((data: any, parentKey: string) => string) \\| string | 必填 | 生成key的辅助方法<br />为函数时，使用此函数返回值<br />为string时，使用这个string对应的数据值。如 'id'，相当于 (d) => d.id |\n| line | boolean | true | 是否显示连接线 |\n| loader | (key: string) => void | 无 | 设置loader属性后，未定义children的节点视为动态加载节点，点击展开触发 loader事件，children 为 null 或者长度为 0 视为叶子节点 |\n| mode | 0 \\| 1 \\| 2 \\| 3 \\| 4 | 1 | 选中值模式<br />0: 只返回完全选中的节点，包含父节点<br />1: 返回全部选中的节点和半选中的父节点<br />2: 只返回选中的子节点<br />3: 如果父节点选中，只返回父节点<br />4: 所选即所得 |\n| onExpand | (value: string[]) => void | 无 | 节点展开回调，参数为当前展开节点 key 数组 |\n| renderItem | (data: object) => ReactNode | 必填 | 为 string 时，返回 d\\[string]<br />为 function 时，返回函数结果 |\n| defaultValue | string[] | 无 | 默认选中的 key （非受控） |\n| value | string[] | 无 | 选中的 key （受控） |\n| onDrop | (data: object, key: string, targetKey: string, position: number) => void | 无 | 设置 onDrop 属性时，为可拖动状态<br />data: 拖动后重新排序的完整数据<br />key: 拖动的节点key<br />targetKey: 目标节点 key<br />position: 在目标节点的位置，以 0 开始 |\n| defaultExpandAll | boolean | false | 默认展开所有节点 |\n| childrenKey | string | 'children' | 指定子数据的属性名 |\n| expandIcons | \\[ReactNode, ReactNode] | 无 | 自定义展开/收起按钮 |\n| dragImageSelector | (data: object) => string \\| string | 无 | 定义拖拽图片的选择器 |\n| dragImageStyle | object | 无 | 拖拽图片的样式 |\n| leafClass | (data: object) => string \\| string | 无 | 叶子节点的 class, 函数的参数为该条叶子节点数据 |\n| dragHoverExpand | boolean | false | 拖拽时自动展开含有子节点的节点 |\n| doubleClickExpand | boolean | false | 双击是否展开节点 |\n| onClick | (data: object, key:string\\|number) => void | 无 | 节点点击事件 |\n| iconClass | string | 无 | 展开/收起按钮的类名 |\n| nodeClass | string \\| ((data: any) => string) | 无 | 节点的class，如果是函数，参数为该节点数据 |\n| dragSibling | boolean  | 无 | 是否只能平级拖拽 |\n| parentClickExpand | boolean  | false | 点击父节点展开 |\n"},1702:function(e,n){e.exports="# Tree\n\n##\n\n#### The data used on this page is as follows (the amount of data is large, please be careful)\n<example name=\"data\" />\n\n<example />\n\n## API\n\n| Property | Type | Default | Description |\n| --- | --- | --- | --- |\n| className | string | - | Extend className |\n| data | object[] | [] | data. The child node is children. If the children value is null or its length is 0, it is render as a leaf node. |\n| defaultExpanded | string[] | - | Default expanded node key. |\n| disabled | (data: any) => boolean \\| boolean | false | When it is true, all nodes disable the selection; when it is a function, it determines whether it is disabled according to the return result of the function. |\n| expanded | string[] | - | Expanded node key (controlled) |\n| keygen | ((data: any, parentKey: string) => string) \\| string | required | Auxiliary method for generating key. <br />When it is a function, use the return value of this function. <br /> When it is a string, use the data value corresponding to this string. For example, 'id' is the same thing as (d) => d.id. |\n| line | boolean | true | Whether to display the connection line. |\n| loader | (key: string) => void | - | If the loader attribute is a function, the node with no children is regarded as dynamically loaded node. Click expanded button to trigger the loader event. The children property is null or its length is 0 will be regarded as a leaf node. |\n| mode | 0 \\| 1 \\| 2 \\| 3 \\| 4 | 1 | mode <br />0: Returns only the fully selected node including the parent node. <br />1: Returns all selected nodes and semi-selected nodes. <br />2: Return only the selected child nodes. <br />3: If the parent node is full selected, only return the parent node.<br />4: What you choose is what you get. |\n| onChange | (value: string[]) => void | - | When the onChange property is set, the selection box is displayed. The parameter is the current selected value, which is related to the mode property. |\n| onExpand |  (value: string[]) => void | - | The callback function for expanding the node. The parameter is the key array of the currently expanded nodes. |\n| renderItem | (data: object) => ReactNode | required | When it is a string, return d\\[string].<br /> When it is a function, return the result of this function. |\n| defaultValue | string[] | - | Default selected key (not controlled) |\n| value | string[] | - | Selected key (controlled) |\n| onDrop | (data: object, key: string, targetKey: string, position: number) => void | - | It is draggable when setting the onDrop property. <br />data: Full data after dragging.<br />key: the key of dragged node<br />targetKey: the key of target node<br />position: The position of the target node. start at 0. |\n| defaultExpandAll | boolean | false | default expand all nodes |\n| childrenKey | string | 'children' | the key of the children data name |\n| expandIcons | \\[ReactNode, ReactNode] | none | custom expand/collapse button |\n| dragImageSelector | (data: object) => string \\| string | - | the selector of drag image |\n| dragImageStyle | object | - | the style of drag Image |\n| leafClass | (data: object) => string \\| string | - | the class of lead, the params of function is data |\n| dragHoverExpand | boolean | false | auto expand the node when drag over |\n| doubleClickExpand | boolean | false | expand node while double click |\n| onClick | (data: object, key:string\\|number) => void | none | node click |\n| iconClass | string | - | expand/collapse button's class |\n| nodeClass | string \\| ((data: any) => string) | - | The class of the node, if it is a function, the parameter is the node data. |\n| dragSibling | boolean  | - | whether drag can only be level |\n| parentClickExpand | boolean  | false | Expand by click parent node |\n"},1703:function(e,n,t){"use strict";t.r(n);var a=t(0),r=t.n(a),o=t(144),d=[{id:"1",text:"1",children:[{id:"1-1",text:"1-1",children:[{id:"1-1-1",text:"1-1-1"},{id:"1-1-2",text:"1-1-2"}]},{id:"1-2",text:"1-2"}]},{id:"2",text:"2",children:[{id:"2-1",text:"2-1"},{id:"2-2",text:"2-2"}]},{id:"3",text:"3",children:[{id:"3-1",text:"3-1"}]},{id:"4",text:"4",children:[{id:"4-1",text:"4-1"}]},{id:"5",text:"5",children:[{id:"5-1",text:"5-1"}]}];n.default=function(){return r.a.createElement(o.a,{data:d,keygen:"id",defaultExpanded:["2"],renderItem:function(e){return"node ".concat(e.text)}})}},1704:function(e,n){e.exports="/**\n * cn - 基本用法\n *    -- 基础的 Tree 用法\n * en - Base\n *   -- Basic usage of Tree\n */\nimport React from 'react'\nimport { Tree } from 'shineout'\n\nconst data = [\n  {\n    id: '1',\n    text: '1',\n    children: [\n      {\n        id: '1-1',\n        text: '1-1',\n        children: [{ id: '1-1-1', text: '1-1-1' }, { id: '1-1-2', text: '1-1-2' }],\n      },\n      { id: '1-2', text: '1-2' },\n    ],\n  },\n  { id: '2', text: '2', children: [{ id: '2-1', text: '2-1' }, { id: '2-2', text: '2-2' }] },\n  { id: '3', text: '3', children: [{ id: '3-1', text: '3-1' }] },\n  { id: '4', text: '4', children: [{ id: '4-1', text: '4-1' }] },\n  { id: '5', text: '5', children: [{ id: '5-1', text: '5-1' }] },\n]\n\nconst App: React.FC = () => <Tree data={data} keygen=\"id\" defaultExpanded={['2']} renderItem={n => `node ${n.text}`} />\n\nexport default App\n"},1705:function(e,n){e.exports="/**\n * cn - 基本用法\n *    -- 基础的 Tree 用法\n * en - Base\n *   -- Basic usage of Tree\n */\nimport React from 'react';\nimport { Tree } from 'shineout';\nconst data = [\n    {\n        id: '1',\n        text: '1',\n        children: [\n            {\n                id: '1-1',\n                text: '1-1',\n                children: [{ id: '1-1-1', text: '1-1-1' }, { id: '1-1-2', text: '1-1-2' }],\n            },\n            { id: '1-2', text: '1-2' },\n        ],\n    },\n    { id: '2', text: '2', children: [{ id: '2-1', text: '2-1' }, { id: '2-2', text: '2-2' }] },\n    { id: '3', text: '3', children: [{ id: '3-1', text: '3-1' }] },\n    { id: '4', text: '4', children: [{ id: '4-1', text: '4-1' }] },\n    { id: '5', text: '5', children: [{ id: '5-1', text: '5-1' }] },\n];\nconst App = () => <Tree data={data} keygen=\"id\" defaultExpanded={['2']} renderItem={n => `node ${n.text}`}/>;\nexport default App;\n"},1706:function(e,n,t){"use strict";t.r(n);var a=t(0),r=t.n(a),o=t(144),d=t(568),i=t(185),l=function(e,n){var t;return t=e.children&&0!==e.children.length?n?r.a.createElement(i.a,{name:"folder-open",style:{color:"#ffd666"}}):r.a.createElement(i.a,{name:"folder",style:{color:"#ffd666"}}):r.a.createElement(i.a,{name:"file-text-o"}),r.a.createElement("span",null,t,e.text)};n.default=function(){return r.a.createElement(o.a,{data:d.c,keygen:"id",renderItem:l,doubleClickExpand:!0})}},1707:function(e,n){e.exports="/**\n * cn - 图标\n *    -- 在 renderItem 中根据状态展示不同的图标\n * en - Icons\n *    -- Display different icon in the renderItem.\n */\nimport React from 'react'\nimport { Tree, TYPE } from 'shineout'\nimport data from 'doc/data/tree'\nimport FontAwesome from '../Icon/FontAwesome'\n\ninterface DataItem {\n  id: string\n  text: string\n  children: Array<DataItem>\n}\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>\nconst renderItem: TreeProps['renderItem'] = (node, isExpanded) => {\n  let icon\n  if (!node.children || node.children.length === 0) {\n    icon = <FontAwesome name=\"file-text-o\" />\n  } else if (isExpanded) {\n    icon = <FontAwesome name=\"folder-open\" style={{ color: '#ffd666' }} />\n  } else {\n    icon = <FontAwesome name=\"folder\" style={{ color: '#ffd666' }} />\n  }\n\n  return (\n    <span>\n      {icon}\n      {node.text}\n    </span>\n  )\n}\n\nconst App: React.FC = () => <Tree data={data} keygen=\"id\" renderItem={renderItem} doubleClickExpand />\nexport default App\n"},1708:function(e,n){e.exports="/**\n * cn - 图标\n *    -- 在 renderItem 中根据状态展示不同的图标\n * en - Icons\n *    -- Display different icon in the renderItem.\n */\nimport React from 'react';\nimport { Tree } from 'shineout';\nimport data from 'doc/data/tree';\nimport FontAwesome from '../Icon/FontAwesome';\nconst renderItem = (node, isExpanded) => {\n    let icon;\n    if (!node.children || node.children.length === 0) {\n        icon = <FontAwesome name=\"file-text-o\"/>;\n    }\n    else if (isExpanded) {\n        icon = <FontAwesome name=\"folder-open\" style={{ color: '#ffd666' }}/>;\n    }\n    else {\n        icon = <FontAwesome name=\"folder\" style={{ color: '#ffd666' }}/>;\n    }\n    return (<span>\n      {icon}\n      {node.text}\n    </span>);\n};\nconst App = () => <Tree data={data} keygen=\"id\" renderItem={renderItem} doubleClickExpand/>;\nexport default App;\n"},1709:function(e,n,t){"use strict";t.r(n);var s=t(24),c=t(0),u=t.n(c),p=t(41),f=t(144),m=t(568),h=function(e,n){return"".concat(n,",").concat(e.id).replace(/^,/,"")};n.default=function(){var e=Object(c.useState)(),n=Object(s.a)(e,2),r=n[0],o=n[1],t=Object(c.useState)(m.c),a=Object(s.a)(t,2),d=a[0],i=a[1],l=function(e){var n=e.target.value,a=(r||"").split(","),t=Object(p.a)(d,function(e){var t=e;a.forEach(function(n,e){(t=t.find(function(e){return e.id===n}))&&e<a.length-1&&(t=t.children)}),t&&(t.text=n)});i(t),o(void 0)};return u.a.createElement(f.a,{data:d,active:r,keygen:h,defaultExpanded:["1"],onClick:function(e,n){o(n)},renderItem:function(e,n,t){return t?u.a.createElement("input",{autoFocus:!0,onBlur:l,onKeyDown:function(e){13===e.keyCode&&e.target&&e.target.blur()},defaultValue:e.text,type:"text"}):"node ".concat(e.text)}})}},1710:function(e,n){e.exports="/**\n * cn - 点击事件\n *    -- 设置 onClick 属性监听节点点击\n * en - Click\n *    -- Set the onClick property to listen the node click.\n */\nimport React, { useState, FocusEvent } from 'react'\nimport produce from 'immer'\nimport { Tree, TYPE } from 'shineout'\nimport tree from 'doc/data/tree'\n\ntype dataItem = typeof tree[0]\ntype TreeProps = TYPE.Tree.Props<dataItem, string[]>\n\nconst keyGenerator: TreeProps['keygen'] = (node, parentKey) => `${parentKey},${node.id}`.replace(/^,/, '')\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState<string | undefined>()\n  const [data, setData] = useState<TreeProps['data']>(tree)\n  const handleClick: TreeProps['onClick'] = (_, id: string) => {\n    setActive(id)\n  }\n  const handleEdit = (e: FocusEvent<HTMLInputElement>) => {\n    const newText = e.target.value\n    const path = (active || '').split(',')\n    const nextData = produce(data, draft => {\n      let target: any = draft\n      path.forEach((id, index) => {\n        target = target.find((d: dataItem) => d.id === id)\n        if (target && index < path.length - 1) target = target.children\n      })\n      if (target) {\n        target.text = newText\n      }\n    })\n    setData(nextData)\n    setActive(undefined)\n  }\n\n  const renderItem: TreeProps['renderItem'] = (node, _, isActive) =>\n    isActive ? (\n      <input\n        // eslint-disable-next-line\n        autoFocus\n        onBlur={handleEdit}\n        onKeyDown={event => {\n          if (event.keyCode === 13 && event.target) (event.target as HTMLInputElement).blur()\n        }}\n        defaultValue={node.text}\n        type=\"text\"\n      />\n    ) : (\n      `node ${node.text}`\n    )\n\n  return (\n    <Tree\n      data={data}\n      active={active}\n      keygen={keyGenerator}\n      defaultExpanded={['1']}\n      onClick={handleClick}\n      renderItem={renderItem}\n    />\n  )\n}\n\nexport default App\n"},1711:function(e,n){e.exports="/**\n * cn - 点击事件\n *    -- 设置 onClick 属性监听节点点击\n * en - Click\n *    -- Set the onClick property to listen the node click.\n */\nimport React, { useState } from 'react';\nimport produce from 'immer';\nimport { Tree } from 'shineout';\nimport tree from 'doc/data/tree';\nconst keyGenerator = (node, parentKey) => `${parentKey},${node.id}`.replace(/^,/, '');\nconst App = () => {\n    const [active, setActive] = useState();\n    const [data, setData] = useState(tree);\n    const handleClick = (_, id) => {\n        setActive(id);\n    };\n    const handleEdit = (e) => {\n        const newText = e.target.value;\n        const path = (active || '').split(',');\n        const nextData = produce(data, draft => {\n            let target = draft;\n            path.forEach((id, index) => {\n                target = target.find((d) => d.id === id);\n                if (target && index < path.length - 1)\n                    target = target.children;\n            });\n            if (target) {\n                target.text = newText;\n            }\n        });\n        setData(nextData);\n        setActive(undefined);\n    };\n    const renderItem = (node, _, isActive) => isActive ? (<input \n    // eslint-disable-next-line\n    autoFocus onBlur={handleEdit} onKeyDown={event => {\n            if (event.keyCode === 13 && event.target)\n                event.target.blur();\n        }} defaultValue={node.text} type=\"text\"/>) : (`node ${node.text}`);\n    return (<Tree data={data} active={active} keygen={keyGenerator} defaultExpanded={['1']} onClick={handleClick} renderItem={renderItem}/>);\n};\nexport default App;\n"},1712:function(e,n,t){"use strict";t.r(n);var a=t(0),r=t.n(a),o=t(144),d=t(568);n.default=function(){return r.a.createElement(o.a,{data:d.c,defaultExpanded:["1","2"],line:!1,keygen:"id",renderItem:function(e){return"node ".concat(e.id)}})}},1713:function(e,n){e.exports="/**\n * cn - 无连接线\n *    -- 设置 line 为 false，隐藏连接线\n * en - Line\n *    -- Set the line property to false to hid the connecting line.\n */\nimport React from 'react'\nimport { Tree } from 'shineout'\nimport data from 'doc/data/tree'\n\nconst App: React.FC = () => (\n  <Tree data={data} defaultExpanded={['1', '2']} line={false} keygen=\"id\" renderItem={n => `node ${n.id}`} />\n)\nexport default App\n"},1714:function(e,n){e.exports="/**\n * cn - 无连接线\n *    -- 设置 line 为 false，隐藏连接线\n * en - Line\n *    -- Set the line property to false to hid the connecting line.\n */\nimport React from 'react';\nimport { Tree } from 'shineout';\nimport data from 'doc/data/tree';\nconst App = () => (<Tree data={data} defaultExpanded={['1', '2']} line={false} keygen=\"id\" renderItem={n => `node ${n.id}`}/>);\nexport default App;\n"},1715:function(e,n,t){"use strict";t.r(n);var r=t(27),o=t(24),a=t(0),d=t.n(a),i=t(68),l=t(144),s=t(568);n.default=function(){var e=d.a.useState(["1"]),n=Object(o.a)(e,2),t=n[0],a=n[1];return d.a.createElement("div",null,d.a.createElement("div",{style:{marginBottom:12}},d.a.createElement(i.a,{onClick:function(){a(Object(r.a)(s.a))}},"Expand all"),d.a.createElement(i.a,{onClick:function(){a([])}},"Collapse all")),d.a.createElement(l.a,{data:s.c,keygen:"id",line:!1,expanded:t,onExpand:function(e){a(Object(r.a)(e))},renderItem:function(e){return"node ".concat(e.id)}}))}},1716:function(e,n){e.exports="/**\n * cn - 控制展开\n *    -- 受控的展开（此示例数据量太大，第一次全部展开会比较慢）\n * en - Expanded\n *    -- Controlled expansion (Because the data in this example is too large, it will be slower for the first time.)\n */\nimport React from 'react'\nimport { Button, Tree, TYPE } from 'shineout'\nimport data, { allIds } from 'doc/data/tree'\n\ntype DataItem = typeof data[0]\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>\n\nconst App: React.FC = () => {\n  const [expanded, setExpanded] = React.useState<TreeProps['expanded']>(['1'])\n  const expandAll = () => {\n    setExpanded([...allIds])\n  }\n  const collapseAll = () => {\n    setExpanded([])\n  }\n  const handleExpand = (ids: string[]) => {\n    setExpanded([...ids])\n  }\n  return (\n    <div>\n      <div style={{ marginBottom: 12 }}>\n        <Button onClick={expandAll}>Expand all</Button>\n        <Button onClick={collapseAll}>Collapse all</Button>\n      </div>\n      <Tree\n        data={data}\n        keygen=\"id\"\n        line={false}\n        expanded={expanded}\n        onExpand={handleExpand}\n        renderItem={node => `node ${node.id}`}\n      />\n    </div>\n  )\n}\n\nexport default App\n"},1717:function(e,n){e.exports="/**\n * cn - 控制展开\n *    -- 受控的展开（此示例数据量太大，第一次全部展开会比较慢）\n * en - Expanded\n *    -- Controlled expansion (Because the data in this example is too large, it will be slower for the first time.)\n */\nimport React from 'react';\nimport { Button, Tree } from 'shineout';\nimport data, { allIds } from 'doc/data/tree';\nconst App = () => {\n    const [expanded, setExpanded] = React.useState(['1']);\n    const expandAll = () => {\n        setExpanded([...allIds]);\n    };\n    const collapseAll = () => {\n        setExpanded([]);\n    };\n    const handleExpand = (ids) => {\n        setExpanded([...ids]);\n    };\n    return (<div>\n      <div style={{ marginBottom: 12 }}>\n        <Button onClick={expandAll}>Expand all</Button>\n        <Button onClick={collapseAll}>Collapse all</Button>\n      </div>\n      <Tree data={data} keygen=\"id\" line={false} expanded={expanded} onExpand={handleExpand} renderItem={node => `node ${node.id}`}/>\n    </div>);\n};\nexport default App;\n"},1718:function(e,n,t){"use strict";t.r(n);var l=t(24),a=t(0),s=t.n(a),r=t(9),c=t(305),u=t(144),p=t(568),f={position:"absolute",right:30,top:100,bottom:40,width:240,overflow:"auto",background:"#f2f2f2",padding:10,zIndex:100};"rtl"===r.a.direction&&(f.left=f.right,delete f.right);var m=[{value:0,text:"mode=0 (full)"},{value:1,text:"mode=1 (half)"},{value:2,text:"mode=2 (child only)"},{value:3,text:"mode=3 (shallow)"},{value:4,text:"mode=4 (freedom)"}];var h=[];!function e(n,t){var a=Object(l.a)(n,1)[0];a&&(t.push(a.id),a.children&&e(a.children,t))}(p.c,h);n.default=function(){var e=s.a.useState(h),n=Object(l.a)(e,2),t=n[0],a=n[1],r=s.a.useState(1),o=Object(l.a)(r,2),d=o[0],i=o[1];console.log(d);return s.a.createElement("div",null,s.a.createElement(c.a.Group,{keygen:"value",value:d,format:"value",onChange:function(e){i(e),a([])},data:m,renderItem:"text"}),s.a.createElement("br",null),s.a.createElement(u.a,{data:p.c,defaultExpanded:["0","2"],keygen:"id",mode:d,onChange:function(e){a(e)},renderItem:function(e){return"node ".concat(e.id)},value:t}),s.a.createElement("div",{style:f},"Current select value:",s.a.createElement("pre",{style:{background:"#f2f2f2"}},JSON.stringify(t,null,2))))}},1719:function(e,n){e.exports="/**\n * cn - 可选择\n *    -- 选中值取值提供了 4 种模式\n *    -- 0: 只返回完全选中的节点，包含父节点\n *    -- 1: 返回全部选中的节点和半选中的父节点\n *    -- 2: 只返回选中的子节点\n *    -- 3: 如果父节点选中，只返回父节点\n *    -- 4: 所选即所得\n * en - onChange\n *    -- Selected values provide 4 modes\n *    -- 0: Return only the fully selected node, including the parent node.\n *    -- 1: Return the fully selected nodes and semi-selected parent nodes.\n *    -- 2: Return only the selected child node.\n *    -- 3: Return only the parent node, if the parent node is selected.\n *    -- 4: What you choose is what you get.\n */\nimport React from 'react'\nimport { Tree, Radio, config, TYPE } from 'shineout'\nimport data from 'doc/data/tree'\n\ntype DataItem = typeof data[0]\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>\n\nconst resultStyle: TreeProps['style'] = {\n  position: 'absolute',\n  right: 30,\n  top: 100,\n  bottom: 40,\n  width: 240,\n  overflow: 'auto',\n  background: '#f2f2f2',\n  padding: 10,\n  zIndex: 100,\n}\nif (config.direction === 'rtl') {\n  resultStyle.left = resultStyle.right\n  delete resultStyle.right\n}\n\nconst modeList = [\n  { value: 0, text: 'mode=0 (full)' },\n  { value: 1, text: 'mode=1 (half)' },\n  { value: 2, text: 'mode=2 (child only)' },\n  { value: 3, text: 'mode=3 (shallow)' },\n  { value: 4, text: 'mode=4 (freedom)' },\n]\n\nfunction getValue(list: TreeProps['data'], value: string[]) {\n  const [node] = list\n  if (!node) return\n  value.push(node.id)\n  if (node.children) getValue(node.children, value)\n}\nconst defaultValue: string[] = []\ngetValue(data, defaultValue)\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<TreeProps['value']>(defaultValue)\n  const [mode, setMode] = React.useState<TreeProps['mode']>(1)\n  console.log(mode)\n\n  const handleChange: TreeProps['onChange'] = v => {\n    setValue(v)\n  }\n  const handleModeChange = (v: TreeProps['mode']) => {\n    setMode(v)\n    setValue([])\n  }\n  const renderItem: TreeProps['renderItem'] = node => `node ${node.id}`\n\n  return (\n    <div>\n      <Radio.Group\n        keygen=\"value\"\n        value={mode}\n        format=\"value\"\n        onChange={handleModeChange}\n        data={modeList}\n        renderItem=\"text\"\n      />\n\n      <br />\n\n      <Tree\n        data={data}\n        defaultExpanded={['0', '2']}\n        keygen=\"id\"\n        mode={mode}\n        onChange={handleChange}\n        renderItem={renderItem}\n        value={value}\n      />\n\n      <div style={resultStyle}>\n        Current select value:\n        <pre style={{ background: '#f2f2f2' }}>{JSON.stringify(value, null, 2)}</pre>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"},1720:function(e,n){e.exports="/**\n * cn - 可选择\n *    -- 选中值取值提供了 4 种模式\n *    -- 0: 只返回完全选中的节点，包含父节点\n *    -- 1: 返回全部选中的节点和半选中的父节点\n *    -- 2: 只返回选中的子节点\n *    -- 3: 如果父节点选中，只返回父节点\n *    -- 4: 所选即所得\n * en - onChange\n *    -- Selected values provide 4 modes\n *    -- 0: Return only the fully selected node, including the parent node.\n *    -- 1: Return the fully selected nodes and semi-selected parent nodes.\n *    -- 2: Return only the selected child node.\n *    -- 3: Return only the parent node, if the parent node is selected.\n *    -- 4: What you choose is what you get.\n */\nimport React from 'react';\nimport { Tree, Radio, config } from 'shineout';\nimport data from 'doc/data/tree';\nconst resultStyle = {\n    position: 'absolute',\n    right: 30,\n    top: 100,\n    bottom: 40,\n    width: 240,\n    overflow: 'auto',\n    background: '#f2f2f2',\n    padding: 10,\n    zIndex: 100,\n};\nif (config.direction === 'rtl') {\n    resultStyle.left = resultStyle.right;\n    delete resultStyle.right;\n}\nconst modeList = [\n    { value: 0, text: 'mode=0 (full)' },\n    { value: 1, text: 'mode=1 (half)' },\n    { value: 2, text: 'mode=2 (child only)' },\n    { value: 3, text: 'mode=3 (shallow)' },\n    { value: 4, text: 'mode=4 (freedom)' },\n];\nfunction getValue(list, value) {\n    const [node] = list;\n    if (!node)\n        return;\n    value.push(node.id);\n    if (node.children)\n        getValue(node.children, value);\n}\nconst defaultValue = [];\ngetValue(data, defaultValue);\nconst App = () => {\n    const [value, setValue] = React.useState(defaultValue);\n    const [mode, setMode] = React.useState(1);\n    console.log(mode);\n    const handleChange = v => {\n        setValue(v);\n    };\n    const handleModeChange = (v) => {\n        setMode(v);\n        setValue([]);\n    };\n    const renderItem = node => `node ${node.id}`;\n    return (<div>\n      <Radio.Group keygen=\"value\" value={mode} format=\"value\" onChange={handleModeChange} data={modeList} renderItem=\"text\"/>\n\n      <br />\n\n      <Tree data={data} defaultExpanded={['0', '2']} keygen=\"id\" mode={mode} onChange={handleChange} renderItem={renderItem} value={value}/>\n\n      <div style={resultStyle}>\n        Current select value:\n        <pre style={{ background: '#f2f2f2' }}>{JSON.stringify(value, null, 2)}</pre>\n      </div>\n    </div>);\n};\nexport default App;\n"},1721:function(e,n,t){"use strict";t.r(n);var a=t(0),r=t.n(a),o=t(144),d=t(568);n.default=function(){return r.a.createElement(o.a,{data:d.c,defaultExpanded:["1","2"],disabled:function(e){return"1-0"===e.id},keygen:"id",onChange:function(e){console.log(e)},renderItem:function(e){return"node ".concat(e.id)}})}},1722:function(e,n){e.exports="/**\n * cn - 禁用\n *    -- disabled 为函数时，根据返回结果禁用节点，同时禁用子节点\n *    -- disabled 为 true 时，禁用全部节点\n * en - disabled\n *    -- When the disabled property is a function, disable the node and its child nodes according to the returned result.\n *    -- When the disabled property is true, disable all nodes.\n */\nimport React from 'react'\nimport { Tree } from 'shineout'\nimport data from 'doc/data/tree'\n\nconst App: React.FC = () => (\n  <Tree\n    data={data}\n    defaultExpanded={['1', '2']}\n    disabled={node => node.id === '1-0'}\n    keygen=\"id\"\n    onChange={v => {\n      console.log(v)\n    }}\n    renderItem={node => `node ${node.id}`}\n  />\n)\n\nexport default App\n"},1723:function(e,n){e.exports="/**\n * cn - 禁用\n *    -- disabled 为函数时，根据返回结果禁用节点，同时禁用子节点\n *    -- disabled 为 true 时，禁用全部节点\n * en - disabled\n *    -- When the disabled property is a function, disable the node and its child nodes according to the returned result.\n *    -- When the disabled property is true, disable all nodes.\n */\nimport React from 'react';\nimport { Tree } from 'shineout';\nimport data from 'doc/data/tree';\nconst App = () => (<Tree data={data} defaultExpanded={['1', '2']} disabled={node => node.id === '1-0'} keygen=\"id\" onChange={v => {\n        console.log(v);\n    }} renderItem={node => `node ${node.id}`}/>);\nexport default App;\n"},1724:function(e,n,t){"use strict";t.r(n);var a=t(24),r=t(0),o=t.n(r),d=t(144),i=t(568);n.default=function(){var e=o.a.useState(i.c),n=Object(a.a)(e,2),t=n[0],r=n[1];return o.a.createElement(d.a,{data:t,keygen:"id",defaultExpanded:["1"],onDrop:function(e,n,t,a){console.log(e,n,t,a),r(e)},renderItem:function(e){return o.a.createElement("div",null,o.a.createElement("span",null,"node "),o.a.createElement("span",{id:"node-id-".concat(e.id)},e.text))}})}},1725:function(e,n){e.exports="/**\n * cn - 拖动\n *    -- 设置 onDrop 属性可以拖动节点，设置 dragSibling 限制兄弟节点之间拖动\n * en - Drag\n *    -- Set the onDrop property to drag nodes.\n */\nimport React from 'react'\nimport { Tree, TYPE } from 'shineout'\nimport tree from 'doc/data/tree'\n\ntype DataItem = typeof tree[0]\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>\n\nconst App: React.FC = () => {\n  const [data, setData] = React.useState<TreeProps['data']>(tree)\n\n  const handleDrop: TreeProps['onDrop'] = (d, key, targetKey, position) => {\n    console.log(d, key, targetKey, position)\n    setData(d)\n  }\n\n  const renderItem: TreeProps['renderItem'] = node => (\n    <div>\n      <span>node </span>\n      <span id={`node-id-${node.id}`}>{node.text}</span>\n    </div>\n  )\n\n  return <Tree data={data} keygen=\"id\" defaultExpanded={['1']} onDrop={handleDrop} renderItem={renderItem} />\n}\n\nexport default App\n"},1726:function(e,n){e.exports="/**\n * cn - 拖动\n *    -- 设置 onDrop 属性可以拖动节点，设置 dragSibling 限制兄弟节点之间拖动\n * en - Drag\n *    -- Set the onDrop property to drag nodes.\n */\nimport React from 'react';\nimport { Tree } from 'shineout';\nimport tree from 'doc/data/tree';\nconst App = () => {\n    const [data, setData] = React.useState(tree);\n    const handleDrop = (d, key, targetKey, position) => {\n        console.log(d, key, targetKey, position);\n        setData(d);\n    };\n    const renderItem = node => (<div>\n      <span>node </span>\n      <span id={`node-id-${node.id}`}>{node.text}</span>\n    </div>);\n    return <Tree data={data} keygen=\"id\" defaultExpanded={['1']} onDrop={handleDrop} renderItem={renderItem}/>;\n};\nexport default App;\n"},1727:function(e,n,t){"use strict";t.r(n);var a=t(24),r=t(0),d=t.n(r),i=t(144),l=t(568);n.default=function(){var e=d.a.useState(l.c),n=Object(a.a)(e,2),r=n[0],o=n[1];return d.a.createElement(i.a,{data:r,keygen:"id",defaultExpanded:["1"],onDrop:function(e,n,t,a){console.log(r,n,t,a),o(e)},dragImageSelector:function(e){return"#node-id-".concat(e.id)},dragImageStyle:{color:"red"},renderItem:function(e){return d.a.createElement("div",null,d.a.createElement("span",null,"node "),d.a.createElement("span",{id:"node-id-".concat(e.id)},e.text))},dragHoverExpand:!0})}},1728:function(e,n){e.exports="/**\n * cn - 设置拖动样式\n *    -- 可以通过 dragImageSelector, dragImageStyle, dragHoverExpand定义一些拖动的设置\n * en - Set the drag style\n *    -- Some drag settings can be defined by dragImageSelector, dragImageStyle, dragHoverExpand\n */\nimport React from 'react'\nimport { Tree, TYPE } from 'shineout'\nimport tree from 'doc/data/tree'\n\ntype DataItem = typeof tree[0]\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>\n\nconst App: React.FC = () => {\n  const [data, setData] = React.useState<TreeProps['data']>(tree)\n\n  const handleDrop: TreeProps['onDrop'] = (d, key, targetKey, position) => {\n    console.log(data, key, targetKey, position)\n    setData(d)\n  }\n\n  const renderItem: TreeProps['renderItem'] = node => (\n    <div>\n      <span>node </span>\n      <span id={`node-id-${node.id}`}>{node.text}</span>\n    </div>\n  )\n\n  return (\n    <Tree\n      data={data}\n      keygen=\"id\"\n      defaultExpanded={['1']}\n      onDrop={handleDrop}\n      dragImageSelector={d => `#node-id-${d.id}`}\n      dragImageStyle={{ color: 'red' }}\n      renderItem={renderItem}\n      dragHoverExpand\n    />\n  )\n}\n\nexport default App\n"},1729:function(e,n){e.exports="/**\n * cn - 设置拖动样式\n *    -- 可以通过 dragImageSelector, dragImageStyle, dragHoverExpand定义一些拖动的设置\n * en - Set the drag style\n *    -- Some drag settings can be defined by dragImageSelector, dragImageStyle, dragHoverExpand\n */\nimport React from 'react';\nimport { Tree } from 'shineout';\nimport tree from 'doc/data/tree';\nconst App = () => {\n    const [data, setData] = React.useState(tree);\n    const handleDrop = (d, key, targetKey, position) => {\n        console.log(data, key, targetKey, position);\n        setData(d);\n    };\n    const renderItem = node => (<div>\n      <span>node </span>\n      <span id={`node-id-${node.id}`}>{node.text}</span>\n    </div>);\n    return (<Tree data={data} keygen=\"id\" defaultExpanded={['1']} onDrop={handleDrop} dragImageSelector={d => `#node-id-${d.id}`} dragImageStyle={{ color: 'red' }} renderItem={renderItem} dragHoverExpand/>);\n};\nexport default App;\n"},1730:function(e,n,t){"use strict";t.r(n);var r=t(27),o=t(24),a=t(0),d=t.n(a),i=t(41),l=t(144),s=["0","1","2","3","4"].map(function(e){return{id:e}});n.default=function(){var e=d.a.useState(s),n=Object(o.a)(e,2),t=n[0],a=n[1];return d.a.createElement(l.a,{data:t,keygen:function(e,n){return"".concat(n,",").concat(e.id).replace(/^,/,"")},loader:function(n){var e=Object(i.a)(t,function(e){var t=n.split(","),a=e;t.forEach(function(n,e){a=a.find(function(e){return e.id===n}),e<t.length-1&&(a=a.children)}),a.children=Object(r.a)(Array.from({length:Math.round(4*Math.random())},function(e,n){return n}).map(function(e){return{id:"".concat(a.id,"-").concat(e)}}))});setTimeout(function(){return a(e)},500)},renderItem:function(e){return"node ".concat(e.id)}})}},1731:function(e,n){e.exports="/**\n * cn - 动态加载\n *    -- 数据过大，需要动态加载时，可以设置 loader 函数，当展开未定义 children（undefined）的节点时，触发此函数\n * en - Lazy load\n *    -- Set the loader function to dynamic fetch data. This function is triggered when the undefined child node is expanded.\n */\nimport React from 'react'\nimport immer from 'immer'\nimport { Tree, TYPE } from 'shineout'\n\ninterface DataItem {\n  id: string\n  children?: DataItem[]\n}\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>\n\nconst initData = ['0', '1', '2', '3', '4'].map(i => ({ id: i }))\nconst createRange = () => Array.from({ length: Math.round(Math.random() * 4) }, (_, i) => i)\n\nconst App: React.FC = () => {\n  const [data, setData] = React.useState<TreeProps['data']>(initData)\n  const loader: TreeProps['loader'] = (key: string) => {\n    const nextData = immer(data, draft => {\n      const path: string[] = key.split(',')\n      let target: any = draft\n      path.forEach((pid, i) => {\n        target = target.find((d: DataItem) => d.id === pid)\n        if (i < path.length - 1) target = target.children\n      })\n      target.children = [...createRange().map(i => ({ id: `${target.id}-${i}` }))]\n    })\n    setTimeout(() => setData(nextData), 500)\n  }\n\n  const keyGenerator: TreeProps['keygen'] = (node, parentKey) => `${parentKey},${node.id}`.replace(/^,/, '')\n\n  const renderItem: TreeProps['renderItem'] = node => `node ${node.id}`\n\n  return <Tree data={data} keygen={keyGenerator} loader={loader} renderItem={renderItem} />\n}\nexport default App\n"},1732:function(e,n){e.exports="/**\n * cn - 动态加载\n *    -- 数据过大，需要动态加载时，可以设置 loader 函数，当展开未定义 children（undefined）的节点时，触发此函数\n * en - Lazy load\n *    -- Set the loader function to dynamic fetch data. This function is triggered when the undefined child node is expanded.\n */\nimport React from 'react';\nimport immer from 'immer';\nimport { Tree } from 'shineout';\nconst initData = ['0', '1', '2', '3', '4'].map(i => ({ id: i }));\nconst createRange = () => Array.from({ length: Math.round(Math.random() * 4) }, (_, i) => i);\nconst App = () => {\n    const [data, setData] = React.useState(initData);\n    const loader = (key) => {\n        const nextData = immer(data, draft => {\n            const path = key.split(',');\n            let target = draft;\n            path.forEach((pid, i) => {\n                target = target.find((d) => d.id === pid);\n                if (i < path.length - 1)\n                    target = target.children;\n            });\n            target.children = [...createRange().map(i => ({ id: `${target.id}-${i}` }))];\n        });\n        setTimeout(() => setData(nextData), 500);\n    };\n    const keyGenerator = (node, parentKey) => `${parentKey},${node.id}`.replace(/^,/, '');\n    const renderItem = node => `node ${node.id}`;\n    return <Tree data={data} keygen={keyGenerator} loader={loader} renderItem={renderItem}/>;\n};\nexport default App;\n"},1733:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return p});var r=t(4),o=t(5),d=t(6),i=t(7),l=t(2),a=t(0),s=t.n(a),c=t(568);function u(a){return function(){var e,n=Object(l.a)(a);if(function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()){var t=Object(l.a)(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return Object(i.a)(this,e)}}var p=function(e){Object(d.a)(a,e);var t=u(a);function a(e){var n;return Object(r.a)(this,a),(n=t.call(this,e)).toggle=function(){n.setState({expand:!n.state.expand})},n.state={expand:!1},n}return Object(o.a)(a,[{key:"render",value:function(){var e=this.state.expand;return s.a.createElement("div",null,"Current node count: ",c.a.length,"."," ",s.a.createElement("a",{onClick:this.toggle},e?"Collapse":"Expand"," Code"),s.a.createElement("pre",{style:{display:e?"block":"none"}},JSON.stringify(c.c,null,2)))}}]),a}(a.Component)},1734:function(e,n){e.exports="import React, { Component } from 'react'\nimport data, { allIds } from 'doc/data/tree'\n\nexport default class extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { expand: false }\n  }\n\n  toggle = () => {\n    this.setState({ expand: !this.state.expand })\n  }\n\n  render() {\n    const { expand } = this.state\n    return (\n      <div>\n        Current node count: {allIds.length}.{' '}\n        <a onClick={this.toggle}>\n          {expand ? 'Collapse' : 'Expand'} Code\n        </a>\n        <pre style={{ display: expand ? 'block' : 'none' }}>{JSON.stringify(data, null, 2)}</pre>\n      </div>\n    )\n  }\n}\n"},305:function(e,n,t){"use strict";var a=t(21),r=t(60),o=t(74),u=t(563),d=t(4),i=t(5),l=t(1),s=t(20),c=t(6),p=t(7),f=t(2),m=t(0),h=t.n(m),g=t(14),x=t.n(g),y=t(17),b=t(22),v=t(10),T=t(61),k=t(186),E=t(9);function I(a){return function(){var e,n=Object(f.a)(a);if(function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()){var t=Object(f.a)(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return Object(p.a)(this,e)}}var C=function(e){Object(c.a)(a,e);var t=I(a);function a(e){var n;return Object(d.a)(this,a),(n=t.call(this,e)).handleClick=n.handleClick.bind(Object(l.a)(n)),n.handleUpdate=n.forceUpdate.bind(Object(l.a)(n)),n.handleRawChange=n.handleRawChange.bind(Object(l.a)(n)),n}return Object(i.a)(a,[{key:"componentDidMount",value:function(){Object(s.a)(Object(f.a)(a.prototype),"componentDidMount",this).call(this),this.props.datum.subscribe(v.a,this.handleUpdate)}},{key:"componentWillUnmount",value:function(){Object(s.a)(Object(f.a)(a.prototype),"componentWillUnmount",this).call(this),this.props.datum.unsubscribe(v.a,this.handleUpdate)}},{key:"getContent",value:function(e,n){var t=this.props.renderItem;return"string"==typeof t?e[t]:"function"==typeof t?t(e,n):""}},{key:"handleClick",value:function(e,n,t){var a=this.props,r=a.data;a.datum.set(r[t])}},{key:"handleRawChange",value:function(e){this.props.datum.set(e)}},{key:"render",value:function(){var t=this,e=this.props,n=e.block,a=e.data,r=e.datum,o=e.keygen,d=e.children,i=e.button,l=e.size,s=Object(E.c)(),c=x()(Object(T.a)("group",n&&"block",i&&"button","outline"===i&&"outline",i&&l,s&&"rtl"),this.props.className);return void 0===a?h.a.createElement("div",{className:c},h.a.createElement(u.a,{value:{onRawChange:this.handleRawChange,checked:r.check.bind(r)}},d)):h.a.createElement("div",{className:c},a.map(function(e,n){return h.a.createElement(k.a,{checked:r.check(e),disabled:r.disabled(e),key:Object(b.b)(e,o,n),htmlValue:n,index:n,onChange:t.handleClick},t.getContent(e,n))}),d)}}]),a}(y.b);C.defaultProps={renderItem:function(e){return e}};var S=C,D=Object(u.b)(k.a);D.Group=Object(a.compose)(r.a,o.a.hoc({limit:1,bindProps:["disabled","format","prediction"],pure:!1}))(S),D.displayName="ShineoutRadio",D.Group.displayName="ShineoutRadioGroup";n.a=D},563:function(e,n,t){"use strict";t.d(n,"a",function(){return i}),t.d(n,"b",function(){return l});var a=t(0),r=t.n(a),o=t(38),d=Object(o.a)(),i=d.Provider,l=function(t){return function(n){return r.a.createElement(d.Consumer,null,function(e){return r.a.createElement(t,Object.assign({},n,e))})}}}}]);