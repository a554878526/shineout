(window.webpackJsonpShineoutDoc=window.webpackJsonpShineoutDoc||[]).push([[34],{1221:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(561),i=n(563),l=n(40),u=n(1222),c=n.n(u),s=n(1223),p=n.n(s),f=Object(l.b)(c.a,p.a),m=[{name:"1-base",title:Object(l.b)("基本用法 \n 最基本的使用","Base \n The basic usage"),component:n(1224).default,rawText:n(1225)},{name:"2-size",title:Object(l.b)("大小 \n 内置了 3 种大小供选择，small, default, large，默认为 default","Size \n Three sizes are built in for selection: small, default, large, default value is default."),component:n(1226).default,rawText:n(1227)},{name:"3-layout",title:Object(l.b)("布局 \n 通过 layout 属性来控制组件是否显示以及显示的位置","Layout \n Use the layout property to control whether the child elements is displayed and where is displayed."),component:n(1228).default,rawText:n(1229)},{name:"4-text",title:Object(l.b)("文字 \n 通过 text 替换文字","Text \n Set text property to replace the default text.."),component:n(1230).default,rawText:n(1231)},{name:"5-align",title:Object(l.b)("位置 \n 内置了 3 种位置，left, center, right，默认为 left","Alignment \n Options: 'left', 'center', 'right', the default value is left."),component:n(1232).default,rawText:n(1233)},{name:"7-controlled",title:Object(l.b)("受控组件 \n 同时设置 current 和 onChange 属性，可以作为受控组件使用","Controlled \n Set both the current and onChange properties for being used as a controlled component."),component:n(1234).default,rawText:n(1235)},{name:"8-disabled",title:Object(l.b)("禁用 \n 设置 disabled 属性，可以禁用组件","Disabled \n Set the disabled property to disable the component."),component:n(1236).default,rawText:n(1237)},{name:"9-simple",title:Object(l.b)("Simple 模式 \n layout 设置为 simple；注意：simple 模式不与其他layout共存。","Simple mode \n layout set to simple; Note: simple mode does not coexist with other layouts."),component:n(1238).default,rawText:n(1239)}];t.default=Object(o.a)(function(e){return r.a.createElement(i.b,Object.assign({},e,{codes:void 0,source:f,examples:m}))})},1222:function(e,t){e.exports="# Pagination *分页*\n\n<example />\n\n## API \n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| align | 'left' \\| 'center' \\| 'right' | 'left' | 排布方式 |\n| className | string | 无 | 扩展className |\n| current | number | 无 | 当前页，如果传入值，组件为受控组件，必须通过onChange来处理回调 |\n| defaultCurrent | number | 1 | 初始页码 |\n| disabled | boolean | false | 禁用 |\n| layout | string[] | \\['links'] | 子组件布局，可选值为:<br />'links': 页码<br />'simple': 简约页码(和links不要同时使用)<br />'list': 每页数量选择<br />'jumper': 跳转页码<br />'simple': 极简模式<br />function({ current, total, pageSize }): 匿名函数，用来信息展示 |\n| onChange | (current: number, pageSize: number) => void | 无 | 页码或每页显示数量改变时回调<br />current: 新的页码<br />pageSize: 每页数量 |\n| pageSize | number | 10 | 每页数量 |\n| pageSizeList | number[] | \\[10, 20, 30, 50, 100] | 每页数量可选列表 |\n| size | 'large' \\| 'default' \\| 'small' | 'default' | 尺寸 |\n| text | object | 无 | 替换文案<br />prev: 上一页<br />next: 下一页<br />page: pageSizeList文字<br />jumper: 跳转输入框文字, '{input}' 为输入框占位 |\n| total | number | 0 | 总条目数。如果 total 小于 0，隐藏分页。 |\n| sizeListProps| object | 无 | 需要给分页数量的选择框的额外的属性 | \n"},1223:function(e,t){e.exports="# Pagination\n\n<example />\n\n## API \n| Property | Type | Default | Description |\n| --- | --- | --- | --- |\n| align | 'left' \\| 'center' \\| 'right' | 'left' | align of pagination |\n| className | string | - | Extend className |\n| current | number | - | Current page. |\n| defaultCurrent | number | 1 | Initial page number |\n| disabled | boolean | false | Disabled |\n| layout | string[] | \\['links'] | The layout of child elements, options: <br />'links': page number<br />'simple': simple page number(Do not use both simple and links)<br />'list': page size selector<br />'jumper': jump to page number<br />'simple': minimalist mode<br />function({ current, total, pageSize }): custom information |\n| onChange | (current: number, pageSize: number) => void | - | The callback function when current page or pageSize is changing<br />current: new page number<br />pageSize: number of each page |\n| pageSize | number | 10 | Number of each page |\n| pageSizeList | number[] | \\[10, 20, 30, 50, 100] | The list of number of each page |\n| size | 'large' \\| 'default' \\| 'small' | 'default' | size of pagination |\n| text | object | none | Replaced text<br />prev: the previous page<br />next: the next page<br />page:the text of pageSizeList<br />jumper: jump to input box text, '{input}' pilaceholder for input box |\n| total | number | 0 | Total number. If total is less than 0, hide the Pagination. |\n| sizeListProps| object | - | Additional attributes which need to given page size selector  | \n"},1224:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(309);t.default=function(){return r.a.createElement(o.a,{defaultCurrent:10,total:1e3})}},1225:function(e,t){e.exports="/**\n * cn - 基本用法\n *    -- 最基本的使用\n * en - Base\n *    -- The basic usage\n */\nimport React from 'react'\nimport { Pagination } from 'shineout'\n\nexport default function() {\n  return <Pagination defaultCurrent={10} total={1000} />\n}\n"},1226:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(309);t.default=function(){return r.a.createElement("div",null,r.a.createElement(o.a,{size:"small",total:1e3}),r.a.createElement("br",null),r.a.createElement(o.a,{total:1e3}),r.a.createElement("br",null),r.a.createElement(o.a,{size:"large",total:1e3}))}},1227:function(e,t){e.exports="/**\n * cn - 大小\n *    -- 内置了 3 种大小供选择，small, default, large，默认为 default\n * en - Size\n *    -- Three sizes are built in for selection: small, default, large, default value is default.\n */\nimport React from 'react'\nimport { Pagination } from 'shineout'\n\nexport default function() {\n  return (\n    <div>\n      <Pagination size=\"small\" total={1000} />\n      <br />\n      <Pagination total={1000} />\n      <br />\n      <Pagination size=\"large\" total={1000} />\n    </div>\n  )\n}\n"},1228:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(309),i=function(e){var t=e.total;return"total ".concat(t)};t.default=function(){return r.a.createElement(o.a,{total:128,pageSize:50,text:{jumper:"Go to {input}"},onChange:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.log(t)},layout:["links","list",i,"jumper"]})}},1229:function(e,t){e.exports="/**\n * cn - 布局\n *    -- 通过 layout 属性来控制组件是否显示以及显示的位置\n * en - Layout\n *    -- Use the layout property to control whether the child elements is displayed and where is displayed.\n */\nimport React from 'react'\nimport { Pagination } from 'shineout'\n\nconst info = ({ total }) => `total ${total}`\n\nexport default function() {\n  return (\n    <Pagination\n      total={128}\n      pageSize={50}\n      text={{\n        jumper: 'Go to {input}',\n      }}\n      onChange={(...args) => console.log(args)}\n      layout={['links', 'list', info, 'jumper']}\n    />\n  )\n}\n"},1230:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(309);function i(e){var t=e.current,n=e.pageSize,a=e.total,r=t*n;return a<r&&(r=a),"".concat((t-1)*n+1," to ").concat(r," of ").concat(a," items")}t.default=function(){return r.a.createElement(o.a,{text:{prev:"Previous",next:"Next",page:"/ page"},total:256,pageSize:50,layout:["links","list",i]})}},1231:function(e,t){e.exports="/**\n * cn - 文字\n *    -- 通过 text 替换文字\n * en - Text\n *    -- Set text property to replace the default text..\n */\nimport React from 'react'\nimport { Pagination } from 'shineout'\n\nfunction info({ current, pageSize, total }) {\n  const from = (current - 1) * pageSize + 1\n  let to = current * pageSize\n  if (to > total) to = total\n  return `${from} to ${to} of ${total} items`\n}\n\nexport default function() {\n  return (\n    <Pagination\n      text={{\n        prev: 'Previous',\n        next: 'Next',\n        page: '/ page',\n      }}\n      total={256}\n      pageSize={50}\n      layout={['links', 'list', info]}\n    />\n  )\n}\n"},1232:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(309),i=function(e){var t=e.total;return"Total ".concat(t)};t.default=function(){return r.a.createElement("div",null,r.a.createElement(o.a,{align:"center",total:100,layout:["links",i]}),r.a.createElement("br",null),r.a.createElement(o.a,{align:"right",total:100,layout:[i,"links"]}))}},1233:function(e,t){e.exports="/**\n * cn - 位置\n *    -- 内置了 3 种位置，left, center, right，默认为 left\n * en - Alignment\n *    -- Options: 'left', 'center', 'right', the default value is left.\n */\nimport React from 'react'\nimport { Pagination } from 'shineout'\n\nconst info = ({ total }) => `Total ${total}`\n\nexport default function() {\n  return (\n    <div>\n      <Pagination align=\"center\" total={100} layout={['links', info]} />\n      <br />\n      <Pagination align=\"right\" total={100} layout={[info, 'links']} />\n    </div>\n  )\n}\n"},1234:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return m});var i=n(4),a=n(5),l=n(6),r=n(7),o=n(2),u=n(0),c=n.n(u),s=n(309);function p(a){return function(){var e,t=Object(o.a)(a);if(function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()){var n=Object(o.a)(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Object(r.a)(this,e)}}var f=function(e){var t=e.current;return"Current page ".concat(t)},m=function(e){Object(l.a)(o,e);var r=p(o);function o(){var n;Object(i.a)(this,o);for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];return(n=r.call.apply(r,[this].concat(t))).state={current:1,pageSize:20},n.handleChange=function(e,t){n.setState({current:e,pageSize:t})},n}return Object(a.a)(o,[{key:"render",value:function(){var e=this.state,t=e.current,n=e.pageSize;return c.a.createElement("div",null,c.a.createElement(s.a,{text:{prev:"Previous",next:"Next",page:"/ page"},current:t,onChange:this.handleChange,pageSize:n,total:1e3,layout:["links","list"]}),c.a.createElement("br",null),c.a.createElement(s.a,{current:t,onChange:this.handleChange,pageSize:n,total:1e3,layout:["links",f]}))}}]),o}(u.PureComponent)},1235:function(e,t){e.exports="/**\n * cn - 受控组件\n *    -- 同时设置 current 和 onChange 属性，可以作为受控组件使用\n * en - Controlled\n *    -- Set both the current and onChange properties for being used as a controlled component.\n */\nimport React, { PureComponent } from 'react'\nimport { Pagination } from 'shineout'\n\nconst info = ({ current }) => `Current page ${current}`\n\nexport default class extends PureComponent {\n  state = {\n    current: 1,\n    pageSize: 20,\n  }\n\n  handleChange = (current, pageSize) => {\n    this.setState({ current, pageSize })\n  }\n\n  render() {\n    const { current, pageSize } = this.state\n    return (\n      <div>\n        <Pagination\n          text={{\n            prev: 'Previous',\n            next: 'Next',\n            page: '/ page',\n          }}\n          current={current}\n          onChange={this.handleChange}\n          pageSize={pageSize}\n          total={1000}\n          layout={['links', 'list']}\n        />\n        <br />\n        <Pagination\n          current={current}\n          onChange={this.handleChange}\n          pageSize={pageSize}\n          total={1000}\n          layout={['links', info]}\n        />\n      </div>\n    )\n  }\n}\n"},1236:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(309);t.default=function(){return r.a.createElement(o.a,{disabled:!0,defaultCurrent:10,layout:["links","list"],total:1e3})}},1237:function(e,t){e.exports="/**\n * cn - 禁用\n *    -- 设置 disabled 属性，可以禁用组件\n * en - Disabled\n *    -- Set the disabled property to disable the component.\n */\nimport React from 'react'\nimport { Pagination } from 'shineout'\n\nexport default function() {\n  return <Pagination disabled defaultCurrent={10} layout={['links', 'list']} total={1000} />\n}\n"},1238:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(309);t.default=function(){return r.a.createElement(o.a,{layout:["simple"],pageSize:20,total:100})}},1239:function(e,t){e.exports="/**\n * cn - Simple 模式\n *    -- layout 设置为 simple；注意：simple 模式不与其他layout共存。\n * en - Simple mode\n *    -- layout set to simple; Note: simple mode does not coexist with other layouts.\n */\nimport React from 'react'\nimport { Pagination } from 'shineout'\n\nexport default function () {\n  return <Pagination layout={['simple']} pageSize={20} total={100} />\n}\n"}}]);