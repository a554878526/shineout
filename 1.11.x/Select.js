(window.webpackJsonpShineoutDoc=window.webpackJsonpShineoutDoc||[]).push([[41],{1194:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(562),o=n(563),i=n(40),s=n(1195),c=n.n(s),d=n(1196),u=n.n(d),p=Object(i.b)(c.a,u.a),m=[{name:"01-base",isTs:!0,isTest:!1,title:Object(i.b)("基本用法 \n Select 没有单独的 Option 选项，通过数据来渲染。","Base \n Select generate group of options from data."),component:n(1197).default,rawText:n(1198),parseTsText:n(1199)},{name:"01-cadapt",isTs:!0,isTest:!1,title:Object(i.b)(" \n 当文字过长时，下拉列表宽度根据内容自由展开"," \n options auto adapt width"),component:n(1200).default,rawText:n(1201),parseTsText:n(1202)},{name:"01-multiple",isTs:!0,isTest:!1,title:Object(i.b)("多选 \n multiple 属性为true时，为多选状态，默认为单选","Multiple \n Set the multiple property to true, it is multi-selection."),component:n(1203).default,rawText:n(1204),parseTsText:n(1205)},{name:"01-o-compressed",isTs:!0,isTest:!1,title:Object(i.b)(" \n 设置 compressed 使选中值合并展示，鼠标悬浮时将会展示所有值。"," \n Set the compressed property to compress values, hover to show all values."),component:n(1206).default,rawText:n(1207),parseTsText:n(1208)},{name:"02-format",isTs:!0,isTest:!1,title:Object(i.b)("数据处理 \n 设置 format 选项把数据对象格式化为指定的 value","Datum \n Set format property to format the data object to the specified value."),component:n(1209).default,rawText:n(1210),parseTsText:n(1211)},{name:"02-group",isTs:!0,isTest:!1,title:Object(i.b)("分组 \n 可以通过 groupBy 去将数据分组 \n 组件会通过该函数的返回值对内容进行分组, 如果返回的是空, 则默认不分组, 为了防止产生歧义, 建议有一个默认分组.","GroupBy \n Grouping data by groupBy. \n The component will group the content by the return value of the function. If the return is empty, the default is not grouped. To prevent ambiguity, it is recommended to have a default grouping."),component:n(1212).default,rawText:n(1213),parseTsText:n(1214)},{name:"04-clearable",isTs:!0,isTest:!1,title:Object(i.b)("可清空 \n clearable 属性为 true 时，hover 后会显示清空图标。","Clearable \n Set the clearable property to true, the clear icon will be displayed on hover."),component:n(1215).default,rawText:n(1216),parseTsText:n(1217)},{name:"04-size",isTs:!0,isTest:!1,title:Object(i.b)("大小 \n 有三种 size，['small', default, 'large']","Size \n There are three sizes, ['small', default, 'large']"),component:n(1218).default,rawText:n(1219),parseTsText:n(1220)},{name:"06-bigdata",isTs:!0,isTest:!1,title:Object(i.b)("性能 \n Select 内部使用了虚拟列表来优化性能，本例加载了10000条数据。","Performance \n Select uses a lazy loading to optimize performance. This example loads 10,000 pieces of data."),component:n(1221).default,rawText:n(1222),parseTsText:n(1223)},{name:"07-disabled",isTs:!0,isTest:!1,title:Object(i.b)("禁用 \n 设置 disabled 禁用组件","Disabled \n Set the disabled property to disable the component."),component:n(1224).default,rawText:n(1225),parseTsText:n(1226)},{name:"08-filter",isTs:!0,isTest:!1,title:Object(i.b)("筛选数据 - 内置 \n onFilter 返回函数时，使用这个函数做前端过滤","Filter - built-in \n When the onFilter property returns a function, use this function to do front-end filtering."),component:n(1227).default,rawText:n(1228),parseTsText:n(1229)},{name:"09-filter",isTs:!0,isTest:!1,title:Object(i.b)("筛选数据 - 服务端 \n onFilter 函数不返回结果时，从服务端筛选数据或自行处理","Filter - server \n When the onFilter property don't return a function, you can filter data from server or filter by yourself."),component:n(1230).default,rawText:n(1231),parseTsText:n(1232)},{name:"10-filter",isTs:!0,isTest:!1,title:Object(i.b)(" \n 示例：服务端过滤多选"," \n Example: Server-side filters multiple selection."),component:n(1233).default,rawText:n(1234),parseTsText:n(1235)},{name:"11-create",isTs:!0,isTest:!1,title:Object(i.b)("创建选项 \n 设置 onCreate 属性可以通过输入创建选项","Create by input \n Set the onCreate property can create options by inputting."),component:n(1236).default,rawText:n(1237),parseTsText:n(1238)},{name:"12-create",isTs:!0,isTest:!1,title:Object(i.b)(" \n 示例：创建选项和 filter 配合使用"," \n Example: Create options with filter"),component:n(1239).default,rawText:n(1240),parseTsText:n(1241)},{name:"13-absolute",isTs:!0,isTest:!1,title:Object(i.b)("绝对定位 \n 如果选项弹出层的父容器被遮挡，可以设置 absolute 属性使弹出选项在单独层中渲染。（非必要情况下不建议）","Absolute \n If the parent container of the pop-up layer is occluded, you can set the absolute property to make the pop-up options rendered in a separate layer. (not recommended if not necessary)"),component:n(1242).default,rawText:n(1243),parseTsText:n(1244)},{name:"14-columns-default",isTs:!0,isTest:!1,title:Object(i.b)("多列选项 \n 设置 columns 属性，选项变为多列展示，设置 columnWidth 指定每一列宽度","Columns \n Set columns property over 1, options will display in multiple columns."),component:n(1245).default,rawText:n(1246),parseTsText:n(1247)},{name:"14-columns-stack",isTs:!0,isTest:!1,title:Object(i.b)(" \n columns 为 -1 时选项会堆叠展示， columnWidth 为选项框的宽度"," \n Set columns -1, options will display end by end， columnsWidth is the width of the option box"),component:n(1248).default,rawText:n(1249),parseTsText:n(1250)},{name:"15-treeData",isTs:!0,isTest:!1,title:Object(i.b)("树形选择 \n 通过设置 treeData 来实现树形选择。","Tree Select \n Set treeData to select with tree."),component:n(1251).default,rawText:n(1252),parseTsText:n(1253)},{name:"16-onFilter",isTs:!0,isTest:!1,title:Object(i.b)("树形选择 - 筛选数据 \n 通过设置 onFilter 来筛选树形数据。","Tree Select Filter \n Set onFilter to filter tree data."),component:n(1254).default,rawText:n(1255),parseTsText:n(1256)},{name:"16-z-advanced-filter",isTs:!0,isTest:!1,title:Object(i.b)(" \n 使用 onAdvancedFilter 属性开启高级筛选，可针对当前层级在筛选结果和原始数据间切换"," \n In the advanced filter mode, you can switch between the filter results and the original data for the current level by pressing the button"),component:n(1257).default,rawText:n(1258),parseTsText:n(1259)},{name:"17-result",isTs:!0,isTest:!1,title:Object(i.b)("自定义结果 \n 使用 renderResult 去自定义选中的结果。","result \n use renderRsult. to format the result"),component:n(1260).default,rawText:n(1261),parseTsText:n(1262)},{name:"18-innertitle",isTs:!0,isTest:!1,title:Object(i.b)("内嵌标题 \n 使用 innerTitle 展示内嵌标题","inner title \n use innerTitle to display the inner title"),component:n(1263).default,rawText:n(1264),parseTsText:n(1265)},{name:"19-loading",isTs:!0,isTest:!1,title:Object(i.b)("加载中 \n 数据加载中，为true时会展示一个默认的[Spin](/components/Spin)组件，可以传入一个自定义的Spin代替","Loading \n When it is true, a default [Spin](/components/Spin) component will be displayed, a custom loading icon can be passed in to replace."),component:n(1266).default,rawText:n(1267),parseTsText:n(1268)},{name:"20-renderOptionList",isTs:!0,isTest:!1,title:Object(i.b)("自定义渲染下拉列表 \n 使用 renderOptionList 来自定义渲染下拉列表","custom render dropdown \n Use the renderOptionList property to customize the render dropdown list"),component:n(1269).default,rawText:n(1270),parseTsText:n(1271)},{name:"test-001-maxlength",isTs:!0,isTest:!0,title:Object(i.b)("筛选限制字符长度 \n maxLength","筛选限制字符长度 \n maxLength"),component:n(1272).default,rawText:n(1273),parseTsText:n(1274)},{name:"test-002-header",isTs:!0,isTest:!0,title:Object(i.b)("自定义 header \n header","自定义 header \n header"),component:n(1275).default,rawText:n(1276),parseTsText:n(1277)},{name:"test-003-hideCreateOption",isTs:!0,isTest:!0,title:Object(i.b)("hideCreateOption \n 创建选项不展示option","hideCreateOption \n 创建选项不展示option"),component:n(1278).default,rawText:n(1279),parseTsText:n(1280)},{name:"test-004-blurAndSubmit",isTs:!0,isTest:!0,title:Object(i.b)("创建选项 blur 后点击回调搜索 \n 修复blur 后延迟导致 onSubmit 的数据不对的问题",""),component:n(1281).default,rawText:n(1282),parseTsText:n(1283)}];t.default=Object(l.a)(function(e){return r.a.createElement(o.b,Object.assign({},e,{codes:void 0,source:p,examples:m}))})},1195:function(e,t){e.exports="# Select *选择框*\n\n<example />\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| maxLength | number | 无 | Select 输入框输入字符串最大长度 |\n| emptyText | ReactNode | 无 | 自定义empty文案 |\n| width | number | null | 宽度 |\n| optionWidth | number | 无 | 下拉列表宽度 |\n| style | object | null | 扩展外层style |\n| absolute | boolean \\| (() => element) | false | 为 true 时，选项弹出层在 BODY 下独立 render， 为函数时 选项弹出层在函数返回的 DOM 下render  |\n| autoAdapt | boolean | false | 下拉列表宽度根据内容自由展开 |\n| clearable | boolean | false | 是否可清除值 |\n| multiple | boolean | false | 是否是多选 |\n| columns | number | 1 | columns 大于 1 时，选项展示为多列布局模式 |\n| columnWidth | number | 160 | column 单列宽度，仅在 columns 大于 1 时有效 |\n| data | any[] | 必填 | 数据项，单条数据作为 value 的数据必须是唯一的 |\n| treeData | any[] | 无 | 树形结构数据项，\\[{children: []}\\] |\n| defaultValue | any[] | | 初始值 |\n| disabled | (data: any) => boolean \\| boolean | false | 如果 disabled 为 true，禁用全部选项，如果 disabled 为函数，根据函数反回结果禁用选项 |\n| filterDelay | number | 400 | 毫秒。用户输入触发 fitler 事件的延时 |\n| format | (data: any) => any \\| string | d => d | 格式化 value<br />默认值，返回原始数据<br />为string时，会作为key从原始数据中获取值，相当于 (d) => d\\[format\\]<br /> 为函数时，以函数返回结果作为 value |\n| name | string | 无 | Form 存取数据的名称 |\n| keygen | ((data: any) => string) \\| string \\| true | 必填 | 生成每一项key的辅助方法<br />为 true 时，以数据项本身作为key，相当于 (d => d)<br />为函数时，使用此函数返回值<br />为string时，使用这个string对应的数据值。如 'id'，相当于 (d => d.id) |\n| onChange | (value: any, data: any, checked: boolean) => void | 无 | value 为 datum.getValue() |\n| onCreate | (input: string) => any \\| boolean | 无 | 如果设置了 onCreate 事件，组件为可输入状态<br />onCreate为函数时，将此函数返回值作为新的选项拆入最上方<br />onCreate为true时，使用默认函数 text => text |\n| onFilter | (text: string) => (data: any) => boolean | 无 | onFilter 不为空时，可以输入过滤数据<br />onFilter 如果返回一个函数，使用这个函数做前端过滤<br />如果不返回，可以自行做后端过滤 |\n| prediction | (value: any, data: any) => boolean | (val, d) => val===format(d) | 默认使用 format 函数执行的结果来比较是否匹配，在某些情况下（例如返回原始数据的对象，更新数据时，生成了一个值相同，非同一个对象的选项），需要借助 prediction 函数来判断是否匹配 |\n| renderItem | (data: any) => ReactNode \\| string | 必填 | 为 string 时，返回 d\\[string]<br />为 function 时，返回函数结果 |\n| renderResult | (data: any) => ReactNode \\| string | renderItem | 选中后在结果中显示的内容，默认和 renderItem 相同 |\n| value | any[] \\| string \\| object | | 在Form中，value会被表单接管，value无效 |\n| compressed | boolean \\| 'no-repeat' | false | 将选中值合并，只在多选模式下有效；为'no-repeat'时弹出框中不重复展示值 |\n| zIndex | number | 1000 | 选项列表 z-index 值 |\n| groupBy | (record: any, index: number, data: any) => any | 无 | 分组 |\n| filterSingleSelect | boolean | false | 当筛选数据仅为一条时，失焦后直接选中该条数据。仅在 Filter 下有效。 |\n| separator | string | 无 | 多选情况下设置后，value 会处理为 separator 分隔的字符串 |\n| childrenKey | string | 'children' | 树形数据下，指定子数据的属性名 |\n| defaultExpandAll| boolean | false | 默认展开全部子节点, 仅树形数据下有效 |\n| renderUnmatched | (data: any) => ReactNode | 无 | \b渲染未匹配值的方式\b |\n| emptyAfterSelect | boolean | false | 选中后是否清空输入框内容（在多选情况下适用） |\n| showArrow | boolean | true | 是否显示下拉箭头，仅针对单选情况 |\n| showHitDescendants | boolean | false | 筛选后是否展示命中节点的后代节点 |\n| focusSelected | boolean | true | onCreate 或 onFilter 在单选情况下单击值后是否选中值 |\n| noCache | boolean | false | 是否开启数据缓存，如果数据存在动态更新的情况建议开启 |\n| compressedClassName | string | 无 | 多选合并展示弹出框的类名 |\n| onCollapse | (collapse: boolean) => void | 无 | 下拉列表展开/收起回调 |\n| resultClassName | ((value: any) => string) \\| string | 无 | 选中结果内容容器的className |\n| columnsTitle | ReactNode | 无 | 多列选项多选时的标题文字 |\n| reFocus | boolean | 无 | 存在onFilter和onCreate，选中 Option，自动focus Input |\n| header | ReactElement | 无 | 自定义渲染 Option List Header |\n| lineHeight | number | 34 | 选项高度。列表项使用虚拟列表渲染，当选项高度改变时，应该通过 lineHeight 来指定正确高度 |\n| hideCreateOption | boolean | false | 在使用创建选项时，在选项列表中隐藏该选项，回车后直接选中该值 |\n| underline | boolean | false | 是否只展示下边框 |\n| innerTitle | string | - | 内嵌标题 |\n| filterSameChange | boolean | false | 过滤掉具有相同值的onChange回调 |\n| itemsInView | number | 10 | 单次render的最大行数。Select 采用了lazy render的方式来优化在大量数据下的性能，如果你的表格显示的高度超出了10条，可以调整itemsInView |\n| loading |  boolean | ReactNode \\| false | 数据加载中，为true时会展示一个默认的[Spin](/components/Spin)组件，可以传入一个自定义的Spin代替 |\n| size |  'large' \\| 'default' \\| 'small'| 'default' | 尺寸 |\n| trim | boolean | false | 失去焦点时会自动删除空白字符 |\n| onAdvancedFilter | (text: string) => ((data: Item) => boolean) \\| void | 无 | 使用 onAdvancedFilter 属性开启高级筛选，可针对当前层级在筛选结果和原始数据间切换 |\n| convertBr | string \\| ((text: string) => string) | \",\" | 用来转化粘贴文本中的换行 |\n| renderOptionList | (list: ReactElement)=>  ReactElement | - | 自定义渲染下拉列表 |\n"},1196:function(e,t){e.exports="# Select\n\n<example />\n\n## API\n\n| Property | Type | Default | Description |\n| --- | --- | --- | --- |\n| maxLength | number | none | The maximum length of the input string in the Select input box |\n| emptyText | ReactNode | none | custom empty copy |\n| width | number | null | width |\n| optionWidth | number | none | width of option list |\n| style | object | null | expand style |\n| absolute | boolean \\| (() => element) | false | When it is true, the pop-up layer of option append into document.body. When it is function, the pop-up layer of option append into it's return DOM.  |\n| autoAdapt | boolean | false | option list is auto adapt |\n| clearable | boolean | false | If clearable is true, show clear value icon |\n| multiple | boolean | false | if it is true, it will be multiple selection |\n| columns | number | 1 | Option columns.  |\n| columnWidth | number | 160 | Option column width, only effective when columns > 1 |\n| data | any[] | required | Options data |\n| treeData | any[] | - | tree select data，\\[{children: []}\\] |\n| defaultValue | any[] | | Initial value |\n| disabled | (data: any) => boolean \\| boolean | false | When the value is true, disabled all checkboxes; When the value is function, disable the checkbox that this function returns true. |\n| filterDelay | number | 400 | ms. The delay of user input triggering filter events |\n| format | (data: any) => any \\| string | d => d | Format value<br />The defaule value is return the original data.<br />When it is a string, the value is fetched from the original data as a key equivalent to (d) => d\\[format\\]<br />When it is a function, use its return value. |\n| name | string | - | The name of a Form that accesses data |\n| keygen | ((data: any) => string) \\| string \\| true | index | Generate a auxiliary method for each key<br />If not filled, index will be used(not recommended,there may be problems with more than 10 data)<br />When it is a function, use its return value.<br />When it is a string，ues the value of the string.For example, 'id' is the same thing as (d) => d.id. |\n| onChange | (value: any, data: any, checked: boolean) => void | - | value is the datum.getValue(). |\n| onCreate | (input: string) => any \\| boolean | - | If the onCreate event is set, the component is inputable.<br />When onCreate is a function, the return value of this function is diaplay at the top as a new option.<br />When onCreate is true, use the built-in functuon text => text. |\n| onFilter | (text: string) => (data: any) => boolean | - | When the onFilter is not empty, you can filter data by input.<br />If the onFilter returns a function, use this function as a front-end filter.<br />If return undefined, you can do your own backend filtering. |\n| prediction | (value: any, data: any) => boolean | (val, d) => val===format(d) | By default, the result of the format function is used to compare whether it matches. In some cases (for example, whe an object that returns the original data is updated, an different option with the same value  is generated), the prediction function needs to be used to determine whether match |\n| renderItem | (data: any) => ReactNode \\| string | required | When it is a string, return d\\[string]<br />When it is a function, return the result of the function. |\n| renderResult | (data: any) => ReactNode \\| string | renderItem | The content displayed in the result after selecting, if not set, use renderItem |\n| value | any[] \\| string \\| object | | In the Form, the value will be taken over by the form and the value will be invalid. |\n| compressed | boolean \\| 'no-repeat' | false | Merges selected values, valid only in multiselect mode; the repeat value will not appear in the Popover when it is'no-repeat'. |\n| zIndex | number | 1000 | options z-index |\n| groupBy | (record: any, index: number, data: any) => any | - | group by |\n| filterSingleSelect | boolean | false | blur to select the data when filter data has only single. only work in filter. |\n| separator | string | none | set with multiple, value will separator by this |\n| childrenKey | string | 'children' | treeData，the key of the children data name |\n| defaultExpandAll| boolean | false | expand all node, only in can be use in treeData |\n| renderUnmatched | (data: any) => ReactNode | none | the way to render not matched data value |\n| emptyAfterSelect | boolean | false | empty input after select value |\n| showArrow | boolean | true | show dropdown arrow, only single select |\n| showHitDescendants | boolean | false | Whether to show the descendant nodes of the hit node after filtering |\n| focusSelected | boolean | true | selected value while click under onCreate or onFilter |\n| noCache | boolean | false | data cache, if data change asynchronously, better set true |\n| compressedClassName | string | none | compressed popover classname |\n| onCollapse | (collapse: boolean) => void | none | option list collapse callback |\n| resultClassName | ((value: any) => string) \\| string | none | The className of the selected result content container |\n| columnsTitle | ReactNode | none | title of columns multiple select |\n| reFocus | boolean | false | There are onFilter and onCreate, select Option, automatically focus Input |\n| header | ReactElement | null | Custom render option list header |\n| lineHeight | number | 34 | Option height. List items are rendered using virtual lists, and when the option height changes, the correct height should be specified via lineHeight |\n| hideCreateOption | boolean | false | hide the creat option while set onCreate |\n| underline | boolean | false | only display border bottom  |\n| innerTitle | string | - | inner title |\n| filterSameChange | boolean | false | filter out value change callbacks with the same value |\n| itemsInView | number | 10 | The maximum number of rows for a single render. Select uses lazy render to optimize performance under large amounts of data. If your table displays more than 10 rows, you can change the value of itemsInView. |\n| loading |  boolean \\| ReactNode | false | When it is true, a default [Spin](/components/Spin) component will be displayed, a custom loading icon can be passed in to replace |\n| size |  'large' \\| 'default' \\| 'small'| 'default' | size |\n| trim | boolean | false | When trim is true, blank characters are automatically deleted when lose focus |\n| onAdvancedFilter | (text: string) => ((data: Item) => boolean) \\| void | - | Use the onAdvancedFilter property to enable filtering to switch between filtering results and raw data for the current hierarchy. |\n| convertBr | string | ((text: string) => string) | \",\" | Used to convert line breaks in pasted text |\n| renderOptionList | (list: ReactElement)=>  ReactElement | - | Custom render dropdown |\n"},1197:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement(l.a,{keygen:!0,style:{width:240},data:o,defaultValue:""})}},1198:function(e,t){e.exports="/**\n * cn - 基本用法\n *    -- Select 没有单独的 Option 选项，通过数据来渲染。\n * en - Base\n *    -- Select generate group of options from data.\n */\nimport React from 'react'\nimport { Select } from 'shineout'\n\nconst data: string[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => <Select keygen style={{ width: 240 }} data={data} defaultValue=\"\" />\n\nexport default App\n"},1199:function(e,t){e.exports="/**\n * cn - 基本用法\n *    -- Select 没有单独的 Option 选项，通过数据来渲染。\n * en - Base\n *    -- Select generate group of options from data.\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => <Select keygen style={{ width: 240 }} data={data} defaultValue=\"\"/>;\nexport default App;\n"},1200:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=["red","orange","this option is so long long long long long","green","cyan","blue","violet"];t.default=function(){return r.a.createElement(l.a,{keygen:!0,absolute:!0,autoAdapt:!0,style:{width:240},data:o,defaultValue:""})}},1201:function(e,t){e.exports="/**\n * cn -\n *    -- 当文字过长时，下拉列表宽度根据内容自由展开\n * en -\n *    --  options auto adapt width\n */\nimport React from 'react'\nimport { Select } from 'shineout'\n\ntype SelectItem = string\n\nconst data: SelectItem[] = [\n  'red',\n  'orange',\n  'this option is so long long long long long',\n  'green',\n  'cyan',\n  'blue',\n  'violet',\n]\n\nconst App: React.FC = () => <Select keygen absolute autoAdapt style={{ width: 240 }} data={data} defaultValue=\"\" />\n\nexport default App\n"},1202:function(e,t){e.exports="/**\n * cn -\n *    -- 当文字过长时，下拉列表宽度根据内容自由展开\n * en -\n *    --  options auto adapt width\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst data = [\n    'red',\n    'orange',\n    'this option is so long long long long long',\n    'green',\n    'cyan',\n    'blue',\n    'violet',\n];\nconst App = () => <Select keygen absolute autoAdapt style={{ width: 240 }} data={data} defaultValue=\"\"/>;\nexport default App;\n"},1203:function(e,t,n){"use strict";n.r(t);var r=n(24),l=n(0),o=n.n(l),i=n(200),s={width:300,marginBottom:15},c=[{id:"red"},{id:"cyan"},{id:"blue"},{id:"green"},{id:"violet"},{id:"yellow"},{id:"orange"}];t.default=function(){var e=Object(l.useState)(["pink"]),t=Object(r.a)(e,2),n=t[0],a=t[1];return o.a.createElement(i.a,{multiple:!0,keygen:"id",format:"id",data:c,style:s,value:n,renderItem:"id",onChange:function(e,t,n){console.log(e,t,n),a(e)},placeholder:"Multiple select"})}},1204:function(e,t){e.exports="/**\n * cn - 多选\n *    -- multiple 属性为true时，为多选状态，默认为单选\n * en - Multiple\n *    -- Set the multiple property to true, it is multi-selection.\n */\nimport React, { useState } from 'react'\nimport { Select, TYPE } from 'shineout'\n\ninterface SelectItem {\n  id: string\n}\ntype SelectValue = string[]\ntype SelectProps = TYPE.Select.Props<SelectItem, SelectValue>\ntype SelectOnChange = SelectProps['onChange']\n\nconst style: React.CSSProperties = { width: 300, marginBottom: 15 }\n\nconst data: SelectItem[] = [\n  { id: 'red' },\n  { id: 'cyan' },\n  { id: 'blue' },\n  { id: 'green' },\n  { id: 'violet' },\n  { id: 'yellow' },\n  { id: 'orange' },\n]\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<SelectValue>(['pink'])\n\n  const handleChange: SelectOnChange = (v, d, c) => {\n    console.log(v, d, c)\n    setValue(v)\n  }\n\n  return (\n    <Select\n      multiple\n      keygen=\"id\"\n      format=\"id\"\n      data={data}\n      style={style}\n      value={value}\n      renderItem=\"id\"\n      onChange={handleChange}\n      placeholder=\"Multiple select\"\n    />\n  )\n}\n\nexport default App\n"},1205:function(e,t){e.exports="/**\n * cn - 多选\n *    -- multiple 属性为true时，为多选状态，默认为单选\n * en - Multiple\n *    -- Set the multiple property to true, it is multi-selection.\n */\nimport React, { useState } from 'react';\nimport { Select } from 'shineout';\nconst style = { width: 300, marginBottom: 15 };\nconst data = [\n    { id: 'red' },\n    { id: 'cyan' },\n    { id: 'blue' },\n    { id: 'green' },\n    { id: 'violet' },\n    { id: 'yellow' },\n    { id: 'orange' },\n];\nconst App = () => {\n    const [value, setValue] = useState(['pink']);\n    const handleChange = (v, d, c) => {\n        console.log(v, d, c);\n        setValue(v);\n    };\n    return (<Select multiple keygen=\"id\" format=\"id\" data={data} style={style} value={value} renderItem=\"id\" onChange={handleChange} placeholder=\"Multiple select\"/>);\n};\nexport default App;\n"},1206:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=[{id:"red"},{id:"cyan"},{id:"blue"},{id:"green"},{id:"violet"},{id:"yellow"},{id:"orange"}];t.default=function(){return r.a.createElement(l.a,{multiple:!0,data:o,compressed:!0,format:"id",keygen:"id",renderItem:"id",style:{width:300},placeholder:"Multiple select Compressed"})}},1207:function(e,t){e.exports="/**\n * cn -\n *    -- 设置 compressed 使选中值合并展示，鼠标悬浮时将会展示所有值。\n * en -\n *    -- Set the compressed property to compress values, hover to show all values.\n */\nimport React from 'react'\nimport { Select } from 'shineout'\n\ninterface SelectItem {\n  id: string\n}\n\nconst data: SelectItem[] = [\n  { id: 'red' },\n  { id: 'cyan' },\n  { id: 'blue' },\n  { id: 'green' },\n  { id: 'violet' },\n  { id: 'yellow' },\n  { id: 'orange' },\n]\n\nconst App: React.FC = () => (\n  <Select\n    multiple\n    data={data}\n    compressed\n    format=\"id\"\n    keygen=\"id\"\n    renderItem=\"id\"\n    style={{ width: 300 }}\n    placeholder=\"Multiple select Compressed\"\n  />\n)\n\nexport default App\n"},1208:function(e,t){e.exports="/**\n * cn -\n *    -- 设置 compressed 使选中值合并展示，鼠标悬浮时将会展示所有值。\n * en -\n *    -- Set the compressed property to compress values, hover to show all values.\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst data = [\n    { id: 'red' },\n    { id: 'cyan' },\n    { id: 'blue' },\n    { id: 'green' },\n    { id: 'violet' },\n    { id: 'yellow' },\n    { id: 'orange' },\n];\nconst App = () => (<Select multiple data={data} compressed format=\"id\" keygen=\"id\" renderItem=\"id\" style={{ width: 300 }} placeholder=\"Multiple select Compressed\"/>);\nexport default App;\n"},1209:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=[{id:1,city:"Pune"},{id:2,city:"Accra"},{id:3,city:"Dhaka"},{id:4,city:"Bogota"},{id:5,city:"Nanjing"},{id:6,city:"Bandung"},{id:7,city:"Dongguan"},{id:8,city:"Chongqing"},{id:9,city:"Buenos Aires"},{id:10,city:"Osaka-Kobe-Kyoto"}],i={width:240,marginBottom:12,display:"block"};t.default=function(){return r.a.createElement("div",null,r.a.createElement(l.a,{format:"id",keygen:"id",data:o,style:i,defaultValue:3,renderItem:"city",placeholder:"Select a city",prediction:function(e,t){return e===t.id}}),r.a.createElement(l.a,{multiple:!0,keygen:"id",format:"id",data:o,renderItem:"city",defaultValue:[3,4],placeholder:"Select citys"}))}},1210:function(e,t){e.exports="/**\n * cn - 数据处理\n *    -- 设置 format 选项把数据对象格式化为指定的 value\n * en - Datum\n *    -- Set format property to format the data object to the specified value.\n */\nimport React from 'react'\nimport { Select } from 'shineout'\n\ninterface SelectItem {\n  id: number\n  city: string\n}\nconst citys: SelectItem[] = [\n  { id: 1, city: 'Pune' },\n  { id: 2, city: 'Accra' },\n  { id: 3, city: 'Dhaka' },\n  { id: 4, city: 'Bogota' },\n  { id: 5, city: 'Nanjing' },\n  { id: 6, city: 'Bandung' },\n  { id: 7, city: 'Dongguan' },\n  { id: 8, city: 'Chongqing' },\n  { id: 9, city: 'Buenos Aires' },\n  { id: 10, city: 'Osaka-Kobe-Kyoto' },\n]\nconst style: React.CSSProperties = { width: 240, marginBottom: 12, display: 'block' }\n\nconst App: React.FC = () => (\n  <div>\n    <Select\n      format=\"id\"\n      keygen=\"id\"\n      data={citys}\n      style={style}\n      defaultValue={3}\n      renderItem=\"city\"\n      placeholder=\"Select a city\"\n      prediction={(v, d) => v === d.id}\n    />\n\n    <Select\n      multiple\n      keygen=\"id\"\n      format=\"id\"\n      data={citys}\n      renderItem=\"city\"\n      defaultValue={[3, 4]}\n      placeholder=\"Select citys\"\n    />\n  </div>\n)\n\nexport default App\n"},1211:function(e,t){e.exports="/**\n * cn - 数据处理\n *    -- 设置 format 选项把数据对象格式化为指定的 value\n * en - Datum\n *    -- Set format property to format the data object to the specified value.\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst citys = [\n    { id: 1, city: 'Pune' },\n    { id: 2, city: 'Accra' },\n    { id: 3, city: 'Dhaka' },\n    { id: 4, city: 'Bogota' },\n    { id: 5, city: 'Nanjing' },\n    { id: 6, city: 'Bandung' },\n    { id: 7, city: 'Dongguan' },\n    { id: 8, city: 'Chongqing' },\n    { id: 9, city: 'Buenos Aires' },\n    { id: 10, city: 'Osaka-Kobe-Kyoto' },\n];\nconst style = { width: 240, marginBottom: 12, display: 'block' };\nconst App = () => (<div>\n    <Select format=\"id\" keygen=\"id\" data={citys} style={style} defaultValue={3} renderItem=\"city\" placeholder=\"Select a city\" prediction={(v, d) => v === d.id}/>\n\n    <Select multiple keygen=\"id\" format=\"id\" data={citys} renderItem=\"city\" defaultValue={[3, 4]} placeholder=\"Select citys\"/>\n  </div>);\nexport default App;\n"},1212:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=[{value:"Mars",group:"3"},{value:"China",group:"2"},{value:"Beijing",group:"1"},{value:"Shanghai",group:"1"}];t.default=function(){return r.a.createElement(l.a,{data:o,keygen:"value",renderItem:"value",style:{width:240},groupBy:function(e){return"1"===e.group?"City":"2"===e.group?"Country":"Other"}})}},1213:function(e,t){e.exports="/**\n * cn - 分组\n *    -- 可以通过 groupBy 去将数据分组\n *    -- 组件会通过该函数的返回值对内容进行分组, 如果返回的是空, 则默认不分组, 为了防止产生歧义, 建议有一个默认分组.\n * en - GroupBy\n *    -- Grouping data by groupBy.\n *    -- The component will group the content by the return value of the function. If the return is empty, the default is not grouped. To prevent ambiguity, it is recommended to have a default grouping.\n */\nimport React from 'react'\nimport { Select, TYPE } from 'shineout'\n\ninterface SelectItem {\n  value: string\n  group: string\n}\ntype SelectProps = TYPE.Select.Props<SelectItem, string>\ntype SelectGroupBy = SelectProps['groupBy']\n\nconst data: SelectItem[] = [\n  { value: 'Mars', group: '3' },\n  { value: 'China', group: '2' },\n  { value: 'Beijing', group: '1' },\n  { value: 'Shanghai', group: '1' },\n]\n\nconst App: React.FC = () => {\n  const groupBy: SelectGroupBy = d => {\n    if (d.group === '1') return 'City'\n    if (d.group === '2') return 'Country'\n    return 'Other'\n  }\n\n  return <Select data={data} keygen=\"value\" renderItem=\"value\" style={{ width: 240 }} groupBy={groupBy} />\n}\n\nexport default App\n"},1214:function(e,t){e.exports="/**\n * cn - 分组\n *    -- 可以通过 groupBy 去将数据分组\n *    -- 组件会通过该函数的返回值对内容进行分组, 如果返回的是空, 则默认不分组, 为了防止产生歧义, 建议有一个默认分组.\n * en - GroupBy\n *    -- Grouping data by groupBy.\n *    -- The component will group the content by the return value of the function. If the return is empty, the default is not grouped. To prevent ambiguity, it is recommended to have a default grouping.\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst data = [\n    { value: 'Mars', group: '3' },\n    { value: 'China', group: '2' },\n    { value: 'Beijing', group: '1' },\n    { value: 'Shanghai', group: '1' },\n];\nconst App = () => {\n    const groupBy = d => {\n        if (d.group === '1')\n            return 'City';\n        if (d.group === '2')\n            return 'Country';\n        return 'Other';\n    };\n    return <Select data={data} keygen=\"value\" renderItem=\"value\" style={{ width: 240 }} groupBy={groupBy}/>;\n};\nexport default App;\n"},1215:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o={width:240,marginBottom:12},i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement("div",null,r.a.createElement(l.a,{style:o,clearable:!0,keygen:!0,data:i,placeholder:"Select color"}),r.a.createElement("br",null),r.a.createElement(l.a,{keygen:!0,multiple:!0,clearable:!0,data:i,style:{width:300},placeholder:"Multiple select",resultClassName:function(e){return console.log("resultClassName value: ",e),"result-class-name-".concat(e)}}))}},1216:function(e,t){e.exports="/**\n * cn - 可清空\n *    -- clearable 属性为 true 时，hover 后会显示清空图标。\n * en - Clearable\n *    -- Set the clearable property to true, the clear icon will be displayed on hover.\n */\nimport React from 'react'\nimport { Select, TYPE } from 'shineout'\n\ntype SelectItem = string\ntype SelectProps = TYPE.Select.Props<SelectItem, string[]>\ntype SelectResultClassName = SelectProps['resultClassName']\n\nconst style: React.CSSProperties = { width: 240, marginBottom: 12 }\nconst data: SelectItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => {\n  const resultClassName: SelectResultClassName = value => {\n    console.log('resultClassName value: ', value)\n    return `result-class-name-${value}`\n  }\n\n  return (\n    <div>\n      <Select style={style} clearable keygen data={data} placeholder=\"Select color\" />\n      <br />\n      <Select\n        keygen\n        multiple\n        clearable\n        data={data}\n        style={{ width: 300 }}\n        placeholder=\"Multiple select\"\n        resultClassName={resultClassName}\n      />\n    </div>\n  )\n}\n\nexport default App\n"},1217:function(e,t){e.exports="/**\n * cn - 可清空\n *    -- clearable 属性为 true 时，hover 后会显示清空图标。\n * en - Clearable\n *    -- Set the clearable property to true, the clear icon will be displayed on hover.\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst style = { width: 240, marginBottom: 12 };\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => {\n    const resultClassName = value => {\n        console.log('resultClassName value: ', value);\n        return `result-class-name-${value}`;\n    };\n    return (<div>\n      <Select style={style} clearable keygen data={data} placeholder=\"Select color\"/>\n      <br />\n      <Select keygen multiple clearable data={data} style={{ width: 300 }} placeholder=\"Multiple select\" resultClassName={resultClassName}/>\n    </div>);\n};\nexport default App;\n"},1218:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o={width:100,marginInlineEnd:12},i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement("div",null,r.a.createElement(l.a,{size:"small",keygen:!0,data:i,style:o,placeholder:"small"}),r.a.createElement(l.a,{keygen:!0,data:i,style:o,placeholder:"default"}),r.a.createElement(l.a,{size:"large",keygen:!0,data:i,style:o,placeholder:"large"}))}},1219:function(e,t){e.exports="/**\n * cn - 大小\n *    -- 有三种 size，['small', default, 'large']\n * en - Size\n *    -- There are three sizes, ['small', default, 'large']\n */\nimport React from 'react'\nimport { Select } from 'shineout'\n\ntype SelectItem = string\n\nconst style: React.CSSProperties = { width: 100, marginInlineEnd: 12 }\nconst data: SelectItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => (\n  <div>\n    <Select size=\"small\" keygen data={data} style={style} placeholder=\"small\" />\n    <Select keygen data={data} style={style} placeholder=\"default\" />\n    <Select size=\"large\" keygen data={data} style={style} placeholder=\"large\" />\n  </div>\n)\n\nexport default App\n"},1220:function(e,t){e.exports="/**\n * cn - 大小\n *    -- 有三种 size，['small', default, 'large']\n * en - Size\n *    -- There are three sizes, ['small', default, 'large']\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst style = { width: 100, marginInlineEnd: 12 };\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => (<div>\n    <Select size=\"small\" keygen data={data} style={style} placeholder=\"small\"/>\n    <Select keygen data={data} style={style} placeholder=\"default\"/>\n    <Select size=\"large\" keygen data={data} style={style} placeholder=\"large\"/>\n  </div>);\nexport default App;\n"},1221:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=n(564),i=Object(o.b)(1e4),s={width:240,marginBottom:12,display:"block"};t.default=function(){return r.a.createElement(l.a,{keygen:"id",data:i,style:s,defaultValue:3,renderItem:function(e,t){return"".concat(e.firstName," ").concat(e.lastName," (").concat(t+1,")")},datum:{format:"id"},renderResult:function(e){return"".concat(e.firstName," ").concat(e.lastName)},placeholder:"Select a user"})}},1222:function(e,t){e.exports="/**\n * cn - 性能\n *    -- Select 内部使用了虚拟列表来优化性能，本例加载了10000条数据。\n * en - Performance\n *    -- Select uses a lazy loading to optimize performance. This example loads 10,000 pieces of data.\n */\nimport React from 'react'\nimport { Select, TYPE } from 'shineout'\nimport { fetchSync as fetchUser } from 'doc/data/user'\n\ninterface SelectItem {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype SelectProps = TYPE.Select.Props<SelectItem, number>\ntype SelectRenderItem = SelectProps['renderItem']\ntype SelectRenderResult = SelectProps['renderResult']\n\nconst users: SelectItem[] = fetchUser(10000)\nconst style: React.CSSProperties = { width: 240, marginBottom: 12, display: 'block' }\n\nconst App: React.FC = () => {\n  const renderResult: SelectRenderResult = user => `${user.firstName} ${user.lastName}`\n  const renderItem: SelectRenderItem = (user, i) => `${user.firstName} ${user.lastName} (${i + 1})`\n\n  return (\n    <Select\n      keygen=\"id\"\n      data={users}\n      style={style}\n      defaultValue={3}\n      renderItem={renderItem}\n      datum={{ format: 'id' }}\n      renderResult={renderResult}\n      placeholder=\"Select a user\"\n    />\n  )\n}\n\nexport default App\n"},1223:function(e,t){e.exports="/**\n * cn - 性能\n *    -- Select 内部使用了虚拟列表来优化性能，本例加载了10000条数据。\n * en - Performance\n *    -- Select uses a lazy loading to optimize performance. This example loads 10,000 pieces of data.\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nimport { fetchSync as fetchUser } from 'doc/data/user';\nconst users = fetchUser(10000);\nconst style = { width: 240, marginBottom: 12, display: 'block' };\nconst App = () => {\n    const renderResult = user => `${user.firstName} ${user.lastName}`;\n    const renderItem = (user, i) => `${user.firstName} ${user.lastName} (${i + 1})`;\n    return (<Select keygen=\"id\" data={users} style={style} defaultValue={3} renderItem={renderItem} datum={{ format: 'id' }} renderResult={renderResult} placeholder=\"Select a user\"/>);\n};\nexport default App;\n"},1224:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o={width:240,marginBottom:12},i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement("div",null,r.a.createElement(l.a,{disabled:!0,keygen:!0,style:o,data:i,placeholder:"Select color"}),r.a.createElement("br",null),r.a.createElement(l.a,{keygen:!0,multiple:!0,data:i,style:{width:300},placeholder:"Multiple select",disabled:function(e){return"green"===e},defaultValue:["orange","green"]}))}},1225:function(e,t){e.exports="/**\n * cn - 禁用\n *    -- 设置 disabled 禁用组件\n * en - Disabled\n *    -- Set the disabled property to disable the component.\n */\nimport React from 'react'\nimport { Select } from 'shineout'\n\ntype SelectItem = string\n\nconst style: React.CSSProperties = { width: 240, marginBottom: 12 }\nconst data: SelectItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => (\n  <div>\n    <Select disabled keygen style={style} data={data} placeholder=\"Select color\" />\n\n    <br />\n\n    <Select\n      keygen\n      multiple\n      data={data}\n      style={{ width: 300 }}\n      placeholder=\"Multiple select\"\n      disabled={d => d === 'green'}\n      defaultValue={['orange', 'green']}\n    />\n  </div>\n)\n\nexport default App\n"},1226:function(e,t){e.exports="/**\n * cn - 禁用\n *    -- 设置 disabled 禁用组件\n * en - Disabled\n *    -- Set the disabled property to disable the component.\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst style = { width: 240, marginBottom: 12 };\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => (<div>\n    <Select disabled keygen style={style} data={data} placeholder=\"Select color\"/>\n\n    <br />\n\n    <Select keygen multiple data={data} style={{ width: 300 }} placeholder=\"Multiple select\" disabled={d => d === 'green'} defaultValue={['orange', 'green']}/>\n  </div>);\nexport default App;\n"},1227:function(e,t,n){"use strict";n.r(t);var a,r=n(24),i=n(0),s=n.n(i),l=n(200),o={width:240,marginBottom:12},c=["red","orange","yellow","green","cyan","blue","violet"],d=(a=l.a,function(l){var e=Object(i.useState)(""),t=Object(r.a)(e,2),o=t[0],n=t[1];return s.a.createElement(a,Object.assign({},l,{beforeChange:function(){var e=l.beforeChange;e&&e.apply(void 0,arguments),n("")},renderItem:function(e,t){var n=l.renderItem,a=void 0===n?function(e){return e}:n,r="function"==typeof a?a(e,t):e[a];return o?"string"!=typeof r?r:r.split(o).map(function(e,t,n){return t===n.length-1?s.a.createElement(s.a.Fragment,{key:t},e):s.a.createElement(s.a.Fragment,{key:t},e,s.a.createElement("span",{style:{color:"#FF4E50"}},o))}):r},onFilter:l.onFilter?function(e){var t=l.onFilter;return n(e),t(e,e)}:void 0}))});t.default=function(){return s.a.createElement("div",null,s.a.createElement(d,{keygen:!0,data:c,style:o,renderResult:function(e){return e},placeholder:"Select color",onFilter:function(t){return function(e){return 0<=e.indexOf(t)}}}),s.a.createElement("br",null),s.a.createElement(d,{keygen:!0,multiple:!0,data:c,renderResult:function(e){return e},style:{width:300},placeholder:"Select color",onFilter:function(t){return function(e){return 0<=e.indexOf(t)}}}))}},1228:function(e,t){e.exports="/**\n * cn - 筛选数据 - 内置\n *    -- onFilter 返回函数时，使用这个函数做前端过滤\n * en - Filter - built-in\n *    -- When the onFilter property returns a function, use this function to do front-end filtering.\n */\nimport React, { useState } from 'react'\nimport { Select, TYPE } from 'shineout'\n\ntype SelectItem = string\ntype SelectProps = TYPE.Select.Props<SelectItem, string>\ntype SelectRenderItem = SelectProps['renderItem']\n\nconst style: React.CSSProperties = { width: 240, marginBottom: 12 }\nconst data: SelectItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst highlight = (Component: any) => (props: SelectProps) => {\n  const [filterText, setFilterText] = useState<string>('')\n\n  const handlerFilter = (text: string) => {\n    const { onFilter } = props\n    setFilterText(text)\n    return onFilter!(text, text)\n  }\n\n  const handleRenderItem: SelectRenderItem = (d, index) => {\n    const { renderItem = v => v } = props\n    const result = typeof renderItem === 'function' ? renderItem(d, index) : d[renderItem]\n\n    if (!filterText) return result\n    if (typeof result !== 'string') return result\n    return result.split(filterText).map((item, i, arr) => {\n      if (i === arr.length - 1) return <React.Fragment key={i}>{item}</React.Fragment>\n      return (\n        <React.Fragment key={i}>\n          {item}\n          <span style={{ color: '#FF4E50' }}>{filterText}</span>\n        </React.Fragment>\n      )\n    })\n  }\n\n  const handleReset = (...args: string[]) => {\n    const { beforeChange } = props\n    if (beforeChange) beforeChange(...args)\n    setFilterText('')\n  }\n\n  return (\n    <Component\n      {...props}\n      beforeChange={handleReset}\n      renderItem={handleRenderItem}\n      onFilter={props.onFilter ? handlerFilter : undefined}\n    />\n  )\n}\n\nconst HighlightFilter = highlight(Select)\n\nconst App: React.FC = () => (\n  <div>\n    <HighlightFilter\n      keygen\n      data={data}\n      style={style}\n      renderResult={d => d}\n      placeholder=\"Select color\"\n      onFilter={text => d => d.indexOf(text) >= 0}\n    />\n\n    <br />\n\n    <HighlightFilter\n      keygen\n      multiple\n      data={data}\n      renderResult={d => d}\n      style={{ width: 300 }}\n      placeholder=\"Select color\"\n      onFilter={text => d => d.indexOf(text) >= 0}\n    />\n  </div>\n)\n\nexport default App\n"},1229:function(e,t){e.exports="/**\n * cn - 筛选数据 - 内置\n *    -- onFilter 返回函数时，使用这个函数做前端过滤\n * en - Filter - built-in\n *    -- When the onFilter property returns a function, use this function to do front-end filtering.\n */\nimport React, { useState } from 'react';\nimport { Select } from 'shineout';\nconst style = { width: 240, marginBottom: 12 };\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst highlight = (Component) => (props) => {\n    const [filterText, setFilterText] = useState('');\n    const handlerFilter = (text) => {\n        const { onFilter } = props;\n        setFilterText(text);\n        return onFilter(text, text);\n    };\n    const handleRenderItem = (d, index) => {\n        const { renderItem = v => v } = props;\n        const result = typeof renderItem === 'function' ? renderItem(d, index) : d[renderItem];\n        if (!filterText)\n            return result;\n        if (typeof result !== 'string')\n            return result;\n        return result.split(filterText).map((item, i, arr) => {\n            if (i === arr.length - 1)\n                return <React.Fragment key={i}>{item}</React.Fragment>;\n            return (<React.Fragment key={i}>\n          {item}\n          <span style={{ color: '#FF4E50' }}>{filterText}</span>\n        </React.Fragment>);\n        });\n    };\n    const handleReset = (...args) => {\n        const { beforeChange } = props;\n        if (beforeChange)\n            beforeChange(...args);\n        setFilterText('');\n    };\n    return (<Component {...props} beforeChange={handleReset} renderItem={handleRenderItem} onFilter={props.onFilter ? handlerFilter : undefined}/>);\n};\nconst HighlightFilter = highlight(Select);\nconst App = () => (<div>\n    <HighlightFilter keygen data={data} style={style} renderResult={d => d} placeholder=\"Select color\" onFilter={text => d => d.indexOf(text) >= 0}/>\n\n    <br />\n\n    <HighlightFilter keygen multiple data={data} renderResult={d => d} style={{ width: 300 }} placeholder=\"Select color\" onFilter={text => d => d.indexOf(text) >= 0}/>\n  </div>);\nexport default App;\n"},1230:function(e,t,n){"use strict";n.r(t);var c=n(24),d=n(0),u=n.n(d),p=n(200),m=n(564);t.default=function(){var e=Object(d.useState)(!1),t=Object(c.a)(e,2),n=t[0],a=t[1],r=Object(d.useState)([]),l=Object(c.a)(r,2),o=l[0],i=l[1],s=function(e){a(!0),m.a.get("user",{username:e,sorter:""}).then(function(e){a(!1),i(e.data)})};return Object(d.useEffect)(function(){s("")},[]),u.a.createElement(p.a,{keygen:"id",data:o,loading:n,style:{width:240},onFilter:s,renderItem:function(e){return"".concat(e.firstName," ").concat(e.lastName)},datum:{format:"id"},placeholder:"Select user"})}},1231:function(e,t){e.exports="/**\n * cn - 筛选数据 - 服务端\n *    -- onFilter 函数不返回结果时，从服务端筛选数据或自行处理\n * en - Filter - server\n *    -- When the onFilter property don't return a function, you can filter data from server or filter by yourself.\n */\nimport React, { useState, useEffect } from 'react'\nimport { Select, TYPE } from 'shineout'\nimport { fetch } from 'doc/data/user'\n\ninterface SelectItem {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype SelectProps = TYPE.Select.Props<SelectItem, number>\ntype SelectOnFilter = SelectProps['onFilter']\ntype SelectRenderItem = SelectProps['renderItem']\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false)\n  const [data, setData] = useState<SelectItem[]>([])\n\n  const handleFilter: SelectOnFilter = text => {\n    setLoading(true)\n    fetch.get('user', { username: text, sorter: '' }).then((res: { data: SelectItem[] }) => {\n      setLoading(false)\n      setData(res.data)\n    })\n  }\n\n  const renderItem: SelectRenderItem = user => `${user.firstName} ${user.lastName}`\n\n  useEffect(() => {\n    handleFilter('', '')\n  }, [])\n\n  return (\n    <Select\n      keygen=\"id\"\n      data={data}\n      loading={loading}\n      style={{ width: 240 }}\n      onFilter={handleFilter}\n      renderItem={renderItem}\n      datum={{ format: 'id' }}\n      placeholder=\"Select user\"\n    />\n  )\n}\n\nexport default App\n"},1232:function(e,t){e.exports="/**\n * cn - 筛选数据 - 服务端\n *    -- onFilter 函数不返回结果时，从服务端筛选数据或自行处理\n * en - Filter - server\n *    -- When the onFilter property don't return a function, you can filter data from server or filter by yourself.\n */\nimport React, { useState, useEffect } from 'react';\nimport { Select } from 'shineout';\nimport { fetch } from 'doc/data/user';\nconst App = () => {\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n    const handleFilter = text => {\n        setLoading(true);\n        fetch.get('user', { username: text, sorter: '' }).then((res) => {\n            setLoading(false);\n            setData(res.data);\n        });\n    };\n    const renderItem = user => `${user.firstName} ${user.lastName}`;\n    useEffect(() => {\n        handleFilter('', '');\n    }, []);\n    return (<Select keygen=\"id\" data={data} loading={loading} style={{ width: 240 }} onFilter={handleFilter} renderItem={renderItem} datum={{ format: 'id' }} placeholder=\"Select user\"/>);\n};\nexport default App;\n"},1233:function(e,t,n){"use strict";n.r(t);var c=n(24),d=n(0),u=n.n(d),p=n(200),m=n(564);t.default=function(){var e=Object(d.useState)(!1),t=Object(c.a)(e,2),n=t[0],a=t[1],r=Object(d.useState)([]),l=Object(c.a)(r,2),o=l[0],i=l[1],s=function(e){a(!0),m.a.get("user",{username:e,sorter:""}).then(function(e){a(!1),i(e.data)})};return Object(d.useEffect)(function(){s("")},[]),u.a.createElement(p.a,{multiple:!0,keygen:"id",data:o,loading:n,style:{width:240},onFilter:s,renderItem:function(e){return"".concat(e.firstName," ").concat(e.lastName)},datum:{format:"id"},placeholder:"Select user"})}},1234:function(e,t){e.exports="/**\n * cn -\n *    -- 示例：服务端过滤多选\n * en -\n *    -- Example: Server-side filters multiple selection.\n */\n\nimport React, { useState, useEffect } from 'react'\nimport { Select, TYPE } from 'shineout'\nimport { fetch } from 'doc/data/user'\n\ninterface SelectItem {\n  id: number\n  time: string\n  start: string\n  height: number\n  salary: number\n  office: string\n  country: string\n  office5: string\n  position: string\n  lastName: string\n  firstName: string\n}\ntype SelectProps = TYPE.Select.Props<SelectItem, number[]>\ntype SelectOnFilter = SelectProps['onFilter']\ntype SelectRenderItem = SelectProps['renderItem']\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false)\n  const [data, setData] = useState<SelectItem[]>([])\n\n  const handleFilter: SelectOnFilter = text => {\n    setLoading(true)\n    fetch.get('user', { username: text, sorter: '' }).then((res: { data: SelectItem[] }) => {\n      setLoading(false)\n      setData(res.data)\n    })\n  }\n\n  const renderItem: SelectRenderItem = user => `${user.firstName} ${user.lastName}`\n\n  useEffect(() => {\n    handleFilter('', '')\n  }, [])\n\n  return (\n    <Select\n      multiple\n      keygen=\"id\"\n      data={data}\n      loading={loading}\n      style={{ width: 240 }}\n      onFilter={handleFilter}\n      renderItem={renderItem}\n      datum={{ format: 'id' }}\n      placeholder=\"Select user\"\n    />\n  )\n}\n\nexport default App\n"},1235:function(e,t){e.exports="/**\n * cn -\n *    -- 示例：服务端过滤多选\n * en -\n *    -- Example: Server-side filters multiple selection.\n */\nimport React, { useState, useEffect } from 'react';\nimport { Select } from 'shineout';\nimport { fetch } from 'doc/data/user';\nconst App = () => {\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n    const handleFilter = text => {\n        setLoading(true);\n        fetch.get('user', { username: text, sorter: '' }).then((res) => {\n            setLoading(false);\n            setData(res.data);\n        });\n    };\n    const renderItem = user => `${user.firstName} ${user.lastName}`;\n    useEffect(() => {\n        handleFilter('', '');\n    }, []);\n    return (<Select multiple keygen=\"id\" data={data} loading={loading} style={{ width: 240 }} onFilter={handleFilter} renderItem={renderItem} datum={{ format: 'id' }} placeholder=\"Select user\"/>);\n};\nexport default App;\n"},1236:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o={width:240,marginBottom:12},i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement("div",null,r.a.createElement(l.a,{style:o,data:i,keygen:!0,placeholder:"input color",onCreate:!0,defaultValue:"brown"}),r.a.createElement("br",null),r.a.createElement(l.a,{style:o,data:i,keygen:!0,multiple:!0,placeholder:"input color",onCreate:function(e){return e}}))}},1237:function(e,t){e.exports="/**\n * cn - 创建选项\n *    -- 设置 onCreate 属性可以通过输入创建选项\n * en - Create by input\n *    -- Set the onCreate property can create options by inputting.\n */\nimport React from 'react'\nimport { Select } from 'shineout'\n\ntype SelectItem = string\n\nconst style: React.CSSProperties = { width: 240, marginBottom: 12 }\nconst data: SelectItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => (\n  <div>\n    <Select style={style} data={data} keygen placeholder=\"input color\" onCreate defaultValue=\"brown\" />\n    <br />\n    <Select style={style} data={data} keygen multiple placeholder=\"input color\" onCreate={t => t} />\n  </div>\n)\n\nexport default App\n"},1238:function(e,t){e.exports="/**\n * cn - 创建选项\n *    -- 设置 onCreate 属性可以通过输入创建选项\n * en - Create by input\n *    -- Set the onCreate property can create options by inputting.\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst style = { width: 240, marginBottom: 12 };\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => (<div>\n    <Select style={style} data={data} keygen placeholder=\"input color\" onCreate defaultValue=\"brown\"/>\n    <br />\n    <Select style={style} data={data} keygen multiple placeholder=\"input color\" onCreate={t => t}/>\n  </div>);\nexport default App;\n"},1239:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o={width:240,marginBottom:12},i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement("div",null,r.a.createElement(l.a,{keygen:!0,onCreate:!0,data:i,style:o,filterDelay:0,placeholder:"input label",onFilter:function(t){return function(e){return 0<=e.indexOf(t)}}}),r.a.createElement("br",null),r.a.createElement(l.a,{keygen:!0,onCreate:!0,multiple:!0,data:i,style:o,filterDelay:0,placeholder:"input label",onFilter:function(t){return function(e){return 0<=e.indexOf(t)}}}))}},1240:function(e,t){e.exports="/**\n * cn -\n *    -- 示例：创建选项和 filter 配合使用\n * en -\n *    -- Example: Create options with filter\n */\nimport React from 'react'\nimport { Select } from 'shineout'\n\ntype SelectItem = string\n\nconst style: React.CSSProperties = { width: 240, marginBottom: 12 }\nconst data: SelectItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => (\n  <div>\n    <Select\n      keygen\n      onCreate\n      data={data}\n      style={style}\n      filterDelay={0}\n      placeholder=\"input label\"\n      onFilter={text => d => d.indexOf(text) >= 0}\n    />\n\n    <br />\n\n    <Select\n      keygen\n      onCreate\n      multiple\n      data={data}\n      style={style}\n      filterDelay={0}\n      placeholder=\"input label\"\n      onFilter={text => d => d.indexOf(text) >= 0}\n    />\n  </div>\n)\n\nexport default App\n"},1241:function(e,t){e.exports="/**\n * cn -\n *    -- 示例：创建选项和 filter 配合使用\n * en -\n *    -- Example: Create options with filter\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst style = { width: 240, marginBottom: 12 };\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => (<div>\n    <Select keygen onCreate data={data} style={style} filterDelay={0} placeholder=\"input label\" onFilter={text => d => d.indexOf(text) >= 0}/>\n\n    <br />\n\n    <Select keygen onCreate multiple data={data} style={style} filterDelay={0} placeholder=\"input label\" onFilter={text => d => d.indexOf(text) >= 0}/>\n  </div>);\nexport default App;\n"},1242:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=n(564),i=Object(o.b)(1e4),s=["red","orange","yellow","green","cyan","blue","violet"],c={padding:10,height:100,overflow:"hidden"};t.default=function(){return r.a.createElement("div",{style:c},r.a.createElement(l.a,{keygen:!0,absolute:!0,data:s,placeholder:"default",style:{width:100,marginInlineEnd:12},onFilter:function(t){return function(e){return-1<e.indexOf(t)}}}),r.a.createElement(l.a,{absolute:!0,multiple:!0,keygen:"id",format:"id",data:i,style:{width:300},placeholder:"Select user",onFilter:function(t){return function(e){return-1<e.firstName.indexOf(t)}},renderItem:function(e){return"".concat(e.firstName," ").concat(e.lastName)}}))}},1243:function(e,t){e.exports="/**\n * cn - 绝对定位\n *    -- 如果选项弹出层的父容器被遮挡，可以设置 absolute 属性使弹出选项在单独层中渲染。（非必要情况下不建议）\n * en - Absolute\n *    -- If the parent container of the pop-up layer is occluded, you can set the absolute property to make the pop-up options rendered in a separate layer. (not recommended if not necessary)\n */\nimport React from 'react'\nimport { Select } from 'shineout'\nimport { fetchSync as fetchUser } from 'doc/data/user'\n\ntype SelectItem = string\nconst users = fetchUser(10000)\nconst data: SelectItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\nconst styleAbsolute: React.CSSProperties = { padding: 10, height: 100, overflow: 'hidden' }\n\nconst App: React.FC = () => (\n  <div style={styleAbsolute}>\n    <Select\n      keygen\n      absolute\n      data={data}\n      placeholder=\"default\"\n      style={{ width: 100, marginInlineEnd: 12 }}\n      onFilter={text => d => d.indexOf(text) > -1}\n    />\n\n    <Select\n      absolute\n      multiple\n      keygen=\"id\"\n      format=\"id\"\n      data={users}\n      style={{ width: 300 }}\n      placeholder=\"Select user\"\n      onFilter={text => d => d.firstName.indexOf(text) > -1}\n      renderItem={user => `${user.firstName} ${user.lastName}`}\n    />\n  </div>\n)\n\nexport default App\n"},1244:function(e,t){e.exports="/**\n * cn - 绝对定位\n *    -- 如果选项弹出层的父容器被遮挡，可以设置 absolute 属性使弹出选项在单独层中渲染。（非必要情况下不建议）\n * en - Absolute\n *    -- If the parent container of the pop-up layer is occluded, you can set the absolute property to make the pop-up options rendered in a separate layer. (not recommended if not necessary)\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nimport { fetchSync as fetchUser } from 'doc/data/user';\nconst users = fetchUser(10000);\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst styleAbsolute = { padding: 10, height: 100, overflow: 'hidden' };\nconst App = () => (<div style={styleAbsolute}>\n    <Select keygen absolute data={data} placeholder=\"default\" style={{ width: 100, marginInlineEnd: 12 }} onFilter={text => d => d.indexOf(text) > -1}/>\n\n    <Select absolute multiple keygen=\"id\" format=\"id\" data={users} style={{ width: 300 }} placeholder=\"Select user\" onFilter={text => d => d.firstName.indexOf(text) > -1} renderItem={user => `${user.firstName} ${user.lastName}`}/>\n  </div>);\nexport default App;\n"},1245:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=n(584),i=Object(o.b)(200),s={width:300,marginBottom:12,display:"block"};t.default=function(){return r.a.createElement("div",null,r.a.createElement(l.a,{format:"id",keygen:"id",columns:3,data:i,style:s,renderItem:"city",placeholder:"Select a city",prediction:function(e,t){return e===t.id}}),r.a.createElement(l.a,{absolute:!0,multiple:!0,format:"id",keygen:"id",columns:4,data:i,style:s,columnWidth:180,renderItem:"city",placeholder:"Select citys",prediction:function(e,t){return e===t.id},onFilter:function(t){return function(e){return 0<=e.city.toLowerCase().indexOf(t.toLowerCase())}}}))}},1246:function(e,t){e.exports='/**\n * cn - 多列选项\n *    -- 设置 columns 属性，选项变为多列展示，设置 columnWidth 指定每一列宽度\n * en - Columns\n *    -- Set columns property over 1, options will display in multiple columns.\n */\nimport React from \'react\'\nimport { Select } from \'shineout\'\nimport { fetchSync as fetchCity } from \'doc/data/city\'\n\nconst citys = fetchCity(200)\nconst style: React.CSSProperties = { width: 300, marginBottom: 12, display: \'block\' }\n\nconst App: React.FC = () => (\n  <div>\n    <Select\n      format="id"\n      keygen="id"\n      columns={3}\n      data={citys}\n      style={style}\n      renderItem="city"\n      placeholder="Select a city"\n      prediction={(v, d) => v === d.id}\n    />\n\n    <Select\n      absolute\n      multiple\n      format="id"\n      keygen="id"\n      columns={4}\n      data={citys}\n      style={style}\n      columnWidth={180}\n      renderItem="city"\n      placeholder="Select citys"\n      prediction={(v, d) => v === d.id}\n      onFilter={text => d => d.city.toLowerCase().indexOf(text.toLowerCase()) >= 0}\n    />\n  </div>\n)\n\nexport default App\n'},1247:function(e,t){e.exports='/**\n * cn - 多列选项\n *    -- 设置 columns 属性，选项变为多列展示，设置 columnWidth 指定每一列宽度\n * en - Columns\n *    -- Set columns property over 1, options will display in multiple columns.\n */\nimport React from \'react\';\nimport { Select } from \'shineout\';\nimport { fetchSync as fetchCity } from \'doc/data/city\';\nconst citys = fetchCity(200);\nconst style = { width: 300, marginBottom: 12, display: \'block\' };\nconst App = () => (<div>\n    <Select format="id" keygen="id" columns={3} data={citys} style={style} renderItem="city" placeholder="Select a city" prediction={(v, d) => v === d.id}/>\n\n    <Select absolute multiple format="id" keygen="id" columns={4} data={citys} style={style} columnWidth={180} renderItem="city" placeholder="Select citys" prediction={(v, d) => v === d.id} onFilter={text => d => d.city.toLowerCase().indexOf(text.toLowerCase()) >= 0}/>\n  </div>);\nexport default App;\n'},1248:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=n(584),i=Object(o.b)(200);t.default=function(){return r.a.createElement(l.a,{absolute:!0,multiple:!0,format:"id",keygen:"id",width:300,data:i,columns:-1,renderItem:"city",columnWidth:500,onFilter:function(t){return function(e){return 0<=e.city.toLowerCase().indexOf(t.toLowerCase())}},placeholder:"Select citys",prediction:function(e,t){return e===t.id}})}},1249:function(e,t){e.exports="/**\n * cn -\n *    -- columns 为 -1 时选项会堆叠展示， columnWidth 为选项框的宽度\n * en -\n *    -- Set columns -1, options will display end by end， columnsWidth is the width of the option box\n */\nimport React from 'react'\nimport { Select, TYPE } from 'shineout'\nimport { fetchSync as fetchCity } from 'doc/data/city'\n\ninterface SelectItem {\n  id: number\n  city: string\n}\ntype SelectProps = TYPE.Select.Props<SelectItem, number[]>\ntype SelectOnFilter = SelectProps['onFilter']\n\nconst citys: SelectItem[] = fetchCity(200)\n\nconst App: React.FC = () => {\n  const onFilter: SelectOnFilter = text => d => d.city.toLowerCase().indexOf(text.toLowerCase()) >= 0\n\n  return (\n    <Select\n      absolute\n      multiple\n      format=\"id\"\n      keygen=\"id\"\n      width={300}\n      data={citys}\n      columns={-1}\n      renderItem=\"city\"\n      columnWidth={500}\n      onFilter={onFilter}\n      placeholder=\"Select citys\"\n      prediction={(v, d) => v === d.id}\n    />\n  )\n}\n\nexport default App\n"},1250:function(e,t){e.exports='/**\n * cn -\n *    -- columns 为 -1 时选项会堆叠展示， columnWidth 为选项框的宽度\n * en -\n *    -- Set columns -1, options will display end by end， columnsWidth is the width of the option box\n */\nimport React from \'react\';\nimport { Select } from \'shineout\';\nimport { fetchSync as fetchCity } from \'doc/data/city\';\nconst citys = fetchCity(200);\nconst App = () => {\n    const onFilter = text => d => d.city.toLowerCase().indexOf(text.toLowerCase()) >= 0;\n    return (<Select absolute multiple format="id" keygen="id" width={300} data={citys} columns={-1} renderItem="city" columnWidth={500} onFilter={onFilter} placeholder="Select citys" prediction={(v, d) => v === d.id}/>);\n};\nexport default App;\n'},1251:function(e,t,n){"use strict";n.r(t);var d=n(24),u=n(0),p=n.n(u),m=n(200),f=n(566),y={width:250,marginBottom:20};t.default=function(){var e=Object(u.useState)(""),t=Object(d.a)(e,2),n=t[0],a=t[1],r=Object(u.useState)([]),l=Object(d.a)(r,2),o=l[0],i=l[1],s=function(e){return"node ".concat(e.text)},c=function(e){return e.text.startsWith("1")};return p.a.createElement("div",null,p.a.createElement(m.a,{format:"id",keygen:"id",style:y,value:n,treeData:f.c,disabled:c,renderItem:s,onChange:function(e){return a(e)}}),p.a.createElement("br",null),p.a.createElement(m.a,{multiple:!0,clearable:!0,format:"id",keygen:"id",style:y,treeData:f.c,value:o,disabled:c,renderItem:s,onChange:function(e){return i(e)}}))}},1252:function(e,t){e.exports="/**\n * cn - 树形选择\n *    -- 通过设置 treeData 来实现树形选择。\n * en - Tree Select\n *    -- Set treeData to select with tree.\n */\nimport React, { useState } from 'react'\nimport { Select, TYPE } from 'shineout'\nimport data from 'doc/data/tree'\n\ninterface SelectItem {\n  id: string\n  text: string\n  children?: SelectItem[]\n}\ntype SelectProps = TYPE.Select.Props<SelectItem, any>\ntype SelectDisabled = SelectProps['disabled']\ntype SelectOnChange = SelectProps['onChange']\ntype SelectRenderItem = SelectProps['renderItem']\n\nconst style: React.CSSProperties = { width: 250, marginBottom: 20 }\n\nconst App: React.FC = () => {\n  const [single, setSingle] = useState('')\n  const [multiple, setMultiple] = useState<string[]>([])\n\n  const renderItem: SelectRenderItem = v => `node ${v.text}`\n\n  const handleMultiple: SelectOnChange = v => setMultiple(v)\n\n  const handleSingleChange: SelectOnChange = v => setSingle(v)\n\n  const disabled: SelectDisabled = v => v.text.startsWith('1')\n\n  return (\n    <div>\n      <Select\n        format=\"id\"\n        keygen=\"id\"\n        style={style}\n        value={single}\n        treeData={data}\n        disabled={disabled}\n        renderItem={renderItem}\n        onChange={handleSingleChange}\n      />\n      <br />\n\n      <Select\n        multiple\n        clearable\n        format=\"id\"\n        keygen=\"id\"\n        style={style}\n        treeData={data}\n        value={multiple}\n        disabled={disabled}\n        renderItem={renderItem}\n        onChange={handleMultiple}\n      />\n    </div>\n  )\n}\n\nexport default App\n"},1253:function(e,t){e.exports="/**\n * cn - 树形选择\n *    -- 通过设置 treeData 来实现树形选择。\n * en - Tree Select\n *    -- Set treeData to select with tree.\n */\nimport React, { useState } from 'react';\nimport { Select } from 'shineout';\nimport data from 'doc/data/tree';\nconst style = { width: 250, marginBottom: 20 };\nconst App = () => {\n    const [single, setSingle] = useState('');\n    const [multiple, setMultiple] = useState([]);\n    const renderItem = v => `node ${v.text}`;\n    const handleMultiple = v => setMultiple(v);\n    const handleSingleChange = v => setSingle(v);\n    const disabled = v => v.text.startsWith('1');\n    return (<div>\n      <Select format=\"id\" keygen=\"id\" style={style} value={single} treeData={data} disabled={disabled} renderItem={renderItem} onChange={handleSingleChange}/>\n      <br />\n\n      <Select multiple clearable format=\"id\" keygen=\"id\" style={style} treeData={data} value={multiple} disabled={disabled} renderItem={renderItem} onChange={handleMultiple}/>\n    </div>);\n};\nexport default App;\n"},1254:function(e,t,n){"use strict";n.r(t);var r=n(24),l=n(0),o=n.n(l),i=n(200),s=[{id:"1",title:"1",children:[{id:"1-1",title:"1-1",children:[{id:"1-1-1",title:"1-1-1"},{id:"1-1-2",title:"1-1-2"}]},{id:"1-2",title:"1-2"}]},{id:"2",title:"2",children:[{id:"2-1",title:"2-1"},{id:"2-2",title:"2-2"}]},{id:"3",title:"3",children:[{id:"3-1",title:"3-1"}]}];t.default=function(){var e=Object(l.useState)([]),t=Object(r.a)(e,2),n=t[0],a=t[1];return o.a.createElement(i.a,{absolute:!0,multiple:!0,clearable:!0,format:"id",keygen:"id",value:n,treeData:s,style:{width:250},onFilter:function(t){return function(e){return-1<e.title.indexOf(t)}},onChange:function(e){return a(e)},renderItem:function(e){return"node ".concat(e.title)},disabled:function(e){return e.title.startsWith("1-")}})}},1255:function(e,t){e.exports="/**\n * cn - 树形选择 - 筛选数据\n *    -- 通过设置 onFilter 来筛选树形数据。\n * en - Tree Select Filter\n *    -- Set onFilter to filter tree data.\n */\nimport React, { useState } from 'react'\nimport { Select, TYPE } from 'shineout'\n\ninterface TreeData {\n  id: string\n  title: string\n  children?: TreeData[]\n}\ntype SelectProps = TYPE.Select.Props<TreeData, TreeData[]>\ntype SelectOnChange = SelectProps['onChange']\ntype SelectOnFilter = SelectProps['onFilter']\n\nconst data: TreeData[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      { id: '1-1', title: '1-1', children: [{ id: '1-1-1', title: '1-1-1' }, { id: '1-1-2', title: '1-1-2' }] },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  { id: '2', title: '2', children: [{ id: '2-1', title: '2-1' }, { id: '2-2', title: '2-2' }] },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n]\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<TreeData[]>([])\n\n  const handleChange: SelectOnChange = v => setValue(v)\n\n  const handleFilter: SelectOnFilter = text => v => v.title.indexOf(text) > -1\n\n  return (\n    <Select\n      absolute\n      multiple\n      clearable\n      format=\"id\"\n      keygen=\"id\"\n      value={value}\n      treeData={data}\n      style={{ width: 250 }}\n      onFilter={handleFilter}\n      onChange={handleChange}\n      renderItem={v => `node ${v.title}`}\n      disabled={v => v.title.startsWith('1-')}\n    />\n  )\n}\n\nexport default App\n"},1256:function(e,t){e.exports="/**\n * cn - 树形选择 - 筛选数据\n *    -- 通过设置 onFilter 来筛选树形数据。\n * en - Tree Select Filter\n *    -- Set onFilter to filter tree data.\n */\nimport React, { useState } from 'react';\nimport { Select } from 'shineout';\nconst data = [\n    {\n        id: '1',\n        title: '1',\n        children: [\n            { id: '1-1', title: '1-1', children: [{ id: '1-1-1', title: '1-1-1' }, { id: '1-1-2', title: '1-1-2' }] },\n            { id: '1-2', title: '1-2' },\n        ],\n    },\n    { id: '2', title: '2', children: [{ id: '2-1', title: '2-1' }, { id: '2-2', title: '2-2' }] },\n    { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\nconst App = () => {\n    const [value, setValue] = useState([]);\n    const handleChange = v => setValue(v);\n    const handleFilter = text => v => v.title.indexOf(text) > -1;\n    return (<Select absolute multiple clearable format=\"id\" keygen=\"id\" value={value} treeData={data} style={{ width: 250 }} onFilter={handleFilter} onChange={handleChange} renderItem={v => `node ${v.title}`} disabled={v => v.title.startsWith('1-')}/>);\n};\nexport default App;\n"},1257:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=[{value:"jiangsu",children:[{value:"nanjing",children:[{value:"jiangning"},{value:"gulou"}]},{value:"suzhou"}]},{value:"anhui",children:[{value:"hefei",children:[{value:"feidong"},{value:"feixi"}]},{value:"maanshan"}]}];t.default=function(){return r.a.createElement(l.a,{absolute:!0,multiple:!0,clearable:!0,format:"value",keygen:"value",treeData:o,renderItem:"value",showHitDescendants:!0,style:{width:250},onAdvancedFilter:function(t){return function(e){return-1<e.value.indexOf(t)}}})}},1258:function(e,t){e.exports="/**\n * cn -\n *    -- 使用 onAdvancedFilter 属性开启高级筛选，可针对当前层级在筛选结果和原始数据间切换\n * en -\n *    -- In the advanced filter mode, you can switch between the filter results and the original data for the current level by pressing the button\n */\nimport React from 'react'\nimport { Select, TYPE } from 'shineout'\n\ninterface TreeData {\n  value: string\n  children?: TreeData[]\n}\ntype SelectProps = TYPE.Select.Props<TreeData, string>\ntype SelectOnAdvancedFilter = SelectProps['onAdvancedFilter']\n\nconst data: TreeData[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'gulou',\n          },\n        ],\n      },\n      {\n        value: 'suzhou',\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n          {\n            value: 'feixi',\n          },\n        ],\n      },\n      {\n        value: 'maanshan',\n      },\n    ],\n  },\n]\n\nconst App: React.FC = () => {\n  const onAdvancedFilter: SelectOnAdvancedFilter = text => d => d.value.indexOf(text) > -1\n\n  return (\n    <Select\n      absolute\n      multiple\n      clearable\n      format=\"value\"\n      keygen=\"value\"\n      treeData={data}\n      renderItem=\"value\"\n      showHitDescendants\n      style={{ width: 250 }}\n      onAdvancedFilter={onAdvancedFilter}\n    />\n  )\n}\n\nexport default App\n"},1259:function(e,t){e.exports="/**\n * cn -\n *    -- 使用 onAdvancedFilter 属性开启高级筛选，可针对当前层级在筛选结果和原始数据间切换\n * en -\n *    -- In the advanced filter mode, you can switch between the filter results and the original data for the current level by pressing the button\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst data = [\n    {\n        value: 'jiangsu',\n        children: [\n            {\n                value: 'nanjing',\n                children: [\n                    {\n                        value: 'jiangning',\n                    },\n                    {\n                        value: 'gulou',\n                    },\n                ],\n            },\n            {\n                value: 'suzhou',\n            },\n        ],\n    },\n    {\n        value: 'anhui',\n        children: [\n            {\n                value: 'hefei',\n                children: [\n                    {\n                        value: 'feidong',\n                    },\n                    {\n                        value: 'feixi',\n                    },\n                ],\n            },\n            {\n                value: 'maanshan',\n            },\n        ],\n    },\n];\nconst App = () => {\n    const onAdvancedFilter = text => d => d.value.indexOf(text) > -1;\n    return (<Select absolute multiple clearable format=\"value\" keygen=\"value\" treeData={data} renderItem=\"value\" showHitDescendants style={{ width: 250 }} onAdvancedFilter={onAdvancedFilter}/>);\n};\nexport default App;\n"},1260:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement(l.a,{keygen:!0,renderResult:function(e){return"I love ".concat(e)},style:{width:240},data:o,defaultValue:""})}},1261:function(e,t){e.exports="/**\n * cn - 自定义结果\n *    --  使用 renderResult 去自定义选中的结果。\n * en -  result\n *    --  use renderRsult. to format the result\n */\nimport React from 'react'\nimport { Select, TYPE } from 'shineout'\n\ntype SelectItem = string\ntype SelectProps = TYPE.Select.Props<SelectItem, string>\ntype SelectRenderResult = SelectProps['renderResult']\n\nconst data: SelectItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => {\n  const renderResult: SelectRenderResult = c => `I love ${c}`\n\n  return <Select keygen renderResult={renderResult} style={{ width: 240 }} data={data} defaultValue=\"\" />\n}\n\nexport default App\n"},1262:function(e,t){e.exports="/**\n * cn - 自定义结果\n *    --  使用 renderResult 去自定义选中的结果。\n * en -  result\n *    --  use renderRsult. to format the result\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => {\n    const renderResult = c => `I love ${c}`;\n    return <Select keygen renderResult={renderResult} style={{ width: 240 }} data={data} defaultValue=\"\"/>;\n};\nexport default App;\n"},1263:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o={width:240,marginInlineEnd:12},i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement("div",{style:{verticalAlign:"top"}},r.a.createElement(l.a,{innerTitle:"Pick a color, please",multiple:!0,compressed:!0,clearable:!0,keygen:!0,style:o,data:i}),r.a.createElement(l.a,{keygen:!0,clearable:!0,compressed:!0,data:i,style:o,innerTitle:"Pick a color, please",onFilter:function(t){return function(e){return 0<=e.indexOf(t)}}}))}},1264:function(e,t){e.exports="/**\n * cn - 内嵌标题\n *    -- 使用 innerTitle 展示内嵌标题\n * en - inner title\n *    -- use innerTitle to display the inner title\n */\nimport React from 'react'\nimport { Select } from 'shineout'\n\ntype SelectItem = string\nconst style: React.CSSProperties = { width: 240, marginInlineEnd: 12 }\nconst data: SelectItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => (\n  <div style={{ verticalAlign: 'top' }}>\n    <Select innerTitle=\"Pick a color, please\" multiple compressed clearable keygen style={style} data={data} />\n    <Select\n      keygen\n      clearable\n      compressed\n      data={data}\n      style={style}\n      innerTitle=\"Pick a color, please\"\n      onFilter={text => d => d.indexOf(text) >= 0}\n    />\n  </div>\n)\n\nexport default App\n"},1265:function(e,t){e.exports="/**\n * cn - 内嵌标题\n *    -- 使用 innerTitle 展示内嵌标题\n * en - inner title\n *    -- use innerTitle to display the inner title\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst style = { width: 240, marginInlineEnd: 12 };\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => (<div style={{ verticalAlign: 'top' }}>\n    <Select innerTitle=\"Pick a color, please\" multiple compressed clearable keygen style={style} data={data}/>\n    <Select keygen clearable compressed data={data} style={style} innerTitle=\"Pick a color, please\" onFilter={text => d => d.indexOf(text) >= 0}/>\n  </div>);\nexport default App;\n"},1266:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=n(51),i={width:240,marginInlineEnd:12},s=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement("div",null,r.a.createElement(l.a,{keygen:!0,data:s,loading:!0,defaultValue:"",style:i}),r.a.createElement(l.a,{keygen:!0,data:s,style:i,defaultValue:"",loading:r.a.createElement(o.a,{size:18,name:"four-dots",color:"green"})}))}},1267:function(e,t){e.exports="/**\n * cn - 加载中\n *    -- 数据加载中，为true时会展示一个默认的[Spin](/components/Spin)组件，可以传入一个自定义的Spin代替\n * en - Loading\n *    -- When it is true, a default [Spin](/components/Spin) component will be displayed, a custom loading icon can be passed in to replace.\n */\nimport React from 'react'\nimport { Select, Spin } from 'shineout'\n\ntype SelectItem = string\nconst style: React.CSSProperties = { width: 240, marginInlineEnd: 12 }\nconst data: SelectItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => (\n  <div>\n    <Select keygen data={data} loading defaultValue=\"\" style={style} />\n\n    <Select\n      keygen\n      data={data}\n      style={style}\n      defaultValue=\"\"\n      loading={<Spin size={18} name=\"four-dots\" color=\"green\" />}\n    />\n  </div>\n)\n\nexport default App\n"},1268:function(e,t){e.exports="/**\n * cn - 加载中\n *    -- 数据加载中，为true时会展示一个默认的[Spin](/components/Spin)组件，可以传入一个自定义的Spin代替\n * en - Loading\n *    -- When it is true, a default [Spin](/components/Spin) component will be displayed, a custom loading icon can be passed in to replace.\n */\nimport React from 'react';\nimport { Select, Spin } from 'shineout';\nconst style = { width: 240, marginInlineEnd: 12 };\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => (<div>\n    <Select keygen data={data} loading defaultValue=\"\" style={style}/>\n\n    <Select keygen data={data} style={style} defaultValue=\"\" loading={<Spin size={18} name=\"four-dots\" color=\"green\"/>}/>\n  </div>);\nexport default App;\n"},1269:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=n(566),i=["red","orange","yellow","green","cyan","blue","violet","aaa","bbb","ccc","ddd"];t.default=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(l.a,{keygen:!0,style:{width:240,marginInlineEnd:16},data:i,renderOptionList:function(e){return r.a.createElement("div",null,r.a.createElement("div",null,"header"),r.a.createElement("div",null,e),r.a.createElement("div",null,"footer"))}}),r.a.createElement(l.a,{keygen:!0,columns:2,style:{width:240,marginInlineEnd:16},data:i,renderOptionList:function(e){return r.a.createElement("div",null,r.a.createElement("div",null,"header"),r.a.createElement("div",null,e),r.a.createElement("div",null,"footer"))}}),r.a.createElement(l.a,{style:{width:240},format:"id",keygen:"id",treeData:o.c,renderItem:function(e){return"node ".concat(e.text)},renderOptionList:function(e){return r.a.createElement("div",null,r.a.createElement("div",null,"header"),r.a.createElement("div",null,e),r.a.createElement("div",null,"footer"))}}))}},1270:function(e,t){e.exports="/**\n * cn - 自定义渲染下拉列表\n *    -- 使用 renderOptionList 来自定义渲染下拉列表\n * en - custom render dropdown\n *    -- Use the renderOptionList property to customize the render dropdown list\n */\nimport React from 'react'\nimport { Select } from 'shineout'\nimport treeDta from 'doc/data/tree'\n\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'aaa', 'bbb', 'ccc', 'ddd']\n\nconst App: React.FC = () => (\n  <>\n    <Select\n      keygen\n      style={{ width: 240, marginInlineEnd: 16 }}\n      data={data}\n      renderOptionList={s => (\n        <div>\n          <div>header</div>\n          <div>{s}</div>\n          <div>footer</div>\n        </div>\n      )}\n    />\n    <Select\n      keygen\n      columns={2}\n      style={{ width: 240, marginInlineEnd: 16 }}\n      data={data}\n      renderOptionList={(s: any) => (\n        <div>\n          <div>header</div>\n          <div>{s}</div>\n          <div>footer</div>\n        </div>\n      )}\n    />\n    <Select\n      style={{ width: 240 }}\n      format=\"id\"\n      keygen=\"id\"\n      treeData={treeDta}\n      renderItem={v => `node ${v.text}`}\n      renderOptionList={(s: any) => (\n        <div>\n          <div>header</div>\n          <div>{s}</div>\n          <div>footer</div>\n        </div>\n      )}\n    />\n  </>\n)\n\nexport default App\n"},1271:function(e,t){e.exports="/**\n * cn - 自定义渲染下拉列表\n *    -- 使用 renderOptionList 来自定义渲染下拉列表\n * en - custom render dropdown\n *    -- Use the renderOptionList property to customize the render dropdown list\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nimport treeDta from 'doc/data/tree';\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'aaa', 'bbb', 'ccc', 'ddd'];\nconst App = () => (<>\n    <Select keygen style={{ width: 240, marginInlineEnd: 16 }} data={data} renderOptionList={s => (<div>\n          <div>header</div>\n          <div>{s}</div>\n          <div>footer</div>\n        </div>)}/>\n    <Select keygen columns={2} style={{ width: 240, marginInlineEnd: 16 }} data={data} renderOptionList={(s) => (<div>\n          <div>header</div>\n          <div>{s}</div>\n          <div>footer</div>\n        </div>)}/>\n    <Select style={{ width: 240 }} format=\"id\" keygen=\"id\" treeData={treeDta} renderItem={v => `node ${v.text}`} renderOptionList={(s) => (<div>\n          <div>header</div>\n          <div>{s}</div>\n          <div>footer</div>\n        </div>)}/>\n  </>);\nexport default App;\n"},1272:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement(l.a,{maxLength:10,absolute:!0,multiple:!0,clearable:!0,keygen:!0,data:o,style:{width:250},onFilter:function(t){return function(e){return-1<e.indexOf(t)}}})}},1273:function(e,t){e.exports="/**\n * cn - 筛选限制字符长度\n *    -- maxLength\n * en - 筛选限制字符长度\n *    -- maxLength\n */\nimport React from 'react'\nimport { Select, TYPE } from 'shineout'\n\ntype SelectProps = TYPE.Select.Props<string, string[]>\ntype SelectOnFilter = SelectProps['onFilter']\n\nconst data: string[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => {\n  const handleFilter: SelectOnFilter = text => v => v.indexOf(text) > -1\n\n  return (\n    <Select\n      maxLength={10}\n      absolute\n      multiple\n      clearable\n      keygen\n      data={data}\n      style={{ width: 250 }}\n      onFilter={handleFilter}\n    />\n  )\n}\n\nexport default App\n"},1274:function(e,t){e.exports="/**\n * cn - 筛选限制字符长度\n *    -- maxLength\n * en - 筛选限制字符长度\n *    -- maxLength\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => {\n    const handleFilter = text => v => v.indexOf(text) > -1;\n    return (<Select maxLength={10} absolute multiple clearable keygen data={data} style={{ width: 250 }} onFilter={handleFilter}/>);\n};\nexport default App;\n"},1275:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement(l.a,{keygen:!0,style:{width:240},data:o,defaultValue:"",header:r.a.createElement("span",null,"i am header")})}},1276:function(e,t){e.exports="/**\n * cn - 自定义 header\n *    -- header\n * en - 自定义 header\n *    -- header\n */\nimport React from 'react'\nimport { Select } from 'shineout'\n\nconst data: string[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => (\n  <Select keygen style={{ width: 240 }} data={data} defaultValue=\"\" header={<span>i am header</span>} />\n)\n\nexport default App\n"},1277:function(e,t){e.exports="/**\n * cn - 自定义 header\n *    -- header\n * en - 自定义 header\n *    -- header\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => (<Select keygen style={{ width: 240 }} data={data} defaultValue=\"\" header={<span>i am header</span>}/>);\nexport default App;\n"},1278:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(200),o=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(l.a,{keygen:!0,style:{width:240},data:o,onCreate:!0,hideCreateOption:!0,multiple:!0}))}},1279:function(e,t){e.exports="/**\n * cn - hideCreateOption\n *    -- 创建选项不展示option\n * en - hideCreateOption\n *    -- 创建选项不展示option\n */\nimport React from 'react'\nimport { Select } from 'shineout'\n\nconst data: string[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => (\n  <>\n    <Select keygen style={{ width: 240 }} data={data} onCreate hideCreateOption multiple />\n  </>\n)\n\nexport default App\n"},1280:function(e,t){e.exports="/**\n * cn - hideCreateOption\n *    -- 创建选项不展示option\n * en - hideCreateOption\n *    -- 创建选项不展示option\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => (<>\n    <Select keygen style={{ width: 240 }} data={data} onCreate hideCreateOption multiple/>\n  </>);\nexport default App;\n"},1281:function(e,t,n){"use strict";n.r(t);var r=n(24),a=n(0),l=n.n(a),o=n(255),i=n(200),s={width:240,marginBottom:12},c=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){var e=l.a.useState({}),t=Object(r.a)(e,2),n=t[0],a=t[1];return l.a.createElement(o.a,{onSubmit:function(e){a(e)}},l.a.createElement(i.a,{name:"color",style:s,data:c,keygen:!0,placeholder:"input color",onCreate:!0}),l.a.createElement(o.a.Submit,null,"搜索"),l.a.createElement("div",null,l.a.createElement("span",null,"提交值："),l.a.createElement("span",{className:"submit-value"},n.color)))}},1282:function(e,t){e.exports="/**\n * cn - 创建选项 blur 后点击回调搜索\n *    -- 修复blur 后延迟导致 onSubmit 的数据不对的问题\n */\nimport React from 'react'\nimport { Select, Form } from 'shineout'\n\ntype SelectItem = string\n\nconst style: React.CSSProperties = { width: 240, marginBottom: 12 }\nconst data: SelectItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<{ color?: string }>({})\n  return (\n    <Form\n      onSubmit={(d: { color?: string }) => {\n        setValue(d)\n      }}\n    >\n      <Select name=\"color\" style={style} data={data} keygen placeholder=\"input color\" onCreate />\n      <Form.Submit>搜索</Form.Submit>\n      <div>\n        <span>提交值：</span>\n        <span className=\"submit-value\">{value.color}</span>\n      </div>\n    </Form>\n  )\n}\n\nexport default App\n"},1283:function(e,t){e.exports="/**\n * cn - 创建选项 blur 后点击回调搜索\n *    -- 修复blur 后延迟导致 onSubmit 的数据不对的问题\n */\nimport React from 'react';\nimport { Select, Form } from 'shineout';\nconst style = { width: 240, marginBottom: 12 };\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst App = () => {\n    const [value, setValue] = React.useState({});\n    return (<Form onSubmit={(d) => {\n            setValue(d);\n        }}>\n      <Select name=\"color\" style={style} data={data} keygen placeholder=\"input color\" onCreate/>\n      <Form.Submit>搜索</Form.Submit>\n      <div>\n        <span>提交值：</span>\n        <span className=\"submit-value\">{value.color}</span>\n      </div>\n    </Form>);\n};\nexport default App;\n"}}]);